/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TrackingReminderNotificationTrackAllAction
 */
export interface TrackingReminderNotificationTrackAllAction {
    /**
     * Ex: trackAll
     * @type {string}
     * @memberof TrackingReminderNotificationTrackAllAction
     */
    action: string;
    /**
     * Ex: trackThreeRatingAction
     * @type {string}
     * @memberof TrackingReminderNotificationTrackAllAction
     */
    callback: string;
    /**
     * Ex: 3
     * @type {number}
     * @memberof TrackingReminderNotificationTrackAllAction
     */
    modifiedValue: number;
    /**
     * Ex: Rate 3/5 for all
     * @type {string}
     * @memberof TrackingReminderNotificationTrackAllAction
     */
    title: string;
}

export function TrackingReminderNotificationTrackAllActionFromJSON(json: any): TrackingReminderNotificationTrackAllAction {
    return TrackingReminderNotificationTrackAllActionFromJSONTyped(json, false);
}

export function TrackingReminderNotificationTrackAllActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackingReminderNotificationTrackAllAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': json['action'],
        'callback': json['callback'],
        'modifiedValue': json['modifiedValue'],
        'title': json['title'],
    };
}

export function TrackingReminderNotificationTrackAllActionToJSON(value?: TrackingReminderNotificationTrackAllAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'callback': value.callback,
        'modifiedValue': value.modifiedValue,
        'title': value.title,
    };
}


