/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Vote
 */
export interface Vote {
    /**
     * Cause variable id
     * @type {number}
     * @memberof Vote
     */
    causeVariableId: number;
    /**
     * Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @type {string}
     * @memberof Vote
     */
    clientId: string;
    /**
     * When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
     * @type {string}
     * @memberof Vote
     */
    createdAt?: string;
    /**
     * Effect variable id
     * @type {number}
     * @memberof Vote
     */
    effectVariableId: number;
    /**
     * id
     * @type {number}
     * @memberof Vote
     */
    id?: number;
    /**
     * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
     * @type {string}
     * @memberof Vote
     */
    updatedAt?: string;
    /**
     * ID of User
     * @type {number}
     * @memberof Vote
     */
    userId: number;
    /**
     * Vote down for implausible/not-useful or up for plausible/useful. Vote none to delete a previous vote.
     * @type {string}
     * @memberof Vote
     */
    value: VoteValueEnum;
    /**
     * Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @type {string}
     * @memberof Vote
     */
    type?: VoteTypeEnum;
}

export function VoteFromJSON(json: any): Vote {
    return VoteFromJSONTyped(json, false);
}

export function VoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vote {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'causeVariableId': json['causeVariableId'],
        'clientId': json['clientId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'effectVariableId': json['effectVariableId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'userId': json['userId'],
        'value': json['value'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function VoteToJSON(value?: Vote | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'causeVariableId': value.causeVariableId,
        'clientId': value.clientId,
        'createdAt': value.createdAt,
        'effectVariableId': value.effectVariableId,
        'id': value.id,
        'updatedAt': value.updatedAt,
        'userId': value.userId,
        'value': value.value,
        'type': value.type,
    };
}

/**
* @export
* @enum {string}
*/
export enum VoteValueEnum {
    Up = 'up',
    Down = 'down',
    None = 'none'
}
/**
* @export
* @enum {string}
*/
export enum VoteTypeEnum {
    Causality = 'causality',
    Usefulness = 'usefulness'
}


