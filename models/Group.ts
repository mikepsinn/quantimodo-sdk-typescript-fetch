/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * What do you expect?
     * @type {number}
     * @memberof Group
     */
    id: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof Group
     */
    creatorId: number;
    /**
     * What do you expect?
     * @type {string}
     * @memberof Group
     */
    name: string;
    /**
     * What do you expect?
     * @type {string}
     * @memberof Group
     */
    slug: string;
    /**
     * What do you expect?
     * @type {string}
     * @memberof Group
     */
    description: string;
    /**
     * What do you expect?
     * @type {string}
     * @memberof Group
     */
    status: string;
    /**
     * What do you expect?
     * @type {number}
     * @memberof Group
     */
    parentId: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof Group
     */
    enableForum: number;
    /**
     * What do you expect?
     * @type {string}
     * @memberof Group
     */
    dateCreated: string;
    /**
     * Additional group key-value data
     * @type {Array<object>}
     * @memberof Group
     */
    metaDataArray?: Array<object>;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'creatorId': json['creatorId'],
        'name': json['name'],
        'slug': json['slug'],
        'description': json['description'],
        'status': json['status'],
        'parentId': json['parentId'],
        'enableForum': json['enableForum'],
        'dateCreated': json['dateCreated'],
        'metaDataArray': !exists(json, 'metaDataArray') ? undefined : json['metaDataArray'],
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'creatorId': value.creatorId,
        'name': value.name,
        'slug': value.slug,
        'description': value.description,
        'status': value.status,
        'parentId': value.parentId,
        'enableForum': value.enableForum,
        'dateCreated': value.dateCreated,
        'metaDataArray': value.metaDataArray,
    };
}


