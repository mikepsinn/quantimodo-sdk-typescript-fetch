/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Button
 */
export interface Button {
    /**
     * Ex: connect
     * @type {string}
     * @memberof Button
     */
    accessibilityText?: string;
    /**
     * Action data
     * @type {object}
     * @memberof Button
     */
    action?: object;
    /**
     * Ex: connect
     * @type {string}
     * @memberof Button
     */
    additionalInformation?: string;
    /**
     * Ex: #f2f2f2
     * @type {string}
     * @memberof Button
     */
    color?: string;
    /**
     * Text to show user before executing functionName
     * @type {string}
     * @memberof Button
     */
    confirmationText?: string;
    /**
     * Name of function to call
     * @type {string}
     * @memberof Button
     */
    functionName?: string;
    /**
     * Data to provide to functionName or be copied to the card parameters when button is clicked and card is posted to the API
     * @type {object}
     * @memberof Button
     */
    parameters?: object;
    /**
     * Ex: connect
     * @type {string}
     * @memberof Button
     */
    html?: string;
    /**
     * HTML element id
     * @type {string}
     * @memberof Button
     */
    id?: string;
    /**
     * Ex: https://image.jpg
     * @type {string}
     * @memberof Button
     */
    image?: string;
    /**
     * Ex: ion-refresh
     * @type {string}
     * @memberof Button
     */
    ionIcon?: string;
    /**
     * Ex: https://local.quantimo.do
     * @type {string}
     * @memberof Button
     */
    link: string;
    /**
     * State to go to
     * @type {string}
     * @memberof Button
     */
    stateName?: string;
    /**
     * Data to provide to the state
     * @type {object}
     * @memberof Button
     */
    stateParams?: object;
    /**
     * Text to show user after executing functionName
     * @type {string}
     * @memberof Button
     */
    successToastText?: string;
    /**
     * Text to show user after executing functionName
     * @type {string}
     * @memberof Button
     */
    successAlertTitle?: string;
    /**
     * Text to show user after executing functionName
     * @type {string}
     * @memberof Button
     */
    successAlertBody?: string;
    /**
     * Ex: Connect
     * @type {string}
     * @memberof Button
     */
    text: string;
    /**
     * Ex: This is a tooltip
     * @type {string}
     * @memberof Button
     */
    tooltip?: string;
    /**
     * Post here on button click
     * @type {string}
     * @memberof Button
     */
    webhookUrl?: string;
}

export function ButtonFromJSON(json: any): Button {
    return ButtonFromJSONTyped(json, false);
}

export function ButtonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Button {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessibilityText': !exists(json, 'accessibilityText') ? undefined : json['accessibilityText'],
        'action': !exists(json, 'action') ? undefined : json['action'],
        'additionalInformation': !exists(json, 'additionalInformation') ? undefined : json['additionalInformation'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'confirmationText': !exists(json, 'confirmationText') ? undefined : json['confirmationText'],
        'functionName': !exists(json, 'functionName') ? undefined : json['functionName'],
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
        'html': !exists(json, 'html') ? undefined : json['html'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'ionIcon': !exists(json, 'ionIcon') ? undefined : json['ionIcon'],
        'link': json['link'],
        'stateName': !exists(json, 'stateName') ? undefined : json['stateName'],
        'stateParams': !exists(json, 'stateParams') ? undefined : json['stateParams'],
        'successToastText': !exists(json, 'successToastText') ? undefined : json['successToastText'],
        'successAlertTitle': !exists(json, 'successAlertTitle') ? undefined : json['successAlertTitle'],
        'successAlertBody': !exists(json, 'successAlertBody') ? undefined : json['successAlertBody'],
        'text': json['text'],
        'tooltip': !exists(json, 'tooltip') ? undefined : json['tooltip'],
        'webhookUrl': !exists(json, 'webhookUrl') ? undefined : json['webhookUrl'],
    };
}

export function ButtonToJSON(value?: Button | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessibilityText': value.accessibilityText,
        'action': value.action,
        'additionalInformation': value.additionalInformation,
        'color': value.color,
        'confirmationText': value.confirmationText,
        'functionName': value.functionName,
        'parameters': value.parameters,
        'html': value.html,
        'id': value.id,
        'image': value.image,
        'ionIcon': value.ionIcon,
        'link': value.link,
        'stateName': value.stateName,
        'stateParams': value.stateParams,
        'successToastText': value.successToastText,
        'successAlertTitle': value.successAlertTitle,
        'successAlertBody': value.successAlertBody,
        'text': value.text,
        'tooltip': value.tooltip,
        'webhookUrl': value.webhookUrl,
    };
}


