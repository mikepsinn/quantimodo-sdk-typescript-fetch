/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Card,
    CardFromJSON,
    CardFromJSONTyped,
    CardToJSON,
    TrackingReminderNotificationAction,
    TrackingReminderNotificationActionFromJSON,
    TrackingReminderNotificationActionFromJSONTyped,
    TrackingReminderNotificationActionToJSON,
    TrackingReminderNotificationTrackAllAction,
    TrackingReminderNotificationTrackAllActionFromJSON,
    TrackingReminderNotificationTrackAllActionFromJSONTyped,
    TrackingReminderNotificationTrackAllActionToJSON,
    Unit,
    UnitFromJSON,
    UnitFromJSONTyped,
    UnitToJSON,
} from './';

/**
 * 
 * @export
 * @interface TrackingReminderNotification
 */
export interface TrackingReminderNotification {
    /**
     * 
     * @type {Array<TrackingReminderNotificationAction>}
     * @memberof TrackingReminderNotification
     */
    actionArray: Array<TrackingReminderNotificationAction>;
    /**
     * 
     * @type {Array<Unit>}
     * @memberof TrackingReminderNotification
     */
    availableUnits: Array<Unit>;
    /**
     * Link to study comparing variable with strongest relationship for user or population
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    bestStudyLink?: string;
    /**
     * 
     * @type {Card}
     * @memberof TrackingReminderNotification
     */
    bestStudyCard?: Card;
    /**
     * Link to study comparing variable with strongest relationship for user
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    bestUserStudyLink?: string;
    /**
     * 
     * @type {Card}
     * @memberof TrackingReminderNotification
     */
    bestUserStudyCard?: Card;
    /**
     * Link to study comparing variable with strongest relationship for population
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    bestPopulationStudyLink?: string;
    /**
     * 
     * @type {Card}
     * @memberof TrackingReminderNotification
     */
    bestPopulationStudyCard?: Card;
    /**
     * Description of relationship with variable with strongest relationship for user or population
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    optimalValueMessage?: string;
    /**
     * Description of relationship with variable with strongest relationship for population
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    commonOptimalValueMessage?: string;
    /**
     * Description of relationship with variable with strongest relationship for user
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    userOptimalValueMessage?: string;
    /**
     * 
     * @type {Card}
     * @memberof TrackingReminderNotification
     */
    card?: Card;
    /**
     * Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    clientId?: string;
    /**
     * The way multiple measurements are aggregated over time
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    combinationOperation?: TrackingReminderNotificationCombinationOperationEnum;
    /**
     * Ex: 2017-07-29 20:49:54 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    createdAt?: string;
    /**
     * Ex: Trader Joe's Bedtime Tea
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    displayName?: string;
    /**
     * Is the user specified default value or falls back to the last value in user unit. Good for initializing input fields. Unit: User-specified or common.
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    modifiedValue?: number;
    /**
     * Ex: /5
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    unitAbbreviatedName?: string;
    /**
     * Ex: 5
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    unitCategoryId?: number;
    /**
     * Ex: Rating
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    unitCategoryName?: string;
    /**
     * Ex: 10
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    unitId?: number;
    /**
     * Ex: 1 to 5 Rating
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    unitName?: string;
    /**
     * Default value to use for the measurement when tracking
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    defaultValue?: number;
    /**
     * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. 
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    description?: string;
    /**
     * True if the reminders should be delivered via email
     * @type {boolean}
     * @memberof TrackingReminderNotification
     */
    email?: boolean;
    /**
     * Ex: 0
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    fillingValue: number;
    /**
     * Ex: ion-sad-outline
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    iconIcon?: string;
    /**
     * id for the specific PENDING tracking remidner
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    id: number;
    /**
     * Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    imageUrl?: string;
    /**
     * Ex: happiestFaceIsFive
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    inputType?: string;
    /**
     * Ex: ion-happy-outline
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    ionIcon?: string;
    /**
     * Ex: 3
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    lastValue?: number;
    /**
     * True if this variable is normally tracked via manual user input rather than automatic imports
     * @type {boolean}
     * @memberof TrackingReminderNotification
     */
    manualTracking?: boolean;
    /**
     * Ex: 5
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    maximumAllowedValue?: number;
    /**
     * Ex: 1
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    minimumAllowedValue?: number;
    /**
     * Ex: 3
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    mostCommonValue?: number;
    /**
     * True if the reminders should appear in the notification bar
     * @type {boolean}
     * @memberof TrackingReminderNotification
     */
    notificationBar?: boolean;
    /**
     * Ex: UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    notifiedAt?: string;
    /**
     * Ex: 5
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    numberOfUniqueValues?: number;
    /**
     * Indicates whether or not the variable is usually an outcome of interest such as a symptom or emotion
     * @type {boolean}
     * @memberof TrackingReminderNotification
     */
    outcome?: boolean;
    /**
     * Ex: img/variable_categories/emotions.png
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    pngPath?: string;
    /**
     * Ex: https://web.quantimo.do/img/variable_categories/emotions.png
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    pngUrl?: string;
    /**
     * True if the reminders should appear as a popup notification
     * @type {boolean}
     * @memberof TrackingReminderNotification
     */
    popUp?: boolean;
    /**
     * Link to associated product for purchase
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    productUrl?: string;
    /**
     * Ex: How is your overall mood?
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    question?: string;
    /**
     * Ex: How is your overall mood on a scale of 1 to 5??
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    longQuestion?: string;
    /**
     * Ex: 01-01-2018
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    reminderEndTime?: string;
    /**
     * How often user should be reminded in seconds. Ex: 86400
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    reminderFrequency?: number;
    /**
     * String identifier for the sound to accompany the reminder
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    reminderSound?: string;
    /**
     * Earliest time of day at which reminders should appear in UTC HH:MM:SS format
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    reminderStartTime?: string;
    /**
     * UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    reminderTime?: string;
    /**
     * Ex: 4
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    secondMostCommonValue?: number;
    /**
     * Ex: 1
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    secondToLastValue?: number;
    /**
     * True if the reminders should be delivered via SMS
     * @type {boolean}
     * @memberof TrackingReminderNotification
     */
    sms?: boolean;
    /**
     * Ex: https://web.quantimo.do/img/variable_categories/emotions.svg
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    svgUrl?: string;
    /**
     * Ex: 2
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    thirdMostCommonValue?: number;
    /**
     * Ex: 2
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    thirdToLastValue?: number;
    /**
     * Ex: Rate Overall Mood
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    title?: string;
    /**
     * Ex: 3
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    total?: number;
    /**
     * 
     * @type {Array<TrackingReminderNotificationTrackAllAction>}
     * @memberof TrackingReminderNotification
     */
    trackAllActions: Array<TrackingReminderNotificationTrackAllAction>;
    /**
     * id for the repeating tracking remidner
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    trackingReminderId?: number;
    /**
     * Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    trackingReminderImageUrl?: string;
    /**
     * Ex: 5072482
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    trackingReminderNotificationId?: number;
    /**
     * UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    trackingReminderNotificationTime?: string;
    /**
     * Ex: 1501534124
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    trackingReminderNotificationTimeEpoch?: number;
    /**
     * Ex: 15:48:44
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    trackingReminderNotificationTimeLocal?: string;
    /**
     * Ex: 8PM Sun, May 1
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    trackingReminderNotificationTimeLocalHumanString?: string;
    /**
     * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    updatedAt?: string;
    /**
     * ID of User
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    userId?: number;
    /**
     * Ex: /5
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    userVariableUnitAbbreviatedName?: string;
    /**
     * Ex: 5
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    userVariableUnitCategoryId?: number;
    /**
     * Ex: Rating
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    userVariableUnitCategoryName?: string;
    /**
     * Ex: 10
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    userVariableUnitId?: number;
    /**
     * Ex: 1 to 5 Rating
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    userVariableUnitName?: string;
    /**
     * Ex: 1
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    userVariableVariableCategoryId?: number;
    /**
     * Ex: Emotions
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    userVariableVariableCategoryName?: string;
    /**
     * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. 
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    valence?: string;
    /**
     * Ex: 1
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    variableCategoryId?: number;
    /**
     * Ex: https://static.quantimo.do/img/variable_categories/theatre_mask-96.png
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    variableCategoryImageUrl?: string;
    /**
     * Ex: Emotions, Treatments, Symptoms...
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    variableCategoryName?: TrackingReminderNotificationVariableCategoryNameEnum;
    /**
     * Id for the variable to be tracked
     * @type {number}
     * @memberof TrackingReminderNotification
     */
    variableId?: number;
    /**
     * Ex: https://image.png
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    variableImageUrl?: string;
    /**
     * Name of the variable to be used when sending measurements
     * @type {string}
     * @memberof TrackingReminderNotification
     */
    variableName?: string;
}

export function TrackingReminderNotificationFromJSON(json: any): TrackingReminderNotification {
    return TrackingReminderNotificationFromJSONTyped(json, false);
}

export function TrackingReminderNotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackingReminderNotification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionArray': ((json['actionArray'] as Array<any>).map(TrackingReminderNotificationActionFromJSON)),
        'availableUnits': ((json['availableUnits'] as Array<any>).map(UnitFromJSON)),
        'bestStudyLink': !exists(json, 'bestStudyLink') ? undefined : json['bestStudyLink'],
        'bestStudyCard': !exists(json, 'bestStudyCard') ? undefined : CardFromJSON(json['bestStudyCard']),
        'bestUserStudyLink': !exists(json, 'bestUserStudyLink') ? undefined : json['bestUserStudyLink'],
        'bestUserStudyCard': !exists(json, 'bestUserStudyCard') ? undefined : CardFromJSON(json['bestUserStudyCard']),
        'bestPopulationStudyLink': !exists(json, 'bestPopulationStudyLink') ? undefined : json['bestPopulationStudyLink'],
        'bestPopulationStudyCard': !exists(json, 'bestPopulationStudyCard') ? undefined : CardFromJSON(json['bestPopulationStudyCard']),
        'optimalValueMessage': !exists(json, 'optimalValueMessage') ? undefined : json['optimalValueMessage'],
        'commonOptimalValueMessage': !exists(json, 'commonOptimalValueMessage') ? undefined : json['commonOptimalValueMessage'],
        'userOptimalValueMessage': !exists(json, 'userOptimalValueMessage') ? undefined : json['userOptimalValueMessage'],
        'card': !exists(json, 'card') ? undefined : CardFromJSON(json['card']),
        'clientId': !exists(json, 'clientId') ? undefined : json['clientId'],
        'combinationOperation': !exists(json, 'combinationOperation') ? undefined : json['combinationOperation'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'modifiedValue': !exists(json, 'modifiedValue') ? undefined : json['modifiedValue'],
        'unitAbbreviatedName': !exists(json, 'unitAbbreviatedName') ? undefined : json['unitAbbreviatedName'],
        'unitCategoryId': !exists(json, 'unitCategoryId') ? undefined : json['unitCategoryId'],
        'unitCategoryName': !exists(json, 'unitCategoryName') ? undefined : json['unitCategoryName'],
        'unitId': !exists(json, 'unitId') ? undefined : json['unitId'],
        'unitName': !exists(json, 'unitName') ? undefined : json['unitName'],
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'fillingValue': json['fillingValue'],
        'iconIcon': !exists(json, 'iconIcon') ? undefined : json['iconIcon'],
        'id': json['id'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'inputType': !exists(json, 'inputType') ? undefined : json['inputType'],
        'ionIcon': !exists(json, 'ionIcon') ? undefined : json['ionIcon'],
        'lastValue': !exists(json, 'lastValue') ? undefined : json['lastValue'],
        'manualTracking': !exists(json, 'manualTracking') ? undefined : json['manualTracking'],
        'maximumAllowedValue': !exists(json, 'maximumAllowedValue') ? undefined : json['maximumAllowedValue'],
        'minimumAllowedValue': !exists(json, 'minimumAllowedValue') ? undefined : json['minimumAllowedValue'],
        'mostCommonValue': !exists(json, 'mostCommonValue') ? undefined : json['mostCommonValue'],
        'notificationBar': !exists(json, 'notificationBar') ? undefined : json['notificationBar'],
        'notifiedAt': !exists(json, 'notifiedAt') ? undefined : json['notifiedAt'],
        'numberOfUniqueValues': !exists(json, 'numberOfUniqueValues') ? undefined : json['numberOfUniqueValues'],
        'outcome': !exists(json, 'outcome') ? undefined : json['outcome'],
        'pngPath': !exists(json, 'pngPath') ? undefined : json['pngPath'],
        'pngUrl': !exists(json, 'pngUrl') ? undefined : json['pngUrl'],
        'popUp': !exists(json, 'popUp') ? undefined : json['popUp'],
        'productUrl': !exists(json, 'productUrl') ? undefined : json['productUrl'],
        'question': !exists(json, 'question') ? undefined : json['question'],
        'longQuestion': !exists(json, 'longQuestion') ? undefined : json['longQuestion'],
        'reminderEndTime': !exists(json, 'reminderEndTime') ? undefined : json['reminderEndTime'],
        'reminderFrequency': !exists(json, 'reminderFrequency') ? undefined : json['reminderFrequency'],
        'reminderSound': !exists(json, 'reminderSound') ? undefined : json['reminderSound'],
        'reminderStartTime': !exists(json, 'reminderStartTime') ? undefined : json['reminderStartTime'],
        'reminderTime': !exists(json, 'reminderTime') ? undefined : json['reminderTime'],
        'secondMostCommonValue': !exists(json, 'secondMostCommonValue') ? undefined : json['secondMostCommonValue'],
        'secondToLastValue': !exists(json, 'secondToLastValue') ? undefined : json['secondToLastValue'],
        'sms': !exists(json, 'sms') ? undefined : json['sms'],
        'svgUrl': !exists(json, 'svgUrl') ? undefined : json['svgUrl'],
        'thirdMostCommonValue': !exists(json, 'thirdMostCommonValue') ? undefined : json['thirdMostCommonValue'],
        'thirdToLastValue': !exists(json, 'thirdToLastValue') ? undefined : json['thirdToLastValue'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'total': !exists(json, 'total') ? undefined : json['total'],
        'trackAllActions': ((json['trackAllActions'] as Array<any>).map(TrackingReminderNotificationTrackAllActionFromJSON)),
        'trackingReminderId': !exists(json, 'trackingReminderId') ? undefined : json['trackingReminderId'],
        'trackingReminderImageUrl': !exists(json, 'trackingReminderImageUrl') ? undefined : json['trackingReminderImageUrl'],
        'trackingReminderNotificationId': !exists(json, 'trackingReminderNotificationId') ? undefined : json['trackingReminderNotificationId'],
        'trackingReminderNotificationTime': !exists(json, 'trackingReminderNotificationTime') ? undefined : json['trackingReminderNotificationTime'],
        'trackingReminderNotificationTimeEpoch': !exists(json, 'trackingReminderNotificationTimeEpoch') ? undefined : json['trackingReminderNotificationTimeEpoch'],
        'trackingReminderNotificationTimeLocal': !exists(json, 'trackingReminderNotificationTimeLocal') ? undefined : json['trackingReminderNotificationTimeLocal'],
        'trackingReminderNotificationTimeLocalHumanString': !exists(json, 'trackingReminderNotificationTimeLocalHumanString') ? undefined : json['trackingReminderNotificationTimeLocalHumanString'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'userVariableUnitAbbreviatedName': !exists(json, 'userVariableUnitAbbreviatedName') ? undefined : json['userVariableUnitAbbreviatedName'],
        'userVariableUnitCategoryId': !exists(json, 'userVariableUnitCategoryId') ? undefined : json['userVariableUnitCategoryId'],
        'userVariableUnitCategoryName': !exists(json, 'userVariableUnitCategoryName') ? undefined : json['userVariableUnitCategoryName'],
        'userVariableUnitId': !exists(json, 'userVariableUnitId') ? undefined : json['userVariableUnitId'],
        'userVariableUnitName': !exists(json, 'userVariableUnitName') ? undefined : json['userVariableUnitName'],
        'userVariableVariableCategoryId': !exists(json, 'userVariableVariableCategoryId') ? undefined : json['userVariableVariableCategoryId'],
        'userVariableVariableCategoryName': !exists(json, 'userVariableVariableCategoryName') ? undefined : json['userVariableVariableCategoryName'],
        'valence': !exists(json, 'valence') ? undefined : json['valence'],
        'variableCategoryId': !exists(json, 'variableCategoryId') ? undefined : json['variableCategoryId'],
        'variableCategoryImageUrl': !exists(json, 'variableCategoryImageUrl') ? undefined : json['variableCategoryImageUrl'],
        'variableCategoryName': !exists(json, 'variableCategoryName') ? undefined : json['variableCategoryName'],
        'variableId': !exists(json, 'variableId') ? undefined : json['variableId'],
        'variableImageUrl': !exists(json, 'variableImageUrl') ? undefined : json['variableImageUrl'],
        'variableName': !exists(json, 'variableName') ? undefined : json['variableName'],
    };
}

export function TrackingReminderNotificationToJSON(value?: TrackingReminderNotification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionArray': ((value.actionArray as Array<any>).map(TrackingReminderNotificationActionToJSON)),
        'availableUnits': ((value.availableUnits as Array<any>).map(UnitToJSON)),
        'bestStudyLink': value.bestStudyLink,
        'bestStudyCard': CardToJSON(value.bestStudyCard),
        'bestUserStudyLink': value.bestUserStudyLink,
        'bestUserStudyCard': CardToJSON(value.bestUserStudyCard),
        'bestPopulationStudyLink': value.bestPopulationStudyLink,
        'bestPopulationStudyCard': CardToJSON(value.bestPopulationStudyCard),
        'optimalValueMessage': value.optimalValueMessage,
        'commonOptimalValueMessage': value.commonOptimalValueMessage,
        'userOptimalValueMessage': value.userOptimalValueMessage,
        'card': CardToJSON(value.card),
        'clientId': value.clientId,
        'combinationOperation': value.combinationOperation,
        'createdAt': value.createdAt,
        'displayName': value.displayName,
        'modifiedValue': value.modifiedValue,
        'unitAbbreviatedName': value.unitAbbreviatedName,
        'unitCategoryId': value.unitCategoryId,
        'unitCategoryName': value.unitCategoryName,
        'unitId': value.unitId,
        'unitName': value.unitName,
        'defaultValue': value.defaultValue,
        'description': value.description,
        'email': value.email,
        'fillingValue': value.fillingValue,
        'iconIcon': value.iconIcon,
        'id': value.id,
        'imageUrl': value.imageUrl,
        'inputType': value.inputType,
        'ionIcon': value.ionIcon,
        'lastValue': value.lastValue,
        'manualTracking': value.manualTracking,
        'maximumAllowedValue': value.maximumAllowedValue,
        'minimumAllowedValue': value.minimumAllowedValue,
        'mostCommonValue': value.mostCommonValue,
        'notificationBar': value.notificationBar,
        'notifiedAt': value.notifiedAt,
        'numberOfUniqueValues': value.numberOfUniqueValues,
        'outcome': value.outcome,
        'pngPath': value.pngPath,
        'pngUrl': value.pngUrl,
        'popUp': value.popUp,
        'productUrl': value.productUrl,
        'question': value.question,
        'longQuestion': value.longQuestion,
        'reminderEndTime': value.reminderEndTime,
        'reminderFrequency': value.reminderFrequency,
        'reminderSound': value.reminderSound,
        'reminderStartTime': value.reminderStartTime,
        'reminderTime': value.reminderTime,
        'secondMostCommonValue': value.secondMostCommonValue,
        'secondToLastValue': value.secondToLastValue,
        'sms': value.sms,
        'svgUrl': value.svgUrl,
        'thirdMostCommonValue': value.thirdMostCommonValue,
        'thirdToLastValue': value.thirdToLastValue,
        'title': value.title,
        'total': value.total,
        'trackAllActions': ((value.trackAllActions as Array<any>).map(TrackingReminderNotificationTrackAllActionToJSON)),
        'trackingReminderId': value.trackingReminderId,
        'trackingReminderImageUrl': value.trackingReminderImageUrl,
        'trackingReminderNotificationId': value.trackingReminderNotificationId,
        'trackingReminderNotificationTime': value.trackingReminderNotificationTime,
        'trackingReminderNotificationTimeEpoch': value.trackingReminderNotificationTimeEpoch,
        'trackingReminderNotificationTimeLocal': value.trackingReminderNotificationTimeLocal,
        'trackingReminderNotificationTimeLocalHumanString': value.trackingReminderNotificationTimeLocalHumanString,
        'updatedAt': value.updatedAt,
        'userId': value.userId,
        'userVariableUnitAbbreviatedName': value.userVariableUnitAbbreviatedName,
        'userVariableUnitCategoryId': value.userVariableUnitCategoryId,
        'userVariableUnitCategoryName': value.userVariableUnitCategoryName,
        'userVariableUnitId': value.userVariableUnitId,
        'userVariableUnitName': value.userVariableUnitName,
        'userVariableVariableCategoryId': value.userVariableVariableCategoryId,
        'userVariableVariableCategoryName': value.userVariableVariableCategoryName,
        'valence': value.valence,
        'variableCategoryId': value.variableCategoryId,
        'variableCategoryImageUrl': value.variableCategoryImageUrl,
        'variableCategoryName': value.variableCategoryName,
        'variableId': value.variableId,
        'variableImageUrl': value.variableImageUrl,
        'variableName': value.variableName,
    };
}

/**
* @export
* @enum {string}
*/
export enum TrackingReminderNotificationCombinationOperationEnum {
    MEAN = 'MEAN',
    SUM = 'SUM'
}
/**
* @export
* @enum {string}
*/
export enum TrackingReminderNotificationVariableCategoryNameEnum {
    Activity = 'Activity',
    Books = 'Books',
    CausesOfIllness = 'Causes of Illness',
    CognitivePerformance = 'Cognitive Performance',
    Conditions = 'Conditions',
    Emotions = 'Emotions',
    Environment = 'Environment',
    Foods = 'Foods',
    Goals = 'Goals',
    Locations = 'Locations',
    Miscellaneous = 'Miscellaneous',
    MoviesAndTV = 'Movies and TV',
    Music = 'Music',
    Nutrients = 'Nutrients',
    Payments = 'Payments',
    PhysicalActivities = 'Physical Activities',
    Physique = 'Physique',
    Sleep = 'Sleep',
    SocialInteractions = 'Social Interactions',
    Software = 'Software',
    Symptoms = 'Symptoms',
    Treatments = 'Treatments',
    VitalSigns = 'Vital Signs'
}


