/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GroupsMember
 */
export interface GroupsMember {
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    id: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    groupId: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    userId: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    inviterId: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    isAdmin: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    isMod: number;
    /**
     * What do you expect?
     * @type {string}
     * @memberof GroupsMember
     */
    userTitle: string;
    /**
     * What do you expect?
     * @type {string}
     * @memberof GroupsMember
     */
    dateModified: string;
    /**
     * What do you expect?
     * @type {string}
     * @memberof GroupsMember
     */
    comments: string;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    isConfirmed: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    isBanned: number;
    /**
     * What do you expect?
     * @type {number}
     * @memberof GroupsMember
     */
    inviteSent: number;
    /**
     * Additional groupsmember key-value data
     * @type {Array<object>}
     * @memberof GroupsMember
     */
    metaDataArray?: Array<object>;
}

export function GroupsMemberFromJSON(json: any): GroupsMember {
    return GroupsMemberFromJSONTyped(json, false);
}

export function GroupsMemberFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupsMember {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'groupId': json['groupId'],
        'userId': json['userId'],
        'inviterId': json['inviterId'],
        'isAdmin': json['isAdmin'],
        'isMod': json['isMod'],
        'userTitle': json['userTitle'],
        'dateModified': json['dateModified'],
        'comments': json['comments'],
        'isConfirmed': json['isConfirmed'],
        'isBanned': json['isBanned'],
        'inviteSent': json['inviteSent'],
        'metaDataArray': !exists(json, 'metaDataArray') ? undefined : json['metaDataArray'],
    };
}

export function GroupsMemberToJSON(value?: GroupsMember | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'groupId': value.groupId,
        'userId': value.userId,
        'inviterId': value.inviterId,
        'isAdmin': value.isAdmin,
        'isMod': value.isMod,
        'userTitle': value.userTitle,
        'dateModified': value.dateModified,
        'comments': value.comments,
        'isConfirmed': value.isConfirmed,
        'isBanned': value.isBanned,
        'inviteSent': value.inviteSent,
        'metaDataArray': value.metaDataArray,
    };
}


