/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Button,
    ButtonFromJSON,
    ButtonFromJSONTyped,
    ButtonToJSON,
    Card,
    CardFromJSON,
    CardFromJSONTyped,
    CardToJSON,
    ConnectInstructions,
    ConnectInstructionsFromJSON,
    ConnectInstructionsFromJSONTyped,
    ConnectInstructionsToJSON,
} from './';

/**
 * 
 * @export
 * @interface DataSource
 */
export interface DataSource {
    /**
     * Ex: true
     * @type {boolean}
     * @memberof DataSource
     */
    affiliate: boolean;
    /**
     * Background color HEX code that matches the icon
     * @type {string}
     * @memberof DataSource
     */
    backgroundColor?: string;
    /**
     * 
     * @type {Array<Button>}
     * @memberof DataSource
     */
    buttons?: Array<Button>;
    /**
     * 
     * @type {Card}
     * @memberof DataSource
     */
    card?: Card;
    /**
     * Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @type {string}
     * @memberof DataSource
     */
    clientId?: string;
    /**
     * True if the authenticated user has this connector enabled
     * @type {boolean}
     * @memberof DataSource
     */
    connected?: boolean;
    /**
     * Ex: Your token is expired. Please re-connect
     * @type {string}
     * @memberof DataSource
     */
    connectError?: string;
    /**
     * 
     * @type {ConnectInstructions}
     * @memberof DataSource
     */
    connectInstructions?: ConnectInstructions;
    /**
     * Ex: 8
     * @type {number}
     * @memberof DataSource
     */
    connectorId?: number;
    /**
     * Ex: CONNECTED
     * @type {string}
     * @memberof DataSource
     */
    connectStatus?: string;
    /**
     * Number of measurements from this source or number of users who have measurements from this source
     * @type {number}
     * @memberof DataSource
     */
    count?: number;
    /**
     * Ex: 2000-01-01 00:00:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof DataSource
     */
    createdAt?: string;
    /**
     * Ex: ba7d0c12432650e23b3ce924ae2d21e2ff59e7e4e28650759633700af7ed0a30
     * @type {string}
     * @memberof DataSource
     */
    connectorClientId: string;
    /**
     * Ex: Foods
     * @type {string}
     * @memberof DataSource
     */
    defaultVariableCategoryName: string;
    /**
     * Ex: QuantiModo
     * @type {string}
     * @memberof DataSource
     */
    displayName: string;
    /**
     * Ex: 0
     * @type {number}
     * @memberof DataSource
     */
    enabled: number;
    /**
     * Ex: https://quantimo.do
     * @type {string}
     * @memberof DataSource
     */
    getItUrl: string;
    /**
     * Ex: 72
     * @type {number}
     * @memberof DataSource
     */
    id: number;
    /**
     * Ex: https://web.quantimo.do/img/logos/quantimodo-logo-qm-rainbow-200-200.png
     * @type {string}
     * @memberof DataSource
     */
    image: string;
    /**
     * Ex: <a href="https://quantimo.do"><img id="quantimodo_image" title="QuantiModo" src="https://web.quantimo.do/img/logos/quantimodo-logo-qm-rainbow-200-200.png" alt="QuantiModo"></a>
     * @type {string}
     * @memberof DataSource
     */
    imageHtml: string;
    /**
     * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof DataSource
     */
    lastSuccessfulUpdatedAt?: string;
    /**
     * Epoch timestamp of last sync
     * @type {number}
     * @memberof DataSource
     */
    lastUpdate?: number;
    /**
     * Ex: <a href="https://quantimo.do">QuantiModo</a>
     * @type {string}
     * @memberof DataSource
     */
    linkedDisplayNameHtml: string;
    /**
     * Ex: QuantiModo is a Chrome extension, Android app, iOS app, and web app that allows you to easily track mood, symptoms, or any outcome you want to optimize in a fraction of a second.  You can also import your data from over 30 other apps and devices like Fitbit, Rescuetime, Jawbone Up, Withings, Facebook, Github, Google Calendar, Runkeeper, MoodPanda, Slice, Google Fit, and more.  QuantiModo then analyzes your data to identify which hidden factors are most likely to be influencing your mood or symptoms and their optimal daily values.
     * @type {string}
     * @memberof DataSource
     */
    longDescription: string;
    /**
     * Ex: Got 412 new measurements on 2017-07-31 10:10:34
     * @type {string}
     * @memberof DataSource
     */
    message?: string;
    /**
     * Mobile connect method: webview, cordova, google, spreadsheet, or ip
     * @type {string}
     * @memberof DataSource
     */
    mobileConnectMethod?: string;
    /**
     * Ex: quantimodo
     * @type {string}
     * @memberof DataSource
     */
    name: string;
    /**
     * Platforms (chrome, android, ios, web) that you can connect on.
     * @type {Array<string>}
     * @memberof DataSource
     */
    platforms?: Array<string>;
    /**
     * True if connection requires upgrade
     * @type {boolean}
     * @memberof DataSource
     */
    premium?: boolean;
    /**
     * Required connector scopes
     * @type {Array<string>}
     * @memberof DataSource
     */
    scopes?: Array<string>;
    /**
     * Ex: Tracks anything
     * @type {string}
     * @memberof DataSource
     */
    shortDescription: string;
    /**
     * URL to POST a spreadsheet to (if available for this data source)
     * @type {string}
     * @memberof DataSource
     */
    spreadsheetUploadLink?: string;
    /**
     * Number of measurements obtained during latest update
     * @type {number}
     * @memberof DataSource
     */
    totalMeasurementsInLastUpdate?: number;
    /**
     * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof DataSource
     */
    updatedAt?: string;
    /**
     * Ex: 2017-07-18 05:16:31 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof DataSource
     */
    updateRequestedAt?: string;
    /**
     * Ex: UPDATED
     * @type {string}
     * @memberof DataSource
     */
    updateStatus?: string;
    /**
     * Ex: 230
     * @type {number}
     * @memberof DataSource
     */
    userId?: number;
}

export function DataSourceFromJSON(json: any): DataSource {
    return DataSourceFromJSONTyped(json, false);
}

export function DataSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'affiliate': json['affiliate'],
        'backgroundColor': !exists(json, 'backgroundColor') ? undefined : json['backgroundColor'],
        'buttons': !exists(json, 'buttons') ? undefined : ((json['buttons'] as Array<any>).map(ButtonFromJSON)),
        'card': !exists(json, 'card') ? undefined : CardFromJSON(json['card']),
        'clientId': !exists(json, 'clientId') ? undefined : json['clientId'],
        'connected': !exists(json, 'connected') ? undefined : json['connected'],
        'connectError': !exists(json, 'connectError') ? undefined : json['connectError'],
        'connectInstructions': !exists(json, 'connectInstructions') ? undefined : ConnectInstructionsFromJSON(json['connectInstructions']),
        'connectorId': !exists(json, 'connectorId') ? undefined : json['connectorId'],
        'connectStatus': !exists(json, 'connectStatus') ? undefined : json['connectStatus'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'connectorClientId': json['connectorClientId'],
        'defaultVariableCategoryName': json['defaultVariableCategoryName'],
        'displayName': json['displayName'],
        'enabled': json['enabled'],
        'getItUrl': json['getItUrl'],
        'id': json['id'],
        'image': json['image'],
        'imageHtml': json['imageHtml'],
        'lastSuccessfulUpdatedAt': !exists(json, 'lastSuccessfulUpdatedAt') ? undefined : json['lastSuccessfulUpdatedAt'],
        'lastUpdate': !exists(json, 'lastUpdate') ? undefined : json['lastUpdate'],
        'linkedDisplayNameHtml': json['linkedDisplayNameHtml'],
        'longDescription': json['longDescription'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'mobileConnectMethod': !exists(json, 'mobileConnectMethod') ? undefined : json['mobileConnectMethod'],
        'name': json['name'],
        'platforms': !exists(json, 'platforms') ? undefined : json['platforms'],
        'premium': !exists(json, 'premium') ? undefined : json['premium'],
        'scopes': !exists(json, 'scopes') ? undefined : json['scopes'],
        'shortDescription': json['shortDescription'],
        'spreadsheetUploadLink': !exists(json, 'spreadsheetUploadLink') ? undefined : json['spreadsheetUploadLink'],
        'totalMeasurementsInLastUpdate': !exists(json, 'totalMeasurementsInLastUpdate') ? undefined : json['totalMeasurementsInLastUpdate'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'updateRequestedAt': !exists(json, 'updateRequestedAt') ? undefined : json['updateRequestedAt'],
        'updateStatus': !exists(json, 'updateStatus') ? undefined : json['updateStatus'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function DataSourceToJSON(value?: DataSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'affiliate': value.affiliate,
        'backgroundColor': value.backgroundColor,
        'buttons': value.buttons === undefined ? undefined : ((value.buttons as Array<any>).map(ButtonToJSON)),
        'card': CardToJSON(value.card),
        'clientId': value.clientId,
        'connected': value.connected,
        'connectError': value.connectError,
        'connectInstructions': ConnectInstructionsToJSON(value.connectInstructions),
        'connectorId': value.connectorId,
        'connectStatus': value.connectStatus,
        'count': value.count,
        'createdAt': value.createdAt,
        'connectorClientId': value.connectorClientId,
        'defaultVariableCategoryName': value.defaultVariableCategoryName,
        'displayName': value.displayName,
        'enabled': value.enabled,
        'getItUrl': value.getItUrl,
        'id': value.id,
        'image': value.image,
        'imageHtml': value.imageHtml,
        'lastSuccessfulUpdatedAt': value.lastSuccessfulUpdatedAt,
        'lastUpdate': value.lastUpdate,
        'linkedDisplayNameHtml': value.linkedDisplayNameHtml,
        'longDescription': value.longDescription,
        'message': value.message,
        'mobileConnectMethod': value.mobileConnectMethod,
        'name': value.name,
        'platforms': value.platforms,
        'premium': value.premium,
        'scopes': value.scopes,
        'shortDescription': value.shortDescription,
        'spreadsheetUploadLink': value.spreadsheetUploadLink,
        'totalMeasurementsInLastUpdate': value.totalMeasurementsInLastUpdate,
        'updatedAt': value.updatedAt,
        'updateRequestedAt': value.updateRequestedAt,
        'updateStatus': value.updateStatus,
        'userId': value.userId,
    };
}


