/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Button,
    ButtonFromJSON,
    ButtonFromJSONTyped,
    ButtonToJSON,
    InputField,
    InputFieldFromJSON,
    InputFieldFromJSONTyped,
    InputFieldToJSON,
} from './';

/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {Array<Button>}
     * @memberof Card
     */
    actionSheetButtons?: Array<Button>;
    /**
     * Smaller square image
     * @type {string}
     * @memberof Card
     */
    avatar?: string;
    /**
     * Smaller circular image
     * @type {string}
     * @memberof Card
     */
    avatarCircular?: string;
    /**
     * Ex: #f2f2f2
     * @type {string}
     * @memberof Card
     */
    backgroundColor?: string;
    /**
     * 
     * @type {Array<Button>}
     * @memberof Card
     */
    buttons?: Array<Button>;
    /**
     * 
     * @type {Array<Button>}
     * @memberof Card
     */
    buttonsSecondary?: Array<Button>;
    /**
     * Ex: Content
     * @type {string}
     * @memberof Card
     */
    content?: string;
    /**
     * Ex: Title
     * @type {string}
     * @memberof Card
     */
    headerTitle?: string;
    /**
     * HTML for the entire card.
     * @type {string}
     * @memberof Card
     */
    html?: string;
    /**
     * Ex: <div>Content</div>
     * @type {string}
     * @memberof Card
     */
    htmlContent?: string;
    /**
     * HTML element id
     * @type {string}
     * @memberof Card
     */
    id: string;
    /**
     * Larger image of variable dimensions
     * @type {string}
     * @memberof Card
     */
    image?: string;
    /**
     * 
     * @type {Array<InputField>}
     * @memberof Card
     */
    inputFields?: Array<InputField>;
    /**
     * Ex: ion-refresh
     * @type {string}
     * @memberof Card
     */
    ionIcon?: string;
    /**
     * A link to a web page or something. Not much more to say about that.
     * @type {string}
     * @memberof Card
     */
    link?: string;
    /**
     * Key value pairs derived from user input fields, button clicks, or preset defaults
     * @type {object}
     * @memberof Card
     */
    parameters?: object;
    /**
     * 
     * @type {Array<Card>}
     * @memberof Card
     */
    relatedCards?: Array<Card>;
    /**
     * 
     * @type {Button}
     * @memberof Card
     */
    selectedButton?: Button;
    /**
     * Ex: sharingBody
     * @type {string}
     * @memberof Card
     */
    sharingBody?: string;
    /**
     * 
     * @type {Array<Button>}
     * @memberof Card
     */
    sharingButtons?: Array<Button>;
    /**
     * Ex: sharingTitle
     * @type {string}
     * @memberof Card
     */
    sharingTitle?: string;
    /**
     * Ex: subTitle
     * @type {string}
     * @memberof Card
     */
    subHeader?: string;
    /**
     * Ex: subTitle
     * @type {string}
     * @memberof Card
     */
    subTitle?: string;
    /**
     * Ex: Title
     * @type {string}
     * @memberof Card
     */
    title?: string;
}

export function CardFromJSON(json: any): Card {
    return CardFromJSONTyped(json, false);
}

export function CardFromJSONTyped(json: any, ignoreDiscriminator: boolean): Card {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionSheetButtons': !exists(json, 'actionSheetButtons') ? undefined : ((json['actionSheetButtons'] as Array<any>).map(ButtonFromJSON)),
        'avatar': !exists(json, 'avatar') ? undefined : json['avatar'],
        'avatarCircular': !exists(json, 'avatarCircular') ? undefined : json['avatarCircular'],
        'backgroundColor': !exists(json, 'backgroundColor') ? undefined : json['backgroundColor'],
        'buttons': !exists(json, 'buttons') ? undefined : ((json['buttons'] as Array<any>).map(ButtonFromJSON)),
        'buttonsSecondary': !exists(json, 'buttonsSecondary') ? undefined : ((json['buttonsSecondary'] as Array<any>).map(ButtonFromJSON)),
        'content': !exists(json, 'content') ? undefined : json['content'],
        'headerTitle': !exists(json, 'headerTitle') ? undefined : json['headerTitle'],
        'html': !exists(json, 'html') ? undefined : json['html'],
        'htmlContent': !exists(json, 'htmlContent') ? undefined : json['htmlContent'],
        'id': json['id'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'inputFields': !exists(json, 'inputFields') ? undefined : ((json['inputFields'] as Array<any>).map(InputFieldFromJSON)),
        'ionIcon': !exists(json, 'ionIcon') ? undefined : json['ionIcon'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
        'relatedCards': !exists(json, 'relatedCards') ? undefined : ((json['relatedCards'] as Array<any>).map(CardFromJSON)),
        'selectedButton': !exists(json, 'selectedButton') ? undefined : ButtonFromJSON(json['selectedButton']),
        'sharingBody': !exists(json, 'sharingBody') ? undefined : json['sharingBody'],
        'sharingButtons': !exists(json, 'sharingButtons') ? undefined : ((json['sharingButtons'] as Array<any>).map(ButtonFromJSON)),
        'sharingTitle': !exists(json, 'sharingTitle') ? undefined : json['sharingTitle'],
        'subHeader': !exists(json, 'subHeader') ? undefined : json['subHeader'],
        'subTitle': !exists(json, 'subTitle') ? undefined : json['subTitle'],
        'title': !exists(json, 'title') ? undefined : json['title'],
    };
}

export function CardToJSON(value?: Card | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionSheetButtons': value.actionSheetButtons === undefined ? undefined : ((value.actionSheetButtons as Array<any>).map(ButtonToJSON)),
        'avatar': value.avatar,
        'avatarCircular': value.avatarCircular,
        'backgroundColor': value.backgroundColor,
        'buttons': value.buttons === undefined ? undefined : ((value.buttons as Array<any>).map(ButtonToJSON)),
        'buttonsSecondary': value.buttonsSecondary === undefined ? undefined : ((value.buttonsSecondary as Array<any>).map(ButtonToJSON)),
        'content': value.content,
        'headerTitle': value.headerTitle,
        'html': value.html,
        'htmlContent': value.htmlContent,
        'id': value.id,
        'image': value.image,
        'inputFields': value.inputFields === undefined ? undefined : ((value.inputFields as Array<any>).map(InputFieldToJSON)),
        'ionIcon': value.ionIcon,
        'link': value.link,
        'parameters': value.parameters,
        'relatedCards': value.relatedCards === undefined ? undefined : ((value.relatedCards as Array<any>).map(CardToJSON)),
        'selectedButton': ButtonToJSON(value.selectedButton),
        'sharingBody': value.sharingBody,
        'sharingButtons': value.sharingButtons === undefined ? undefined : ((value.sharingButtons as Array<any>).map(ButtonToJSON)),
        'sharingTitle': value.sharingTitle,
        'subHeader': value.subHeader,
        'subTitle': value.subTitle,
        'title': value.title,
    };
}


