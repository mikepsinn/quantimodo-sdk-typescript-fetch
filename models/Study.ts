/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Card,
    CardFromJSON,
    CardFromJSONTyped,
    CardToJSON,
    Correlation,
    CorrelationFromJSON,
    CorrelationFromJSONTyped,
    CorrelationToJSON,
    ParticipantInstruction,
    ParticipantInstructionFromJSON,
    ParticipantInstructionFromJSONTyped,
    ParticipantInstructionToJSON,
    StudyCharts,
    StudyChartsFromJSON,
    StudyChartsFromJSONTyped,
    StudyChartsToJSON,
    StudyHtml,
    StudyHtmlFromJSON,
    StudyHtmlFromJSONTyped,
    StudyHtmlToJSON,
    StudyImages,
    StudyImagesFromJSON,
    StudyImagesFromJSONTyped,
    StudyImagesToJSON,
    StudyLinks,
    StudyLinksFromJSON,
    StudyLinksFromJSONTyped,
    StudyLinksToJSON,
    StudySharing,
    StudySharingFromJSON,
    StudySharingFromJSONTyped,
    StudySharingToJSON,
    StudyText,
    StudyTextFromJSON,
    StudyTextFromJSONTyped,
    StudyTextToJSON,
    StudyVotes,
    StudyVotesFromJSON,
    StudyVotesFromJSONTyped,
    StudyVotesToJSON,
    Variable,
    VariableFromJSON,
    VariableFromJSONTyped,
    VariableToJSON,
} from './';

/**
 * A study analyzes the relationship between a predictor variable like gluten-intake and an outcome of interest such as overall mood.
 * @export
 * @interface Study
 */
export interface Study {
    /**
     * Ex: population, cohort, or individual
     * @type {string}
     * @memberof Study
     */
    type: string;
    /**
     * The user id of the principal investigator or subject if an individual studies
     * @type {number}
     * @memberof Study
     */
    userId?: number;
    /**
     * ID of the cohort study which is necessary to allow participants to join
     * @type {string}
     * @memberof Study
     */
    id?: string;
    /**
     * 
     * @type {Variable}
     * @memberof Study
     */
    causeVariable?: Variable;
    /**
     * Ex: Sleep Quality
     * @type {string}
     * @memberof Study
     */
    causeVariableName?: string;
    /**
     * 
     * @type {StudyCharts}
     * @memberof Study
     */
    studyCharts?: StudyCharts;
    /**
     * 
     * @type {Variable}
     * @memberof Study
     */
    effectVariable?: Variable;
    /**
     * Ex: Overall Mood
     * @type {string}
     * @memberof Study
     */
    effectVariableName?: string;
    /**
     * 
     * @type {ParticipantInstruction}
     * @memberof Study
     */
    participantInstructions?: ParticipantInstruction;
    /**
     * 
     * @type {Correlation}
     * @memberof Study
     */
    statistics?: Correlation;
    /**
     * 
     * @type {Card}
     * @memberof Study
     */
    studyCard?: Card;
    /**
     * 
     * @type {StudyHtml}
     * @memberof Study
     */
    studyHtml?: StudyHtml;
    /**
     * 
     * @type {StudyImages}
     * @memberof Study
     */
    studyImages?: StudyImages;
    /**
     * 
     * @type {StudyLinks}
     * @memberof Study
     */
    studyLinks?: StudyLinks;
    /**
     * 
     * @type {StudySharing}
     * @memberof Study
     */
    studySharing?: StudySharing;
    /**
     * 
     * @type {StudyText}
     * @memberof Study
     */
    studyText?: StudyText;
    /**
     * 
     * @type {StudyVotes}
     * @memberof Study
     */
    studyVotes?: StudyVotes;
    /**
     * True if you are sharing your data with this study
     * @type {boolean}
     * @memberof Study
     */
    joined?: boolean;
}

export function StudyFromJSON(json: any): Study {
    return StudyFromJSONTyped(json, false);
}

export function StudyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Study {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'causeVariable': !exists(json, 'causeVariable') ? undefined : VariableFromJSON(json['causeVariable']),
        'causeVariableName': !exists(json, 'causeVariableName') ? undefined : json['causeVariableName'],
        'studyCharts': !exists(json, 'studyCharts') ? undefined : StudyChartsFromJSON(json['studyCharts']),
        'effectVariable': !exists(json, 'effectVariable') ? undefined : VariableFromJSON(json['effectVariable']),
        'effectVariableName': !exists(json, 'effectVariableName') ? undefined : json['effectVariableName'],
        'participantInstructions': !exists(json, 'participantInstructions') ? undefined : ParticipantInstructionFromJSON(json['participantInstructions']),
        'statistics': !exists(json, 'statistics') ? undefined : CorrelationFromJSON(json['statistics']),
        'studyCard': !exists(json, 'studyCard') ? undefined : CardFromJSON(json['studyCard']),
        'studyHtml': !exists(json, 'studyHtml') ? undefined : StudyHtmlFromJSON(json['studyHtml']),
        'studyImages': !exists(json, 'studyImages') ? undefined : StudyImagesFromJSON(json['studyImages']),
        'studyLinks': !exists(json, 'studyLinks') ? undefined : StudyLinksFromJSON(json['studyLinks']),
        'studySharing': !exists(json, 'studySharing') ? undefined : StudySharingFromJSON(json['studySharing']),
        'studyText': !exists(json, 'studyText') ? undefined : StudyTextFromJSON(json['studyText']),
        'studyVotes': !exists(json, 'studyVotes') ? undefined : StudyVotesFromJSON(json['studyVotes']),
        'joined': !exists(json, 'joined') ? undefined : json['joined'],
    };
}

export function StudyToJSON(value?: Study | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'userId': value.userId,
        'id': value.id,
        'causeVariable': VariableToJSON(value.causeVariable),
        'causeVariableName': value.causeVariableName,
        'studyCharts': StudyChartsToJSON(value.studyCharts),
        'effectVariable': VariableToJSON(value.effectVariable),
        'effectVariableName': value.effectVariableName,
        'participantInstructions': ParticipantInstructionToJSON(value.participantInstructions),
        'statistics': CorrelationToJSON(value.statistics),
        'studyCard': CardToJSON(value.studyCard),
        'studyHtml': StudyHtmlToJSON(value.studyHtml),
        'studyImages': StudyImagesToJSON(value.studyImages),
        'studyLinks': StudyLinksToJSON(value.studyLinks),
        'studySharing': StudySharingToJSON(value.studySharing),
        'studyText': StudyTextToJSON(value.studyText),
        'studyVotes': StudyVotesToJSON(value.studyVotes),
        'joined': value.joined,
    };
}


