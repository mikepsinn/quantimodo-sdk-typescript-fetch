/* tslint:disable */
/* eslint-disable */
/**
 * QuantiModo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface DeleteAggregateCorrelationRequest {
    id: number;
}

export interface DeleteApplicationRequest {
    id: number;
}

export interface DeleteCollaboratorRequest {
    id: number;
}

export interface DeleteCommonTagRequest {
    id: number;
}

export interface DeleteConnectionRequest {
    id: number;
}

export interface DeleteConnectorRequest {
    id: number;
}

export interface DeleteConnectorImportRequest {
    id: number;
}

export interface DeleteConnectorRequestRequest {
    id: number;
}

export interface DeleteCorrelationRequest {
    id: number;
}

export interface DeleteDeviceTokenRequest {
    id: number;
}

export interface DeleteMeasurementRequest {
    id: number;
}

export interface DeleteMeasurementExportRequest {
    id: number;
}

export interface DeleteMeasurementImportRequest {
    id: number;
}

export interface DeleteNotificationRequest {
    id: string;
}

export interface DeleteOAuthAccessTokenRequest {
    id: number;
}

export interface DeleteOAuthClientRequest {
    id: number;
}

export interface DeletePostRequest {
    id: number;
}

export interface DeleteSentEmailRequest {
    id: number;
}

export interface DeleteStudyRequest {
    id: number;
}

export interface DeleteTrackingReminderRequest {
    id: number;
}

export interface DeleteTrackingReminderNotificationRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface DeleteUserTagRequest {
    id: number;
}

export interface DeleteUserVariableRequest {
    id: number;
}

export interface DeleteVariableRequest {
    id: number;
}

export interface DeleteVariableCategoryRequest {
    id: number;
}

export interface DeleteVariableUserSourceRequest {
    id: number;
}

export interface DeleteVoteRequest {
    id: number;
}

export interface GetAggregateCorrelationRequest {
    id: number;
}

export interface GetApplicationRequest {
    id: number;
}

export interface GetCollaboratorRequest {
    id: number;
}

export interface GetCommonTagRequest {
    id: number;
}

export interface GetConnectionRequest {
    id: number;
}

export interface GetConnectorRequest {
    id: number;
}

export interface GetConnectorImportRequest {
    id: number;
}

export interface GetConnectorRequestRequest {
    id: number;
}

export interface GetCorrelationRequest {
    id: number;
}

export interface GetDeviceTokenRequest {
    id: number;
}

export interface GetMeasurementRequest {
    id: number;
}

export interface GetMeasurementExportRequest {
    id: number;
}

export interface GetMeasurementImportRequest {
    id: number;
}

export interface GetNotificationRequest {
    id: string;
}

export interface GetOAuthAccessTokenRequest {
    id: number;
}

export interface GetOAuthClientRequest {
    id: number;
}

export interface GetPostRequest {
    id: number;
}

export interface GetSentEmailRequest {
    id: number;
}

export interface GetStudyRequest {
    id: number;
}

export interface GetTrackingReminderRequest {
    id: number;
}

export interface GetTrackingReminderNotificationRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUserTagRequest {
    id: number;
}

export interface GetUserVariableRequest {
    id: number;
}

export interface GetVariableRequest {
    id: number;
}

export interface GetVariableCategoryRequest {
    id: number;
}

export interface GetVariableUserSourceRequest {
    id: number;
}

export interface GetVoteRequest {
    id: number;
}

export interface ListAggregateCorrelationsRequest {
    limit?: number;
    offset?: number;
    aggregateQmScore?: number;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisStartedAt?: Date;
    averageDailyHighCause?: number;
    averageDailyLowCause?: number;
    averageEffect?: number;
    averageEffectFollowingHighCause?: number;
    averageEffectFollowingLowCause?: number;
    averageVote?: number;
    causeBaselineAveragePerDay?: number;
    causeBaselineAveragePerDurationOfAction?: number;
    causeChanges?: number;
    causeTreatmentAveragePerDay?: number;
    causeTreatmentAveragePerDurationOfAction?: number;
    causeUnitId?: number;
    causeVariableCategoryId?: number;
    causeVariableId?: number;
    clientId?: string;
    confidenceInterval?: number;
    createdAt?: Date;
    criticalTValue?: number;
    dataSourceName?: string;
    deletedAt?: Date;
    durationOfAction?: number;
    effectBaselineAverage?: number;
    effectBaselineRelativeStandardDeviation?: number;
    effectBaselineStandardDeviation?: number;
    effectChanges?: number;
    effectFollowUpAverage?: number;
    effectFollowUpPercentChangeFromBaseline?: number;
    effectVariableCategoryId?: number;
    effectVariableId?: number;
    forwardPearsonCorrelationCoefficient?: number;
    groupedCauseValueClosestToValuePredictingHighOutcome?: number;
    groupedCauseValueClosestToValuePredictingLowOutcome?: number;
    id?: number;
    interestingVariableCategoryPair?: boolean;
    internalErrorMessage?: string;
    newestDataAt?: Date;
    numberOfCorrelations?: number;
    numberOfPairs?: number;
    numberOfUsers?: number;
    onsetDelay?: number;
    optimalPearsonProduct?: number;
    pValue?: number;
    populationTraitPearsonCorrelationCoefficient?: number;
    predictivePearsonCorrelationCoefficient?: number;
    predictsHighEffectChange?: number;
    predictsLowEffectChange?: number;
    publishedAt?: Date;
    reasonForAnalysis?: string;
    reversePearsonCorrelationCoefficient?: number;
    statisticalSignificance?: number;
    status?: string;
    tValue?: number;
    updatedAt?: Date;
    userErrorMessage?: string;
    valuePredictingHighOutcome?: number;
    valuePredictingLowOutcome?: number;
    wpPostId?: number;
    zScore?: number;
}

export interface ListApplicationsRequest {
    limit?: number;
    offset?: number;
    additionalSettings?: string;
    address?: string;
    appDescription?: string;
    appDesign?: string;
    appDisplayName?: string;
    appStatus?: string;
    appType?: string;
    billingEnabled?: number;
    buildEnabled?: boolean;
    city?: string;
    clientId?: string;
    companyName?: string;
    country?: string;
    createdAt?: Date;
    deletedAt?: Date;
    enabled?: number;
    exceedingCallCharge?: number;
    exceedingCallCount?: number;
    homepageUrl?: string;
    iconUrl?: string;
    id?: number;
    lastFour?: string;
    longDescription?: string;
    numberOfCollaboratorsWhereApp?: number;
    organizationId?: number;
    outcomeVariableId?: number;
    physician?: number;
    planId?: number;
    predictorVariableId?: number;
    splashScreen?: string;
    state?: string;
    status?: string;
    stripeActive?: number;
    stripeId?: string;
    stripePlan?: string;
    stripeSubscription?: string;
    study?: number;
    subscriptionEndsAt?: Date;
    textLogo?: string;
    trialEndsAt?: Date;
    updatedAt?: Date;
    userId?: number;
    wpPostId?: number;
    zip?: string;
}

export interface ListCollaboratorsRequest {
    limit?: number;
    offset?: number;
    appId?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    type?: string;
    updatedAt?: Date;
    userId?: number;
}

export interface ListCommonTagsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    conversionFactor?: number;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    numberOfDataPoints?: number;
    standardError?: number;
    tagVariableId?: number;
    tagVariableUnitId?: number;
    taggedVariableId?: number;
    taggedVariableUnitId?: number;
    updatedAt?: Date;
}

export interface ListConnectionsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    connectError?: string;
    connectStatus?: string;
    connectorId?: number;
    createdAt?: Date;
    credentials?: string;
    deletedAt?: Date;
    id?: number;
    importEndedAt?: Date;
    importStartedAt?: Date;
    importedDataEndAt?: Date;
    importedDataFromAt?: Date;
    internalErrorMessage?: string;
    lastSuccessfulUpdatedAt?: Date;
    latestMeasurementAt?: Date;
    numberOfConnectorImports?: number;
    numberOfConnectorRequests?: number;
    reasonForImport?: string;
    totalMeasurementsInLastUpdate?: number;
    updateError?: string;
    updateRequestedAt?: Date;
    updateStatus?: string;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
    userMessage?: string;
    wpPostId?: number;
}

export interface ListConnectorImportsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    connectionId?: number;
    connectorId?: number;
    connectorRequests?: Date;
    createdAt?: Date;
    credentials?: string;
    deletedAt?: Date;
    earliestMeasurementAt?: Date;
    id?: number;
    importEndedAt?: Date;
    importStartedAt?: Date;
    importedDataEndAt?: Date;
    importedDataFromAt?: Date;
    internalErrorMessage?: string;
    latestMeasurementAt?: Date;
    numberOfConnectorRequests?: number;
    numberOfMeasurements?: number;
    reasonForImport?: string;
    success?: boolean;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
}

export interface ListConnectorRequestsRequest {
    limit?: number;
    offset?: number;
    code?: number;
    connectionId?: number;
    connectorId?: number;
    connectorImportId?: number;
    contentType?: string;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    importedDataFromAt?: Date;
    method?: string;
    requestBody?: string;
    responseBody?: string;
    updatedAt?: Date;
    uri?: string;
    userId?: number;
}

export interface ListConnectorsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    displayName?: string;
    enabled?: boolean;
    getItUrl?: string;
    id?: number;
    image?: string;
    isParent?: string;
    longDescription?: string;
    name?: string;
    numberOfConnections?: string;
    numberOfConnectorImports?: string;
    numberOfConnectorRequests?: string;
    oauth?: boolean;
    qmClient?: string;
    shortDescription?: string;
    updatedAt?: Date;
    wpPostId?: string;
}

export interface ListCorrelationsRequest {
    limit?: number;
    offset?: number;
    aggregateCorrelationId?: number;
    aggregatedAt?: Date;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisStartedAt?: Date;
    averageDailyHighCause?: number;
    averageDailyLowCause?: number;
    averageEffect?: number;
    averageEffectFollowingHighCause?: number;
    averageEffectFollowingLowCause?: number;
    averageForwardPearsonCorrelationOverOnsetDelays?: number;
    averageReversePearsonCorrelationOverOnsetDelays?: number;
    causalityVote?: number;
    causeBaselineAveragePerDay?: number;
    causeBaselineAveragePerDurationOfAction?: number;
    causeChanges?: number;
    causeFillingValue?: number;
    causeNumberOfProcessedDailyMeasurements?: number;
    causeNumberOfRawMeasurements?: number;
    causeTreatmentAveragePerDay?: number;
    causeTreatmentAveragePerDurationOfAction?: number;
    causeUnitId?: number;
    causeUserVariableId?: number;
    causeVariableCategoryId?: number;
    causeVariableId?: number;
    clientId?: string;
    confidenceInterval?: number;
    createdAt?: Date;
    criticalTValue?: number;
    dataSourceName?: string;
    deletedAt?: Date;
    durationOfAction?: number;
    earliestMeasurementStartAt?: Date;
    effectBaselineAverage?: number;
    effectBaselineRelativeStandardDeviation?: number;
    effectBaselineStandardDeviation?: number;
    effectChanges?: number;
    effectFillingValue?: number;
    effectFollowUpAverage?: number;
    effectFollowUpPercentChangeFromBaseline?: number;
    effectNumberOfProcessedDailyMeasurements?: number;
    effectNumberOfRawMeasurements?: number;
    effectUserVariableId?: number;
    effectVariableCategoryId?: number;
    effectVariableId?: number;
    experimentEndAt?: Date;
    experimentEndTime?: Date;
    experimentStartAt?: Date;
    experimentStartTime?: Date;
    forwardPearsonCorrelationCoefficient?: number;
    forwardSpearmanCorrelationCoefficient?: number;
    groupedCauseValueClosestToValuePredictingHighOutcome?: number;
    groupedCauseValueClosestToValuePredictingLowOutcome?: number;
    id?: number;
    interestingVariableCategoryPair?: boolean;
    internalErrorMessage?: string;
    latestMeasurementStartAt?: Date;
    newestDataAt?: Date;
    numberOfDays?: number;
    numberOfPairs?: number;
    onsetDelay?: number;
    onsetDelayWithStrongestPearsonCorrelation?: number;
    optimalPearsonProduct?: number;
    pValue?: number;
    pearsonCorrelationWithNoOnsetDelay?: number;
    predictivePearsonCorrelationCoefficient?: number;
    predictsHighEffectChange?: number;
    predictsLowEffectChange?: number;
    publishedAt?: Date;
    qmScore?: number;
    reasonForAnalysis?: string;
    reversePearsonCorrelationCoefficient?: number;
    statisticalSignificance?: number;
    status?: string;
    strongestPearsonCorrelationCoefficient?: number;
    tValue?: number;
    updatedAt?: Date;
    usefulnessVote?: number;
    userErrorMessage?: string;
    userId?: number;
    valuePredictingHighOutcome?: number;
    valuePredictingLowOutcome?: number;
    wpPostId?: number;
    zScore?: number;
}

export interface ListDeviceTokensRequest {
    limit?: number;
    offset?: number;
    bshafferOauthClientsId?: string;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    deviceToken?: string;
    errorMessage?: string;
    lastCheckedAt?: Date;
    lastNotifiedAt?: Date;
    numberOfNewTrackingReminderNotifications?: number;
    numberOfNotificationsLastSent?: number;
    numberOfWaitingTrackingReminderNotifications?: number;
    platform?: string;
    receivedAt?: Date;
    serverHostname?: string;
    serverIp?: string;
    updatedAt?: Date;
    userId?: number;
}

export interface ListMeasurementExportsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    errorMessage?: string;
    id?: number;
    outputType?: string;
    status?: string;
    type?: string;
    updatedAt?: Date;
    userId?: number;
}

export interface ListMeasurementImportsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    errorMessage?: string;
    file?: string;
    id?: number;
    sourceId?: number;
    sourceName?: string;
    status?: string;
    updatedAt?: Date;
    userId?: number;
}

export interface ListMeasurementsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    connectionId?: string;
    connectorId?: number;
    connectorImportId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    duration?: number;
    error?: string;
    id?: number;
    latitude?: number;
    location?: string;
    longitude?: number;
    originalUnitId?: number;
    originalValue?: number;
    sourceId?: number;
    sourceName?: string;
    startAt?: Date;
    startTime?: number;
    unitId?: number;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    value?: number;
    variableCategoryId?: number;
    variableId?: number;
}

export interface ListNotificationsRequest {
    limit?: number;
    offset?: number;
    createdAt?: Date;
    data?: string;
    deletedAt?: string;
    id?: string;
    notifiableId?: number;
    notifiableType?: string;
    readAt?: Date;
    type?: string;
    updatedAt?: Date;
}

export interface ListOAuthAccessTokensRequest {
    limit?: number;
    offset?: number;
    accessToken?: string;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    expires?: Date;
    scope?: string;
    updatedAt?: Date;
    userId?: number;
}

export interface ListOAuthClientsRequest {
    limit?: number;
    offset?: number;
    appIdentifier?: string;
    clientId?: string;
    clientSecret?: string;
    createdAt?: Date;
    deletedAt?: Date;
    earliestMeasurementStartAt?: Date;
    grantTypes?: string;
    iconUrl?: string;
    latestMeasurementStartAt?: Date;
    numberOfAggregateCorrelations?: number;
    numberOfApplications?: number;
    numberOfButtonClicks?: number;
    numberOfCollaborators?: number;
    numberOfCommonTags?: number;
    numberOfConnections?: number;
    numberOfConnectorImports?: number;
    numberOfConnectors?: number;
    numberOfCorrelations?: number;
    numberOfOauthAccessTokens?: number;
    numberOfOauthAuthorizationCodes?: number;
    numberOfOauthRefreshTokens?: number;
    redirectUri?: string;
    updatedAt?: Date;
    userId?: number;
}

export interface ListPostsRequest {
    limit?: number;
    offset?: number;
    iD?: number;
    clientId?: string;
    commentCount?: number;
    commentStatus?: string;
    createdAt?: Date;
    deletedAt?: Date;
    guid?: string;
    menuOrder?: number;
    pingStatus?: string;
    pinged?: string;
    postAuthor?: number;
    postContent?: string;
    postContentFiltered?: string;
    postDate?: Date;
    postDateGmt?: Date;
    postExcerpt?: string;
    postMimeType?: string;
    postModified?: Date;
    postModifiedGmt?: Date;
    postName?: string;
    postParent?: number;
    postPassword?: string;
    postStatus?: string;
    postTitle?: string;
    postType?: string;
    toPing?: string;
    updatedAt?: Date;
}

export interface ListSentEmailsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    content?: string;
    createdAt?: Date;
    deletedAt?: Date;
    emailAddress?: string;
    id?: number;
    response?: string;
    slug?: string;
    subject?: string;
    type?: string;
    updatedAt?: Date;
    userId?: number;
    wpPostId?: number;
}

export interface ListStudiesRequest {
    limit?: number;
    offset?: number;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    causeVariableId?: number;
    clientId?: string;
    commentStatus?: string;
    createdAt?: Date;
    deletedAt?: Date;
    effectVariableId?: number;
    id?: number;
    internalErrorMessage?: string;
    newestDataAt?: Date;
    publishedAt?: Date;
    reasonForAnalysis?: string;
    statistics?: string;
    status?: string;
    studyPassword?: string;
    studyStatus?: string;
    type?: string;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
    userStudyText?: string;
    userTitle?: string;
    wpPostId?: number;
}

export interface ListTrackingReminderNotificationsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    notifiedAt?: Date;
    notifyAt?: Date;
    receivedAt?: Date;
    trackingReminderId?: number;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    variableId?: number;
}

export interface ListTrackingRemindersRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    defaultValue?: number;
    deletedAt?: Date;
    email?: boolean;
    id?: number;
    imageUrl?: string;
    instructions?: string;
    lastTracked?: Date;
    latestTrackingReminderNotificationNotifyAt?: Date;
    notificationBar?: boolean;
    popUp?: boolean;
    reminderEndTime?: string;
    reminderFrequency?: number;
    reminderSound?: string;
    reminderStartTime?: string;
    sms?: boolean;
    startTrackingDate?: string;
    stopTrackingDate?: string;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    variableId?: number;
}

export interface ListUserTagsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    conversionFactor?: number;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    tagVariableId?: number;
    taggedVariableId?: number;
    updatedAt?: Date;
    userId?: number;
}

export interface ListUserVariablesRequest {
    limit?: number;
    offset?: number;
    alias?: string;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    averageSecondsBetweenMeasurements?: number;
    bestCauseVariableId?: number;
    bestEffectVariableId?: number;
    bestUserCorrelationId?: number;
    causeOnly?: boolean;
    clientId?: string;
    combinationOperation?: string;
    createdAt?: Date;
    defaultUnitId?: number;
    deletedAt?: Date;
    description?: string;
    durationOfAction?: number;
    earliestFillingTime?: number;
    earliestMeasurementTime?: string;
    earliestNonTaggedMeasurementStartAt?: Date;
    earliestNonTaggedMeasurementTime?: number;
    earliestSourceMeasurementStartAt?: Date;
    earliestSourceTime?: number;
    earliestTaggedMeasurementStartAt?: Date;
    earliestTaggedMeasurementTime?: number;
    experimentEndTime?: Date;
    experimentStartTime?: Date;
    fillingType?: string;
    fillingValue?: number;
    id?: number;
    informationalUrl?: string;
    internalErrorMessage?: string;
    joinWith?: number;
    kurtosis?: number;
    lastCorrelatedAt?: Date;
    lastOriginalUnitId?: number;
    lastOriginalValue?: number;
    lastProcessedDailyValue?: number;
    lastSourceId?: number;
    lastSuccessfulUpdateTime?: Date;
    lastUnitId?: number;
    lastValue?: number;
    latestFillingTime?: number;
    latestMeasurementTime?: string;
    latestNonTaggedMeasurementStartAt?: Date;
    latestNonTaggedMeasurementTime?: number;
    latestSourceMeasurementStartAt?: Date;
    latestSourceTime?: number;
    latestTaggedMeasurementStartAt?: Date;
    latestTaggedMeasurementTime?: number;
    latitude?: number;
    location?: string;
    longitude?: number;
    maximumAllowedValue?: number;
    maximumRecordedValue?: number;
    mean?: number;
    measurementsAtLastAnalysis?: number;
    median?: number;
    medianSecondsBetweenMeasurements?: number;
    minimumAllowedSecondsBetweenMeasurements?: number;
    minimumAllowedValue?: number;
    minimumRecordedValue?: number;
    mostCommonConnectorId?: number;
    mostCommonOriginalUnitId?: number;
    mostCommonSourceName?: string;
    mostCommonValue?: number;
    newestDataAt?: Date;
    numberOfChanges?: number;
    numberOfCorrelations?: number;
    numberOfMeasurementsWithTagsAtLastCorrelation?: number;
    numberOfProcessedDailyMeasurements?: number;
    numberOfRawMeasurements?: number;
    numberOfRawMeasurementsWithTagsJoinsChildren?: number;
    numberOfSoftDeletedMeasurements?: string;
    numberOfTrackingReminders?: number;
    numberOfUniqueDailyValues?: number;
    numberOfUniqueValues?: number;
    numberOfUserCorrelationsAsCause?: number;
    numberOfUserCorrelationsAsEffect?: number;
    onsetDelay?: number;
    optimalValueMessage?: string;
    outcome?: boolean;
    outcomeOfInterest?: boolean;
    parentId?: number;
    predictorOfInterest?: boolean;
    _public?: number;
    reasonForAnalysis?: string;
    secondToLastValue?: number;
    shareUserMeasurements?: boolean;
    skewness?: number;
    standardDeviation?: number;
    status?: string;
    thirdToLastValue?: number;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
    userMaximumAllowedDailyValue?: number;
    userMinimumAllowedDailyValue?: number;
    userMinimumAllowedNonZeroValue?: number;
    valence?: string;
    variableCategoryId?: number;
    variableId?: number;
    variance?: number;
    wikipediaTitle?: string;
    wpPostId?: string;
}

export interface ListUsersRequest {
    limit?: number;
    offset?: number;
    iD?: number;
    address?: string;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    avatarImage?: string;
    birthday?: string;
    cardBrand?: string;
    cardLastFour?: string;
    clientId?: string;
    combineNotifications?: boolean;
    country?: string;
    coverPhoto?: string;
    createdAt?: Date;
    currency?: string;
    deleted?: number;
    deletedAt?: Date;
    displayName?: string;
    earliestReminderTime?: string;
    firstName?: string;
    gender?: string;
    getPreviewBuilds?: boolean;
    hasAndroidApp?: boolean;
    hasChromeExtension?: boolean;
    hasIosApp?: boolean;
    internalErrorMessage?: string;
    language?: string;
    lastCorrelationAt?: Date;
    lastEmailAt?: Date;
    lastFour?: string;
    lastLoginAt?: Date;
    lastName?: string;
    lastPushAt?: Date;
    lastSmsTrackingReminderNotificationId?: number;
    latestReminderTime?: string;
    newestDataAt?: Date;
    numberOfApplications?: number;
    numberOfButtonClicks?: number;
    numberOfCollaborators?: number;
    numberOfConnections?: number;
    numberOfConnectorImports?: number;
    numberOfConnectorRequests?: number;
    numberOfCorrelations?: number;
    numberOfOauthAccessTokens?: number;
    numberOfOauthAuthorizationCodes?: number;
    numberOfOauthClients?: number;
    numberOfOauthRefreshTokens?: number;
    numberOfRawMeasurementsWithTags?: number;
    numberOfRawMeasurementsWithTagsAtLastCorrelation?: number;
    numberOfStudies?: number;
    numberOfTrackingReminders?: number;
    numberOfUserVariables?: number;
    numberOfVotes?: number;
    oldUser?: boolean;
    phoneNumber?: string;
    phoneVerificationCode?: string;
    primaryOutcomeVariableId?: number;
    providerId?: string;
    providerToken?: string;
    pushNotificationsEnabled?: boolean;
    reasonForAnalysis?: string;
    referrerUserId?: number;
    refreshToken?: string;
    regProvider?: string;
    rememberToken?: string;
    sendPredictorEmails?: boolean;
    sendReminderNotificationEmails?: boolean;
    smsNotificationsEnabled?: boolean;
    spam?: number;
    state?: string;
    status?: string;
    stripeActive?: boolean;
    stripeId?: string;
    stripePlan?: string;
    stripeSubscription?: string;
    subscriptionEndsAt?: Date;
    subscriptionProvider?: string;
    tagLine?: string;
    timeZoneOffset?: number;
    timezone?: string;
    trackLocation?: boolean;
    trialEndsAt?: Date;
    unsubscribed?: boolean;
    updatedAt?: Date;
    userActivationKey?: string;
    userEmail?: string;
    userErrorMessage?: string;
    userLogin?: string;
    userNicename?: string;
    userPass?: string;
    userRegistered?: Date;
    userStatus?: number;
    userUrl?: string;
    verified?: string;
    wpPostId?: number;
    zipCode?: string;
}

export interface ListVariableCategoriesRequest {
    limit?: number;
    offset?: number;
    averageSecondsBetweenMeasurements?: string;
    causeOnly?: boolean;
    combinationOperation?: string;
    createdAt?: Date;
    defaultUnitId?: number;
    deletedAt?: Date;
    durationOfAction?: number;
    fillingType?: string;
    fillingValue?: number;
    id?: number;
    imageUrl?: string;
    manualTracking?: string;
    maximumAllowedValue?: number;
    medianSecondsBetweenMeasurements?: string;
    minimumAllowedSecondsBetweenMeasurements?: string;
    minimumAllowedValue?: number;
    name?: string;
    numberOfOutcomeCaseStudies?: string;
    numberOfOutcomePopulationStudies?: string;
    numberOfPredictorCaseStudies?: string;
    numberOfPredictorPopulationStudies?: string;
    onsetDelay?: number;
    outcome?: boolean;
    _public?: number;
    updated?: number;
    updatedAt?: Date;
    wpPostId?: string;
}

export interface ListVariableUserSourcesRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    dataSourceName?: string;
    deletedAt?: Date;
    earliestMeasurementStartAt?: Date;
    earliestMeasurementTime?: number;
    id?: number;
    latestMeasurementStartAt?: Date;
    latestMeasurementTime?: number;
    numberOfRawMeasurements?: number;
    sourceId?: number;
    timestamp?: number;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    variableId?: number;
}

export interface ListVariablesRequest {
    limit?: number;
    offset?: number;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    averageSecondsBetweenMeasurements?: number;
    bestAggregateCorrelationId?: number;
    bestCauseVariableId?: number;
    bestEffectVariableId?: number;
    brandName?: string;
    causeOnly?: boolean;
    clientId?: string;
    combinationOperation?: string;
    commonAlias?: string;
    commonMaximumAllowedDailyValue?: number;
    commonMinimumAllowedDailyValue?: number;
    commonMinimumAllowedNonZeroValue?: number;
    createdAt?: Date;
    creatorUserId?: number;
    defaultUnitId?: number;
    defaultValue?: number;
    deletedAt?: Date;
    description?: string;
    durationOfAction?: number;
    earliestMeasurementTime?: string;
    earliestNonTaggedMeasurementStartAt?: Date;
    earliestNonTaggedMeasurementTime?: number;
    earliestTaggedMeasurementStartAt?: Date;
    earliestTaggedMeasurementTime?: number;
    fillingType?: string;
    fillingValue?: number;
    id?: number;
    imageUrl?: string;
    informationalUrl?: string;
    internalErrorMessage?: string;
    ionIcon?: string;
    kurtosis?: number;
    lastSuccessfulUpdateTime?: Date;
    latestMeasurementTime?: string;
    latestNonTaggedMeasurementStartAt?: Date;
    latestNonTaggedMeasurementTime?: number;
    latestTaggedMeasurementStartAt?: Date;
    latestTaggedMeasurementTime?: number;
    manualTracking?: boolean;
    maximumAllowedValue?: number;
    maximumRecordedValue?: number;
    mean?: number;
    median?: number;
    medianSecondsBetweenMeasurements?: number;
    minimumAllowedSecondsBetweenMeasurements?: number;
    minimumAllowedValue?: number;
    minimumRecordedValue?: number;
    mostCommonConnectorId?: number;
    mostCommonOriginalUnitId?: number;
    mostCommonSourceName?: string;
    mostCommonValue?: number;
    name?: string;
    newestDataAt?: Date;
    numberCommonTaggedBy?: number;
    numberOfAggregateCorrelationsAsCause?: number;
    numberOfAggregateCorrelationsAsEffect?: number;
    numberOfApplicationsWhereOutcomeVariable?: string;
    numberOfApplicationsWherePredictorVariable?: string;
    numberOfCommonTags?: number;
    numberOfCommonTagsWhereTagVariable?: string;
    numberOfCommonTagsWhereTaggedVariable?: string;
    numberOfOutcomeCaseStudies?: string;
    numberOfOutcomePopulationStudies?: string;
    numberOfPredictorPopulationStudies?: string;
    numberOfRawMeasurements?: number;
    numberOfRawMeasurementsWithTagsJoinsChildren?: number;
    numberOfSoftDeletedMeasurements?: string;
    numberOfTrackingReminders?: number;
    numberOfUniqueValues?: number;
    numberOfUserVariables?: number;
    onsetDelay?: number;
    optimalValueMessage?: string;
    outcome?: boolean;
    parentId?: number;
    price?: number;
    productUrl?: string;
    _public?: number;
    reasonForAnalysis?: string;
    secondMostCommonValue?: number;
    skewness?: number;
    standardDeviation?: number;
    status?: string;
    thirdMostCommonValue?: number;
    upc12?: string;
    upc14?: string;
    updatedAt?: Date;
    userErrorMessage?: string;
    valence?: string;
    variableCategoryId?: number;
    variance?: number;
    wikipediaTitle?: string;
    wikipediaUrl?: string;
    wpPostId?: string;
}

export interface ListVotesRequest {
    limit?: number;
    offset?: number;
    causeVariableId?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    effectVariableId?: number;
    id?: number;
    updatedAt?: Date;
    userId?: number;
    value?: number;
}

export interface UpdateAggregateCorrelationRequest {
    id: number;
}

export interface UpdateApplicationRequest {
    id: number;
}

export interface UpdateCollaboratorRequest {
    id: number;
}

export interface UpdateCommonTagRequest {
    id: number;
}

export interface UpdateConnectionRequest {
    id: number;
}

export interface UpdateConnectorRequest {
    id: number;
}

export interface UpdateConnectorImportRequest {
    id: number;
}

export interface UpdateConnectorRequestRequest {
    id: number;
}

export interface UpdateCorrelationRequest {
    id: number;
}

export interface UpdateDeviceTokenRequest {
    id: number;
}

export interface UpdateMeasurementRequest {
    id: number;
}

export interface UpdateMeasurementExportRequest {
    id: number;
}

export interface UpdateMeasurementImportRequest {
    id: number;
}

export interface UpdateNotificationRequest {
    id: string;
}

export interface UpdateOAuthAccessTokenRequest {
    id: number;
}

export interface UpdateOAuthClientRequest {
    id: number;
}

export interface UpdatePostRequest {
    id: number;
}

export interface UpdateSentEmailRequest {
    id: number;
}

export interface UpdateStudyRequest {
    id: number;
}

export interface UpdateTrackingReminderRequest {
    id: number;
}

export interface UpdateTrackingReminderNotificationRequest {
    id: number;
}

export interface UpdateUserRequest {
    id: number;
}

export interface UpdateUserTagRequest {
    id: number;
}

export interface UpdateUserVariableRequest {
    id: number;
}

export interface UpdateVariableRequest {
    id: number;
}

export interface UpdateVariableCategoryRequest {
    id: number;
}

export interface UpdateVariableUserSourceRequest {
    id: number;
}

export interface UpdateVoteRequest {
    id: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Delete a Aggregate Correlation
     */
    async deleteAggregateCorrelationRaw(requestParameters: DeleteAggregateCorrelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAggregateCorrelation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aggregate_correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Delete a Aggregate Correlation
     */
    async deleteAggregateCorrelation(requestParameters: DeleteAggregateCorrelationRequest): Promise<void> {
        await this.deleteAggregateCorrelationRaw(requestParameters);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Delete a Application
     */
    async deleteApplicationRaw(requestParameters: DeleteApplicationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Delete a Application
     */
    async deleteApplication(requestParameters: DeleteApplicationRequest): Promise<void> {
        await this.deleteApplicationRaw(requestParameters);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Delete a Collaborator
     */
    async deleteCollaboratorRaw(requestParameters: DeleteCollaboratorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCollaborator.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collaborators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Delete a Collaborator
     */
    async deleteCollaborator(requestParameters: DeleteCollaboratorRequest): Promise<void> {
        await this.deleteCollaboratorRaw(requestParameters);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a Common Tag
     */
    async deleteCommonTagRaw(requestParameters: DeleteCommonTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCommonTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a Common Tag
     */
    async deleteCommonTag(requestParameters: DeleteCommonTagRequest): Promise<void> {
        await this.deleteCommonTagRaw(requestParameters);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Delete a Connection
     */
    async deleteConnectionRaw(requestParameters: DeleteConnectionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteConnection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Delete a Connection
     */
    async deleteConnection(requestParameters: DeleteConnectionRequest): Promise<void> {
        await this.deleteConnectionRaw(requestParameters);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Delete a Connector
     */
    async deleteConnectorRaw(requestParameters: DeleteConnectorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteConnector.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Delete a Connector
     */
    async deleteConnector(requestParameters: DeleteConnectorRequest): Promise<void> {
        await this.deleteConnectorRaw(requestParameters);
    }

    /**
     * A record of attempts to import from a given data source. 
     * Delete a Connector Import
     */
    async deleteConnectorImportRaw(requestParameters: DeleteConnectorImportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteConnectorImport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A record of attempts to import from a given data source. 
     * Delete a Connector Import
     */
    async deleteConnectorImport(requestParameters: DeleteConnectorImportRequest): Promise<void> {
        await this.deleteConnectorImportRaw(requestParameters);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Delete a Connector Request
     */
    async deleteConnectorRequestRaw(requestParameters: DeleteConnectorRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteConnectorRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_requests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Delete a Connector Request
     */
    async deleteConnectorRequest(requestParameters: DeleteConnectorRequestRequest): Promise<void> {
        await this.deleteConnectorRequestRaw(requestParameters);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Delete a Correlation
     */
    async deleteCorrelationRaw(requestParameters: DeleteCorrelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCorrelation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Delete a Correlation
     */
    async deleteCorrelation(requestParameters: DeleteCorrelationRequest): Promise<void> {
        await this.deleteCorrelationRaw(requestParameters);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Delete a Device Token
     */
    async deleteDeviceTokenRaw(requestParameters: DeleteDeviceTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDeviceToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Delete a Device Token
     */
    async deleteDeviceToken(requestParameters: DeleteDeviceTokenRequest): Promise<void> {
        await this.deleteDeviceTokenRaw(requestParameters);
    }

    /**
     * Measurement
     * Delete a Measurement
     */
    async deleteMeasurementRaw(requestParameters: DeleteMeasurementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMeasurement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Measurement
     * Delete a Measurement
     */
    async deleteMeasurement(requestParameters: DeleteMeasurementRequest): Promise<void> {
        await this.deleteMeasurementRaw(requestParameters);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Delete a Measurement Export
     */
    async deleteMeasurementExportRaw(requestParameters: DeleteMeasurementExportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMeasurementExport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Delete a Measurement Export
     */
    async deleteMeasurementExport(requestParameters: DeleteMeasurementExportRequest): Promise<void> {
        await this.deleteMeasurementExportRaw(requestParameters);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Delete a Measurement Import
     */
    async deleteMeasurementImportRaw(requestParameters: DeleteMeasurementImportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMeasurementImport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Delete a Measurement Import
     */
    async deleteMeasurementImport(requestParameters: DeleteMeasurementImportRequest): Promise<void> {
        await this.deleteMeasurementImportRaw(requestParameters);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Delete a Notification
     */
    async deleteNotificationRaw(requestParameters: DeleteNotificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNotification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Delete a Notification
     */
    async deleteNotification(requestParameters: DeleteNotificationRequest): Promise<void> {
        await this.deleteNotificationRaw(requestParameters);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Delete a OAuth Access Token
     */
    async deleteOAuthAccessTokenRaw(requestParameters: DeleteOAuthAccessTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOAuthAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_access_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Delete a OAuth Access Token
     */
    async deleteOAuthAccessToken(requestParameters: DeleteOAuthAccessTokenRequest): Promise<void> {
        await this.deleteOAuthAccessTokenRaw(requestParameters);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Delete a OAuth Client
     */
    async deleteOAuthClientRaw(requestParameters: DeleteOAuthClientRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOAuthClient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Delete a OAuth Client
     */
    async deleteOAuthClient(requestParameters: DeleteOAuthClientRequest): Promise<void> {
        await this.deleteOAuthClientRaw(requestParameters);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Delete a Post
     */
    async deletePostRaw(requestParameters: DeletePostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp_posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Delete a Post
     */
    async deletePost(requestParameters: DeletePostRequest): Promise<void> {
        await this.deletePostRaw(requestParameters);
    }

    /**
     * A sent email
     * Delete a Sent Email
     */
    async deleteSentEmailRaw(requestParameters: DeleteSentEmailRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSentEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sent_emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A sent email
     * Delete a Sent Email
     */
    async deleteSentEmail(requestParameters: DeleteSentEmailRequest): Promise<void> {
        await this.deleteSentEmailRaw(requestParameters);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Delete a Study
     */
    async deleteStudyRaw(requestParameters: DeleteStudyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStudy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Delete a Study
     */
    async deleteStudy(requestParameters: DeleteStudyRequest): Promise<void> {
        await this.deleteStudyRaw(requestParameters);
    }

    /**
     * Favorite
     * Delete a Tracking Reminder
     */
    async deleteTrackingReminderRaw(requestParameters: DeleteTrackingReminderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTrackingReminder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Favorite
     * Delete a Tracking Reminder
     */
    async deleteTrackingReminder(requestParameters: DeleteTrackingReminderRequest): Promise<void> {
        await this.deleteTrackingReminderRaw(requestParameters);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Delete a Tracking Reminder Notification
     */
    async deleteTrackingReminderNotificationRaw(requestParameters: DeleteTrackingReminderNotificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTrackingReminderNotification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminder_notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Delete a Tracking Reminder Notification
     */
    async deleteTrackingReminderNotification(requestParameters: DeleteTrackingReminderNotificationRequest): Promise<void> {
        await this.deleteTrackingReminderNotificationRaw(requestParameters);
    }

    /**
     * Overview of discoveries, research from \'s data
     * Delete a User
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overview of discoveries, research from \'s data
     * Delete a User
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<void> {
        await this.deleteUserRaw(requestParameters);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Delete a User Tag
     */
    async deleteUserTagRaw(requestParameters: DeleteUserTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Delete a User Tag
     */
    async deleteUserTag(requestParameters: DeleteUserTagRequest): Promise<void> {
        await this.deleteUserTagRaw(requestParameters);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Delete a User Variable
     */
    async deleteUserVariableRaw(requestParameters: DeleteUserVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Delete a User Variable
     */
    async deleteUserVariable(requestParameters: DeleteUserVariableRequest): Promise<void> {
        await this.deleteUserVariableRaw(requestParameters);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Delete a Variable
     */
    async deleteVariableRaw(requestParameters: DeleteVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Delete a Variable
     */
    async deleteVariable(requestParameters: DeleteVariableRequest): Promise<void> {
        await this.deleteVariableRaw(requestParameters);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Delete a Variable Category
     */
    async deleteVariableCategoryRaw(requestParameters: DeleteVariableCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVariableCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Delete a Variable Category
     */
    async deleteVariableCategory(requestParameters: DeleteVariableCategoryRequest): Promise<void> {
        await this.deleteVariableCategoryRaw(requestParameters);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Delete a Variable User Source
     */
    async deleteVariableUserSourceRaw(requestParameters: DeleteVariableUserSourceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVariableUserSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_user_sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Delete a Variable User Source
     */
    async deleteVariableUserSource(requestParameters: DeleteVariableUserSourceRequest): Promise<void> {
        await this.deleteVariableUserSourceRaw(requestParameters);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Delete a Vote
     */
    async deleteVoteRaw(requestParameters: DeleteVoteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/votes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Delete a Vote
     */
    async deleteVote(requestParameters: DeleteVoteRequest): Promise<void> {
        await this.deleteVoteRaw(requestParameters);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Get a Aggregate Correlation
     */
    async getAggregateCorrelationRaw(requestParameters: GetAggregateCorrelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAggregateCorrelation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aggregate_correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Get a Aggregate Correlation
     */
    async getAggregateCorrelation(requestParameters: GetAggregateCorrelationRequest): Promise<void> {
        await this.getAggregateCorrelationRaw(requestParameters);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Get a Application
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Get a Application
     */
    async getApplication(requestParameters: GetApplicationRequest): Promise<void> {
        await this.getApplicationRaw(requestParameters);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Get a Collaborator
     */
    async getCollaboratorRaw(requestParameters: GetCollaboratorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCollaborator.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collaborators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Get a Collaborator
     */
    async getCollaborator(requestParameters: GetCollaboratorRequest): Promise<void> {
        await this.getCollaboratorRaw(requestParameters);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a Common Tag
     */
    async getCommonTagRaw(requestParameters: GetCommonTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCommonTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a Common Tag
     */
    async getCommonTag(requestParameters: GetCommonTagRequest): Promise<void> {
        await this.getCommonTagRaw(requestParameters);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Get a Connection
     */
    async getConnectionRaw(requestParameters: GetConnectionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getConnection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Get a Connection
     */
    async getConnection(requestParameters: GetConnectionRequest): Promise<void> {
        await this.getConnectionRaw(requestParameters);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Get a Connector
     */
    async getConnectorRaw(requestParameters: GetConnectorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getConnector.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Get a Connector
     */
    async getConnector(requestParameters: GetConnectorRequest): Promise<void> {
        await this.getConnectorRaw(requestParameters);
    }

    /**
     * A record of attempts to import from a given data source. 
     * Get a Connector Import
     */
    async getConnectorImportRaw(requestParameters: GetConnectorImportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getConnectorImport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A record of attempts to import from a given data source. 
     * Get a Connector Import
     */
    async getConnectorImport(requestParameters: GetConnectorImportRequest): Promise<void> {
        await this.getConnectorImportRaw(requestParameters);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Get a Connector Request
     */
    async getConnectorRequestRaw(requestParameters: GetConnectorRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getConnectorRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_requests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Get a Connector Request
     */
    async getConnectorRequest(requestParameters: GetConnectorRequestRequest): Promise<void> {
        await this.getConnectorRequestRaw(requestParameters);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Get a Correlation
     */
    async getCorrelationRaw(requestParameters: GetCorrelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCorrelation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Get a Correlation
     */
    async getCorrelation(requestParameters: GetCorrelationRequest): Promise<void> {
        await this.getCorrelationRaw(requestParameters);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Get a Device Token
     */
    async getDeviceTokenRaw(requestParameters: GetDeviceTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeviceToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Get a Device Token
     */
    async getDeviceToken(requestParameters: GetDeviceTokenRequest): Promise<void> {
        await this.getDeviceTokenRaw(requestParameters);
    }

    /**
     * Measurement
     * Get a Measurement
     */
    async getMeasurementRaw(requestParameters: GetMeasurementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMeasurement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Measurement
     * Get a Measurement
     */
    async getMeasurement(requestParameters: GetMeasurementRequest): Promise<void> {
        await this.getMeasurementRaw(requestParameters);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Get a Measurement Export
     */
    async getMeasurementExportRaw(requestParameters: GetMeasurementExportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMeasurementExport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Get a Measurement Export
     */
    async getMeasurementExport(requestParameters: GetMeasurementExportRequest): Promise<void> {
        await this.getMeasurementExportRaw(requestParameters);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Get a Measurement Import
     */
    async getMeasurementImportRaw(requestParameters: GetMeasurementImportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMeasurementImport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Get a Measurement Import
     */
    async getMeasurementImport(requestParameters: GetMeasurementImportRequest): Promise<void> {
        await this.getMeasurementImportRaw(requestParameters);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Get a Notification
     */
    async getNotificationRaw(requestParameters: GetNotificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNotification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Get a Notification
     */
    async getNotification(requestParameters: GetNotificationRequest): Promise<void> {
        await this.getNotificationRaw(requestParameters);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Get a OAuth Access Token
     */
    async getOAuthAccessTokenRaw(requestParameters: GetOAuthAccessTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOAuthAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_access_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Get a OAuth Access Token
     */
    async getOAuthAccessToken(requestParameters: GetOAuthAccessTokenRequest): Promise<void> {
        await this.getOAuthAccessTokenRaw(requestParameters);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Get a OAuth Client
     */
    async getOAuthClientRaw(requestParameters: GetOAuthClientRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOAuthClient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Get a OAuth Client
     */
    async getOAuthClient(requestParameters: GetOAuthClientRequest): Promise<void> {
        await this.getOAuthClientRaw(requestParameters);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Get a Post
     */
    async getPostRaw(requestParameters: GetPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp_posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Get a Post
     */
    async getPost(requestParameters: GetPostRequest): Promise<void> {
        await this.getPostRaw(requestParameters);
    }

    /**
     * A sent email
     * Get a Sent Email
     */
    async getSentEmailRaw(requestParameters: GetSentEmailRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSentEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sent_emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A sent email
     * Get a Sent Email
     */
    async getSentEmail(requestParameters: GetSentEmailRequest): Promise<void> {
        await this.getSentEmailRaw(requestParameters);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Get a Study
     */
    async getStudyRaw(requestParameters: GetStudyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStudy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Get a Study
     */
    async getStudy(requestParameters: GetStudyRequest): Promise<void> {
        await this.getStudyRaw(requestParameters);
    }

    /**
     * Favorite
     * Get a Tracking Reminder
     */
    async getTrackingReminderRaw(requestParameters: GetTrackingReminderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTrackingReminder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Favorite
     * Get a Tracking Reminder
     */
    async getTrackingReminder(requestParameters: GetTrackingReminderRequest): Promise<void> {
        await this.getTrackingReminderRaw(requestParameters);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Get a Tracking Reminder Notification
     */
    async getTrackingReminderNotificationRaw(requestParameters: GetTrackingReminderNotificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTrackingReminderNotification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminder_notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Get a Tracking Reminder Notification
     */
    async getTrackingReminderNotification(requestParameters: GetTrackingReminderNotificationRequest): Promise<void> {
        await this.getTrackingReminderNotificationRaw(requestParameters);
    }

    /**
     * Overview of discoveries, research from \'s data
     * Get a User
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overview of discoveries, research from \'s data
     * Get a User
     */
    async getUser(requestParameters: GetUserRequest): Promise<void> {
        await this.getUserRaw(requestParameters);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Get a User Tag
     */
    async getUserTagRaw(requestParameters: GetUserTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Get a User Tag
     */
    async getUserTag(requestParameters: GetUserTagRequest): Promise<void> {
        await this.getUserTagRaw(requestParameters);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Get a User Variable
     */
    async getUserVariableRaw(requestParameters: GetUserVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Get a User Variable
     */
    async getUserVariable(requestParameters: GetUserVariableRequest): Promise<void> {
        await this.getUserVariableRaw(requestParameters);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Get a Variable
     */
    async getVariableRaw(requestParameters: GetVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Get a Variable
     */
    async getVariable(requestParameters: GetVariableRequest): Promise<void> {
        await this.getVariableRaw(requestParameters);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Get a Variable Category
     */
    async getVariableCategoryRaw(requestParameters: GetVariableCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVariableCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Get a Variable Category
     */
    async getVariableCategory(requestParameters: GetVariableCategoryRequest): Promise<void> {
        await this.getVariableCategoryRaw(requestParameters);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Get a Variable User Source
     */
    async getVariableUserSourceRaw(requestParameters: GetVariableUserSourceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVariableUserSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_user_sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Get a Variable User Source
     */
    async getVariableUserSource(requestParameters: GetVariableUserSourceRequest): Promise<void> {
        await this.getVariableUserSourceRaw(requestParameters);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Get a Vote
     */
    async getVoteRaw(requestParameters: GetVoteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/votes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Get a Vote
     */
    async getVote(requestParameters: GetVoteRequest): Promise<void> {
        await this.getVoteRaw(requestParameters);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * List Aggregate Correlations
     */
    async listAggregateCorrelationsRaw(requestParameters: ListAggregateCorrelationsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.aggregateQmScore !== undefined) {
            queryParameters['aggregate_qm_score'] = requestParameters.aggregateQmScore;
        }

        if (requestParameters.analysisEndedAt !== undefined) {
            queryParameters['analysis_ended_at'] = (requestParameters.analysisEndedAt as any).toISOString();
        }

        if (requestParameters.analysisRequestedAt !== undefined) {
            queryParameters['analysis_requested_at'] = (requestParameters.analysisRequestedAt as any).toISOString();
        }

        if (requestParameters.analysisStartedAt !== undefined) {
            queryParameters['analysis_started_at'] = (requestParameters.analysisStartedAt as any).toISOString();
        }

        if (requestParameters.averageDailyHighCause !== undefined) {
            queryParameters['average_daily_high_cause'] = requestParameters.averageDailyHighCause;
        }

        if (requestParameters.averageDailyLowCause !== undefined) {
            queryParameters['average_daily_low_cause'] = requestParameters.averageDailyLowCause;
        }

        if (requestParameters.averageEffect !== undefined) {
            queryParameters['average_effect'] = requestParameters.averageEffect;
        }

        if (requestParameters.averageEffectFollowingHighCause !== undefined) {
            queryParameters['average_effect_following_high_cause'] = requestParameters.averageEffectFollowingHighCause;
        }

        if (requestParameters.averageEffectFollowingLowCause !== undefined) {
            queryParameters['average_effect_following_low_cause'] = requestParameters.averageEffectFollowingLowCause;
        }

        if (requestParameters.averageVote !== undefined) {
            queryParameters['average_vote'] = requestParameters.averageVote;
        }

        if (requestParameters.causeBaselineAveragePerDay !== undefined) {
            queryParameters['cause_baseline_average_per_day'] = requestParameters.causeBaselineAveragePerDay;
        }

        if (requestParameters.causeBaselineAveragePerDurationOfAction !== undefined) {
            queryParameters['cause_baseline_average_per_duration_of_action'] = requestParameters.causeBaselineAveragePerDurationOfAction;
        }

        if (requestParameters.causeChanges !== undefined) {
            queryParameters['cause_changes'] = requestParameters.causeChanges;
        }

        if (requestParameters.causeTreatmentAveragePerDay !== undefined) {
            queryParameters['cause_treatment_average_per_day'] = requestParameters.causeTreatmentAveragePerDay;
        }

        if (requestParameters.causeTreatmentAveragePerDurationOfAction !== undefined) {
            queryParameters['cause_treatment_average_per_duration_of_action'] = requestParameters.causeTreatmentAveragePerDurationOfAction;
        }

        if (requestParameters.causeUnitId !== undefined) {
            queryParameters['cause_unit_id'] = requestParameters.causeUnitId;
        }

        if (requestParameters.causeVariableCategoryId !== undefined) {
            queryParameters['cause_variable_category_id'] = requestParameters.causeVariableCategoryId;
        }

        if (requestParameters.causeVariableId !== undefined) {
            queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.confidenceInterval !== undefined) {
            queryParameters['confidence_interval'] = requestParameters.confidenceInterval;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.criticalTValue !== undefined) {
            queryParameters['critical_t_value'] = requestParameters.criticalTValue;
        }

        if (requestParameters.dataSourceName !== undefined) {
            queryParameters['data_source_name'] = requestParameters.dataSourceName;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.durationOfAction !== undefined) {
            queryParameters['duration_of_action'] = requestParameters.durationOfAction;
        }

        if (requestParameters.effectBaselineAverage !== undefined) {
            queryParameters['effect_baseline_average'] = requestParameters.effectBaselineAverage;
        }

        if (requestParameters.effectBaselineRelativeStandardDeviation !== undefined) {
            queryParameters['effect_baseline_relative_standard_deviation'] = requestParameters.effectBaselineRelativeStandardDeviation;
        }

        if (requestParameters.effectBaselineStandardDeviation !== undefined) {
            queryParameters['effect_baseline_standard_deviation'] = requestParameters.effectBaselineStandardDeviation;
        }

        if (requestParameters.effectChanges !== undefined) {
            queryParameters['effect_changes'] = requestParameters.effectChanges;
        }

        if (requestParameters.effectFollowUpAverage !== undefined) {
            queryParameters['effect_follow_up_average'] = requestParameters.effectFollowUpAverage;
        }

        if (requestParameters.effectFollowUpPercentChangeFromBaseline !== undefined) {
            queryParameters['effect_follow_up_percent_change_from_baseline'] = requestParameters.effectFollowUpPercentChangeFromBaseline;
        }

        if (requestParameters.effectVariableCategoryId !== undefined) {
            queryParameters['effect_variable_category_id'] = requestParameters.effectVariableCategoryId;
        }

        if (requestParameters.effectVariableId !== undefined) {
            queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
        }

        if (requestParameters.forwardPearsonCorrelationCoefficient !== undefined) {
            queryParameters['forward_pearson_correlation_coefficient'] = requestParameters.forwardPearsonCorrelationCoefficient;
        }

        if (requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome !== undefined) {
            queryParameters['grouped_cause_value_closest_to_value_predicting_high_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome;
        }

        if (requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome !== undefined) {
            queryParameters['grouped_cause_value_closest_to_value_predicting_low_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.interestingVariableCategoryPair !== undefined) {
            queryParameters['interesting_variable_category_pair'] = requestParameters.interestingVariableCategoryPair;
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.newestDataAt !== undefined) {
            queryParameters['newest_data_at'] = (requestParameters.newestDataAt as any).toISOString();
        }

        if (requestParameters.numberOfCorrelations !== undefined) {
            queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
        }

        if (requestParameters.numberOfPairs !== undefined) {
            queryParameters['number_of_pairs'] = requestParameters.numberOfPairs;
        }

        if (requestParameters.numberOfUsers !== undefined) {
            queryParameters['number_of_users'] = requestParameters.numberOfUsers;
        }

        if (requestParameters.onsetDelay !== undefined) {
            queryParameters['onset_delay'] = requestParameters.onsetDelay;
        }

        if (requestParameters.optimalPearsonProduct !== undefined) {
            queryParameters['optimal_pearson_product'] = requestParameters.optimalPearsonProduct;
        }

        if (requestParameters.pValue !== undefined) {
            queryParameters['p_value'] = requestParameters.pValue;
        }

        if (requestParameters.populationTraitPearsonCorrelationCoefficient !== undefined) {
            queryParameters['population_trait_pearson_correlation_coefficient'] = requestParameters.populationTraitPearsonCorrelationCoefficient;
        }

        if (requestParameters.predictivePearsonCorrelationCoefficient !== undefined) {
            queryParameters['predictive_pearson_correlation_coefficient'] = requestParameters.predictivePearsonCorrelationCoefficient;
        }

        if (requestParameters.predictsHighEffectChange !== undefined) {
            queryParameters['predicts_high_effect_change'] = requestParameters.predictsHighEffectChange;
        }

        if (requestParameters.predictsLowEffectChange !== undefined) {
            queryParameters['predicts_low_effect_change'] = requestParameters.predictsLowEffectChange;
        }

        if (requestParameters.publishedAt !== undefined) {
            queryParameters['published_at'] = (requestParameters.publishedAt as any).toISOString();
        }

        if (requestParameters.reasonForAnalysis !== undefined) {
            queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
        }

        if (requestParameters.reversePearsonCorrelationCoefficient !== undefined) {
            queryParameters['reverse_pearson_correlation_coefficient'] = requestParameters.reversePearsonCorrelationCoefficient;
        }

        if (requestParameters.statisticalSignificance !== undefined) {
            queryParameters['statistical_significance'] = requestParameters.statisticalSignificance;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.tValue !== undefined) {
            queryParameters['t_value'] = requestParameters.tValue;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.valuePredictingHighOutcome !== undefined) {
            queryParameters['value_predicting_high_outcome'] = requestParameters.valuePredictingHighOutcome;
        }

        if (requestParameters.valuePredictingLowOutcome !== undefined) {
            queryParameters['value_predicting_low_outcome'] = requestParameters.valuePredictingLowOutcome;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        if (requestParameters.zScore !== undefined) {
            queryParameters['z_score'] = requestParameters.zScore;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aggregate_correlations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * List Aggregate Correlations
     */
    async listAggregateCorrelations(requestParameters: ListAggregateCorrelationsRequest): Promise<void> {
        await this.listAggregateCorrelationsRaw(requestParameters);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * List Applications
     */
    async listApplicationsRaw(requestParameters: ListApplicationsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.additionalSettings !== undefined) {
            queryParameters['additional_settings'] = requestParameters.additionalSettings;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.appDescription !== undefined) {
            queryParameters['app_description'] = requestParameters.appDescription;
        }

        if (requestParameters.appDesign !== undefined) {
            queryParameters['app_design'] = requestParameters.appDesign;
        }

        if (requestParameters.appDisplayName !== undefined) {
            queryParameters['app_display_name'] = requestParameters.appDisplayName;
        }

        if (requestParameters.appStatus !== undefined) {
            queryParameters['app_status'] = requestParameters.appStatus;
        }

        if (requestParameters.appType !== undefined) {
            queryParameters['app_type'] = requestParameters.appType;
        }

        if (requestParameters.billingEnabled !== undefined) {
            queryParameters['billing_enabled'] = requestParameters.billingEnabled;
        }

        if (requestParameters.buildEnabled !== undefined) {
            queryParameters['build_enabled'] = requestParameters.buildEnabled;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.companyName !== undefined) {
            queryParameters['company_name'] = requestParameters.companyName;
        }

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.enabled !== undefined) {
            queryParameters['enabled'] = requestParameters.enabled;
        }

        if (requestParameters.exceedingCallCharge !== undefined) {
            queryParameters['exceeding_call_charge'] = requestParameters.exceedingCallCharge;
        }

        if (requestParameters.exceedingCallCount !== undefined) {
            queryParameters['exceeding_call_count'] = requestParameters.exceedingCallCount;
        }

        if (requestParameters.homepageUrl !== undefined) {
            queryParameters['homepage_url'] = requestParameters.homepageUrl;
        }

        if (requestParameters.iconUrl !== undefined) {
            queryParameters['icon_url'] = requestParameters.iconUrl;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.lastFour !== undefined) {
            queryParameters['last_four'] = requestParameters.lastFour;
        }

        if (requestParameters.longDescription !== undefined) {
            queryParameters['long_description'] = requestParameters.longDescription;
        }

        if (requestParameters.numberOfCollaboratorsWhereApp !== undefined) {
            queryParameters['number_of_collaborators_where_app'] = requestParameters.numberOfCollaboratorsWhereApp;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        if (requestParameters.outcomeVariableId !== undefined) {
            queryParameters['outcome_variable_id'] = requestParameters.outcomeVariableId;
        }

        if (requestParameters.physician !== undefined) {
            queryParameters['physician'] = requestParameters.physician;
        }

        if (requestParameters.planId !== undefined) {
            queryParameters['plan_id'] = requestParameters.planId;
        }

        if (requestParameters.predictorVariableId !== undefined) {
            queryParameters['predictor_variable_id'] = requestParameters.predictorVariableId;
        }

        if (requestParameters.splashScreen !== undefined) {
            queryParameters['splash_screen'] = requestParameters.splashScreen;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.stripeActive !== undefined) {
            queryParameters['stripe_active'] = requestParameters.stripeActive;
        }

        if (requestParameters.stripeId !== undefined) {
            queryParameters['stripe_id'] = requestParameters.stripeId;
        }

        if (requestParameters.stripePlan !== undefined) {
            queryParameters['stripe_plan'] = requestParameters.stripePlan;
        }

        if (requestParameters.stripeSubscription !== undefined) {
            queryParameters['stripe_subscription'] = requestParameters.stripeSubscription;
        }

        if (requestParameters.study !== undefined) {
            queryParameters['study'] = requestParameters.study;
        }

        if (requestParameters.subscriptionEndsAt !== undefined) {
            queryParameters['subscription_ends_at'] = (requestParameters.subscriptionEndsAt as any).toISOString();
        }

        if (requestParameters.textLogo !== undefined) {
            queryParameters['text_logo'] = requestParameters.textLogo;
        }

        if (requestParameters.trialEndsAt !== undefined) {
            queryParameters['trial_ends_at'] = (requestParameters.trialEndsAt as any).toISOString();
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        if (requestParameters.zip !== undefined) {
            queryParameters['zip'] = requestParameters.zip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * List Applications
     */
    async listApplications(requestParameters: ListApplicationsRequest): Promise<void> {
        await this.listApplicationsRaw(requestParameters);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * List Collaborators
     */
    async listCollaboratorsRaw(requestParameters: ListCollaboratorsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.appId !== undefined) {
            queryParameters['app_id'] = requestParameters.appId;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collaborators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * List Collaborators
     */
    async listCollaborators(requestParameters: ListCollaboratorsRequest): Promise<void> {
        await this.listCollaboratorsRaw(requestParameters);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List Common Tags
     */
    async listCommonTagsRaw(requestParameters: ListCommonTagsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.conversionFactor !== undefined) {
            queryParameters['conversion_factor'] = requestParameters.conversionFactor;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.numberOfDataPoints !== undefined) {
            queryParameters['number_of_data_points'] = requestParameters.numberOfDataPoints;
        }

        if (requestParameters.standardError !== undefined) {
            queryParameters['standard_error'] = requestParameters.standardError;
        }

        if (requestParameters.tagVariableId !== undefined) {
            queryParameters['tag_variable_id'] = requestParameters.tagVariableId;
        }

        if (requestParameters.tagVariableUnitId !== undefined) {
            queryParameters['tag_variable_unit_id'] = requestParameters.tagVariableUnitId;
        }

        if (requestParameters.taggedVariableId !== undefined) {
            queryParameters['tagged_variable_id'] = requestParameters.taggedVariableId;
        }

        if (requestParameters.taggedVariableUnitId !== undefined) {
            queryParameters['tagged_variable_unit_id'] = requestParameters.taggedVariableUnitId;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common_tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List Common Tags
     */
    async listCommonTags(requestParameters: ListCommonTagsRequest): Promise<void> {
        await this.listCommonTagsRaw(requestParameters);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * List Connections
     */
    async listConnectionsRaw(requestParameters: ListConnectionsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.connectError !== undefined) {
            queryParameters['connect_error'] = requestParameters.connectError;
        }

        if (requestParameters.connectStatus !== undefined) {
            queryParameters['connect_status'] = requestParameters.connectStatus;
        }

        if (requestParameters.connectorId !== undefined) {
            queryParameters['connector_id'] = requestParameters.connectorId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.credentials !== undefined) {
            queryParameters['credentials'] = requestParameters.credentials;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.importEndedAt !== undefined) {
            queryParameters['import_ended_at'] = (requestParameters.importEndedAt as any).toISOString();
        }

        if (requestParameters.importStartedAt !== undefined) {
            queryParameters['import_started_at'] = (requestParameters.importStartedAt as any).toISOString();
        }

        if (requestParameters.importedDataEndAt !== undefined) {
            queryParameters['imported_data_end_at'] = (requestParameters.importedDataEndAt as any).toISOString();
        }

        if (requestParameters.importedDataFromAt !== undefined) {
            queryParameters['imported_data_from_at'] = (requestParameters.importedDataFromAt as any).toISOString();
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.lastSuccessfulUpdatedAt !== undefined) {
            queryParameters['last_successful_updated_at'] = (requestParameters.lastSuccessfulUpdatedAt as any).toISOString();
        }

        if (requestParameters.latestMeasurementAt !== undefined) {
            queryParameters['latest_measurement_at'] = (requestParameters.latestMeasurementAt as any).toISOString();
        }

        if (requestParameters.numberOfConnectorImports !== undefined) {
            queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
        }

        if (requestParameters.numberOfConnectorRequests !== undefined) {
            queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
        }

        if (requestParameters.reasonForImport !== undefined) {
            queryParameters['reason_for_import'] = requestParameters.reasonForImport;
        }

        if (requestParameters.totalMeasurementsInLastUpdate !== undefined) {
            queryParameters['total_measurements_in_last_update'] = requestParameters.totalMeasurementsInLastUpdate;
        }

        if (requestParameters.updateError !== undefined) {
            queryParameters['update_error'] = requestParameters.updateError;
        }

        if (requestParameters.updateRequestedAt !== undefined) {
            queryParameters['update_requested_at'] = (requestParameters.updateRequestedAt as any).toISOString();
        }

        if (requestParameters.updateStatus !== undefined) {
            queryParameters['update_status'] = requestParameters.updateStatus;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.userMessage !== undefined) {
            queryParameters['user_message'] = requestParameters.userMessage;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * List Connections
     */
    async listConnections(requestParameters: ListConnectionsRequest): Promise<void> {
        await this.listConnectionsRaw(requestParameters);
    }

    /**
     * A record of attempts to import from a given data source. 
     * List Connector Imports
     */
    async listConnectorImportsRaw(requestParameters: ListConnectorImportsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.connectionId !== undefined) {
            queryParameters['connection_id'] = requestParameters.connectionId;
        }

        if (requestParameters.connectorId !== undefined) {
            queryParameters['connector_id'] = requestParameters.connectorId;
        }

        if (requestParameters.connectorRequests !== undefined) {
            queryParameters['connector_requests'] = (requestParameters.connectorRequests as any).toISOString();
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.credentials !== undefined) {
            queryParameters['credentials'] = requestParameters.credentials;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.earliestMeasurementAt !== undefined) {
            queryParameters['earliest_measurement_at'] = (requestParameters.earliestMeasurementAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.importEndedAt !== undefined) {
            queryParameters['import_ended_at'] = (requestParameters.importEndedAt as any).toISOString();
        }

        if (requestParameters.importStartedAt !== undefined) {
            queryParameters['import_started_at'] = (requestParameters.importStartedAt as any).toISOString();
        }

        if (requestParameters.importedDataEndAt !== undefined) {
            queryParameters['imported_data_end_at'] = (requestParameters.importedDataEndAt as any).toISOString();
        }

        if (requestParameters.importedDataFromAt !== undefined) {
            queryParameters['imported_data_from_at'] = (requestParameters.importedDataFromAt as any).toISOString();
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.latestMeasurementAt !== undefined) {
            queryParameters['latest_measurement_at'] = (requestParameters.latestMeasurementAt as any).toISOString();
        }

        if (requestParameters.numberOfConnectorRequests !== undefined) {
            queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
        }

        if (requestParameters.numberOfMeasurements !== undefined) {
            queryParameters['number_of_measurements'] = requestParameters.numberOfMeasurements;
        }

        if (requestParameters.reasonForImport !== undefined) {
            queryParameters['reason_for_import'] = requestParameters.reasonForImport;
        }

        if (requestParameters.success !== undefined) {
            queryParameters['success'] = requestParameters.success;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_imports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A record of attempts to import from a given data source. 
     * List Connector Imports
     */
    async listConnectorImports(requestParameters: ListConnectorImportsRequest): Promise<void> {
        await this.listConnectorImportsRaw(requestParameters);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * List Connector Requests
     */
    async listConnectorRequestsRaw(requestParameters: ListConnectorRequestsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.connectionId !== undefined) {
            queryParameters['connection_id'] = requestParameters.connectionId;
        }

        if (requestParameters.connectorId !== undefined) {
            queryParameters['connector_id'] = requestParameters.connectorId;
        }

        if (requestParameters.connectorImportId !== undefined) {
            queryParameters['connector_import_id'] = requestParameters.connectorImportId;
        }

        if (requestParameters.contentType !== undefined) {
            queryParameters['content_type'] = requestParameters.contentType;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.importedDataFromAt !== undefined) {
            queryParameters['imported_data_from_at'] = (requestParameters.importedDataFromAt as any).toISOString();
        }

        if (requestParameters.method !== undefined) {
            queryParameters['method'] = requestParameters.method;
        }

        if (requestParameters.requestBody !== undefined) {
            queryParameters['request_body'] = requestParameters.requestBody;
        }

        if (requestParameters.responseBody !== undefined) {
            queryParameters['response_body'] = requestParameters.responseBody;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * List Connector Requests
     */
    async listConnectorRequests(requestParameters: ListConnectorRequestsRequest): Promise<void> {
        await this.listConnectorRequestsRaw(requestParameters);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List Connectors
     */
    async listConnectorsRaw(requestParameters: ListConnectorsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.displayName !== undefined) {
            queryParameters['display_name'] = requestParameters.displayName;
        }

        if (requestParameters.enabled !== undefined) {
            queryParameters['enabled'] = requestParameters.enabled;
        }

        if (requestParameters.getItUrl !== undefined) {
            queryParameters['get_it_url'] = requestParameters.getItUrl;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.image !== undefined) {
            queryParameters['image'] = requestParameters.image;
        }

        if (requestParameters.isParent !== undefined) {
            queryParameters['is_parent'] = requestParameters.isParent;
        }

        if (requestParameters.longDescription !== undefined) {
            queryParameters['long_description'] = requestParameters.longDescription;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.numberOfConnections !== undefined) {
            queryParameters['number_of_connections'] = requestParameters.numberOfConnections;
        }

        if (requestParameters.numberOfConnectorImports !== undefined) {
            queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
        }

        if (requestParameters.numberOfConnectorRequests !== undefined) {
            queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
        }

        if (requestParameters.oauth !== undefined) {
            queryParameters['oauth'] = requestParameters.oauth;
        }

        if (requestParameters.qmClient !== undefined) {
            queryParameters['qm_client'] = requestParameters.qmClient;
        }

        if (requestParameters.shortDescription !== undefined) {
            queryParameters['short_description'] = requestParameters.shortDescription;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connectors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List Connectors
     */
    async listConnectors(requestParameters: ListConnectorsRequest): Promise<void> {
        await this.listConnectorsRaw(requestParameters);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * List Correlations
     */
    async listCorrelationsRaw(requestParameters: ListCorrelationsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.aggregateCorrelationId !== undefined) {
            queryParameters['aggregate_correlation_id'] = requestParameters.aggregateCorrelationId;
        }

        if (requestParameters.aggregatedAt !== undefined) {
            queryParameters['aggregated_at'] = (requestParameters.aggregatedAt as any).toISOString();
        }

        if (requestParameters.analysisEndedAt !== undefined) {
            queryParameters['analysis_ended_at'] = (requestParameters.analysisEndedAt as any).toISOString();
        }

        if (requestParameters.analysisRequestedAt !== undefined) {
            queryParameters['analysis_requested_at'] = (requestParameters.analysisRequestedAt as any).toISOString();
        }

        if (requestParameters.analysisStartedAt !== undefined) {
            queryParameters['analysis_started_at'] = (requestParameters.analysisStartedAt as any).toISOString();
        }

        if (requestParameters.averageDailyHighCause !== undefined) {
            queryParameters['average_daily_high_cause'] = requestParameters.averageDailyHighCause;
        }

        if (requestParameters.averageDailyLowCause !== undefined) {
            queryParameters['average_daily_low_cause'] = requestParameters.averageDailyLowCause;
        }

        if (requestParameters.averageEffect !== undefined) {
            queryParameters['average_effect'] = requestParameters.averageEffect;
        }

        if (requestParameters.averageEffectFollowingHighCause !== undefined) {
            queryParameters['average_effect_following_high_cause'] = requestParameters.averageEffectFollowingHighCause;
        }

        if (requestParameters.averageEffectFollowingLowCause !== undefined) {
            queryParameters['average_effect_following_low_cause'] = requestParameters.averageEffectFollowingLowCause;
        }

        if (requestParameters.averageForwardPearsonCorrelationOverOnsetDelays !== undefined) {
            queryParameters['average_forward_pearson_correlation_over_onset_delays'] = requestParameters.averageForwardPearsonCorrelationOverOnsetDelays;
        }

        if (requestParameters.averageReversePearsonCorrelationOverOnsetDelays !== undefined) {
            queryParameters['average_reverse_pearson_correlation_over_onset_delays'] = requestParameters.averageReversePearsonCorrelationOverOnsetDelays;
        }

        if (requestParameters.causalityVote !== undefined) {
            queryParameters['causality_vote'] = requestParameters.causalityVote;
        }

        if (requestParameters.causeBaselineAveragePerDay !== undefined) {
            queryParameters['cause_baseline_average_per_day'] = requestParameters.causeBaselineAveragePerDay;
        }

        if (requestParameters.causeBaselineAveragePerDurationOfAction !== undefined) {
            queryParameters['cause_baseline_average_per_duration_of_action'] = requestParameters.causeBaselineAveragePerDurationOfAction;
        }

        if (requestParameters.causeChanges !== undefined) {
            queryParameters['cause_changes'] = requestParameters.causeChanges;
        }

        if (requestParameters.causeFillingValue !== undefined) {
            queryParameters['cause_filling_value'] = requestParameters.causeFillingValue;
        }

        if (requestParameters.causeNumberOfProcessedDailyMeasurements !== undefined) {
            queryParameters['cause_number_of_processed_daily_measurements'] = requestParameters.causeNumberOfProcessedDailyMeasurements;
        }

        if (requestParameters.causeNumberOfRawMeasurements !== undefined) {
            queryParameters['cause_number_of_raw_measurements'] = requestParameters.causeNumberOfRawMeasurements;
        }

        if (requestParameters.causeTreatmentAveragePerDay !== undefined) {
            queryParameters['cause_treatment_average_per_day'] = requestParameters.causeTreatmentAveragePerDay;
        }

        if (requestParameters.causeTreatmentAveragePerDurationOfAction !== undefined) {
            queryParameters['cause_treatment_average_per_duration_of_action'] = requestParameters.causeTreatmentAveragePerDurationOfAction;
        }

        if (requestParameters.causeUnitId !== undefined) {
            queryParameters['cause_unit_id'] = requestParameters.causeUnitId;
        }

        if (requestParameters.causeUserVariableId !== undefined) {
            queryParameters['cause_user_variable_id'] = requestParameters.causeUserVariableId;
        }

        if (requestParameters.causeVariableCategoryId !== undefined) {
            queryParameters['cause_variable_category_id'] = requestParameters.causeVariableCategoryId;
        }

        if (requestParameters.causeVariableId !== undefined) {
            queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.confidenceInterval !== undefined) {
            queryParameters['confidence_interval'] = requestParameters.confidenceInterval;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.criticalTValue !== undefined) {
            queryParameters['critical_t_value'] = requestParameters.criticalTValue;
        }

        if (requestParameters.dataSourceName !== undefined) {
            queryParameters['data_source_name'] = requestParameters.dataSourceName;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.durationOfAction !== undefined) {
            queryParameters['duration_of_action'] = requestParameters.durationOfAction;
        }

        if (requestParameters.earliestMeasurementStartAt !== undefined) {
            queryParameters['earliest_measurement_start_at'] = (requestParameters.earliestMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.effectBaselineAverage !== undefined) {
            queryParameters['effect_baseline_average'] = requestParameters.effectBaselineAverage;
        }

        if (requestParameters.effectBaselineRelativeStandardDeviation !== undefined) {
            queryParameters['effect_baseline_relative_standard_deviation'] = requestParameters.effectBaselineRelativeStandardDeviation;
        }

        if (requestParameters.effectBaselineStandardDeviation !== undefined) {
            queryParameters['effect_baseline_standard_deviation'] = requestParameters.effectBaselineStandardDeviation;
        }

        if (requestParameters.effectChanges !== undefined) {
            queryParameters['effect_changes'] = requestParameters.effectChanges;
        }

        if (requestParameters.effectFillingValue !== undefined) {
            queryParameters['effect_filling_value'] = requestParameters.effectFillingValue;
        }

        if (requestParameters.effectFollowUpAverage !== undefined) {
            queryParameters['effect_follow_up_average'] = requestParameters.effectFollowUpAverage;
        }

        if (requestParameters.effectFollowUpPercentChangeFromBaseline !== undefined) {
            queryParameters['effect_follow_up_percent_change_from_baseline'] = requestParameters.effectFollowUpPercentChangeFromBaseline;
        }

        if (requestParameters.effectNumberOfProcessedDailyMeasurements !== undefined) {
            queryParameters['effect_number_of_processed_daily_measurements'] = requestParameters.effectNumberOfProcessedDailyMeasurements;
        }

        if (requestParameters.effectNumberOfRawMeasurements !== undefined) {
            queryParameters['effect_number_of_raw_measurements'] = requestParameters.effectNumberOfRawMeasurements;
        }

        if (requestParameters.effectUserVariableId !== undefined) {
            queryParameters['effect_user_variable_id'] = requestParameters.effectUserVariableId;
        }

        if (requestParameters.effectVariableCategoryId !== undefined) {
            queryParameters['effect_variable_category_id'] = requestParameters.effectVariableCategoryId;
        }

        if (requestParameters.effectVariableId !== undefined) {
            queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
        }

        if (requestParameters.experimentEndAt !== undefined) {
            queryParameters['experiment_end_at'] = (requestParameters.experimentEndAt as any).toISOString();
        }

        if (requestParameters.experimentEndTime !== undefined) {
            queryParameters['experiment_end_time'] = (requestParameters.experimentEndTime as any).toISOString();
        }

        if (requestParameters.experimentStartAt !== undefined) {
            queryParameters['experiment_start_at'] = (requestParameters.experimentStartAt as any).toISOString();
        }

        if (requestParameters.experimentStartTime !== undefined) {
            queryParameters['experiment_start_time'] = (requestParameters.experimentStartTime as any).toISOString();
        }

        if (requestParameters.forwardPearsonCorrelationCoefficient !== undefined) {
            queryParameters['forward_pearson_correlation_coefficient'] = requestParameters.forwardPearsonCorrelationCoefficient;
        }

        if (requestParameters.forwardSpearmanCorrelationCoefficient !== undefined) {
            queryParameters['forward_spearman_correlation_coefficient'] = requestParameters.forwardSpearmanCorrelationCoefficient;
        }

        if (requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome !== undefined) {
            queryParameters['grouped_cause_value_closest_to_value_predicting_high_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome;
        }

        if (requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome !== undefined) {
            queryParameters['grouped_cause_value_closest_to_value_predicting_low_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.interestingVariableCategoryPair !== undefined) {
            queryParameters['interesting_variable_category_pair'] = requestParameters.interestingVariableCategoryPair;
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.latestMeasurementStartAt !== undefined) {
            queryParameters['latest_measurement_start_at'] = (requestParameters.latestMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.newestDataAt !== undefined) {
            queryParameters['newest_data_at'] = (requestParameters.newestDataAt as any).toISOString();
        }

        if (requestParameters.numberOfDays !== undefined) {
            queryParameters['number_of_days'] = requestParameters.numberOfDays;
        }

        if (requestParameters.numberOfPairs !== undefined) {
            queryParameters['number_of_pairs'] = requestParameters.numberOfPairs;
        }

        if (requestParameters.onsetDelay !== undefined) {
            queryParameters['onset_delay'] = requestParameters.onsetDelay;
        }

        if (requestParameters.onsetDelayWithStrongestPearsonCorrelation !== undefined) {
            queryParameters['onset_delay_with_strongest_pearson_correlation'] = requestParameters.onsetDelayWithStrongestPearsonCorrelation;
        }

        if (requestParameters.optimalPearsonProduct !== undefined) {
            queryParameters['optimal_pearson_product'] = requestParameters.optimalPearsonProduct;
        }

        if (requestParameters.pValue !== undefined) {
            queryParameters['p_value'] = requestParameters.pValue;
        }

        if (requestParameters.pearsonCorrelationWithNoOnsetDelay !== undefined) {
            queryParameters['pearson_correlation_with_no_onset_delay'] = requestParameters.pearsonCorrelationWithNoOnsetDelay;
        }

        if (requestParameters.predictivePearsonCorrelationCoefficient !== undefined) {
            queryParameters['predictive_pearson_correlation_coefficient'] = requestParameters.predictivePearsonCorrelationCoefficient;
        }

        if (requestParameters.predictsHighEffectChange !== undefined) {
            queryParameters['predicts_high_effect_change'] = requestParameters.predictsHighEffectChange;
        }

        if (requestParameters.predictsLowEffectChange !== undefined) {
            queryParameters['predicts_low_effect_change'] = requestParameters.predictsLowEffectChange;
        }

        if (requestParameters.publishedAt !== undefined) {
            queryParameters['published_at'] = (requestParameters.publishedAt as any).toISOString();
        }

        if (requestParameters.qmScore !== undefined) {
            queryParameters['qm_score'] = requestParameters.qmScore;
        }

        if (requestParameters.reasonForAnalysis !== undefined) {
            queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
        }

        if (requestParameters.reversePearsonCorrelationCoefficient !== undefined) {
            queryParameters['reverse_pearson_correlation_coefficient'] = requestParameters.reversePearsonCorrelationCoefficient;
        }

        if (requestParameters.statisticalSignificance !== undefined) {
            queryParameters['statistical_significance'] = requestParameters.statisticalSignificance;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.strongestPearsonCorrelationCoefficient !== undefined) {
            queryParameters['strongest_pearson_correlation_coefficient'] = requestParameters.strongestPearsonCorrelationCoefficient;
        }

        if (requestParameters.tValue !== undefined) {
            queryParameters['t_value'] = requestParameters.tValue;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.usefulnessVote !== undefined) {
            queryParameters['usefulness_vote'] = requestParameters.usefulnessVote;
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.valuePredictingHighOutcome !== undefined) {
            queryParameters['value_predicting_high_outcome'] = requestParameters.valuePredictingHighOutcome;
        }

        if (requestParameters.valuePredictingLowOutcome !== undefined) {
            queryParameters['value_predicting_low_outcome'] = requestParameters.valuePredictingLowOutcome;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        if (requestParameters.zScore !== undefined) {
            queryParameters['z_score'] = requestParameters.zScore;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/correlations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * List Correlations
     */
    async listCorrelations(requestParameters: ListCorrelationsRequest): Promise<void> {
        await this.listCorrelationsRaw(requestParameters);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * List Device Tokens
     */
    async listDeviceTokensRaw(requestParameters: ListDeviceTokensRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.bshafferOauthClientsId !== undefined) {
            queryParameters['bshaffer_oauth_clients_id'] = requestParameters.bshafferOauthClientsId;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.deviceToken !== undefined) {
            queryParameters['device_token'] = requestParameters.deviceToken;
        }

        if (requestParameters.errorMessage !== undefined) {
            queryParameters['error_message'] = requestParameters.errorMessage;
        }

        if (requestParameters.lastCheckedAt !== undefined) {
            queryParameters['last_checked_at'] = (requestParameters.lastCheckedAt as any).toISOString();
        }

        if (requestParameters.lastNotifiedAt !== undefined) {
            queryParameters['last_notified_at'] = (requestParameters.lastNotifiedAt as any).toISOString();
        }

        if (requestParameters.numberOfNewTrackingReminderNotifications !== undefined) {
            queryParameters['number_of_new_tracking_reminder_notifications'] = requestParameters.numberOfNewTrackingReminderNotifications;
        }

        if (requestParameters.numberOfNotificationsLastSent !== undefined) {
            queryParameters['number_of_notifications_last_sent'] = requestParameters.numberOfNotificationsLastSent;
        }

        if (requestParameters.numberOfWaitingTrackingReminderNotifications !== undefined) {
            queryParameters['number_of_waiting_tracking_reminder_notifications'] = requestParameters.numberOfWaitingTrackingReminderNotifications;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        if (requestParameters.receivedAt !== undefined) {
            queryParameters['received_at'] = (requestParameters.receivedAt as any).toISOString();
        }

        if (requestParameters.serverHostname !== undefined) {
            queryParameters['server_hostname'] = requestParameters.serverHostname;
        }

        if (requestParameters.serverIp !== undefined) {
            queryParameters['server_ip'] = requestParameters.serverIp;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device_tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * List Device Tokens
     */
    async listDeviceTokens(requestParameters: ListDeviceTokensRequest): Promise<void> {
        await this.listDeviceTokensRaw(requestParameters);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * List Measurement Exports
     */
    async listMeasurementExportsRaw(requestParameters: ListMeasurementExportsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.errorMessage !== undefined) {
            queryParameters['error_message'] = requestParameters.errorMessage;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.outputType !== undefined) {
            queryParameters['output_type'] = requestParameters.outputType;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_exports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * List Measurement Exports
     */
    async listMeasurementExports(requestParameters: ListMeasurementExportsRequest): Promise<void> {
        await this.listMeasurementExportsRaw(requestParameters);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * List Measurement Imports
     */
    async listMeasurementImportsRaw(requestParameters: ListMeasurementImportsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.errorMessage !== undefined) {
            queryParameters['error_message'] = requestParameters.errorMessage;
        }

        if (requestParameters.file !== undefined) {
            queryParameters['file'] = requestParameters.file;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.sourceId !== undefined) {
            queryParameters['source_id'] = requestParameters.sourceId;
        }

        if (requestParameters.sourceName !== undefined) {
            queryParameters['source_name'] = requestParameters.sourceName;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_imports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * List Measurement Imports
     */
    async listMeasurementImports(requestParameters: ListMeasurementImportsRequest): Promise<void> {
        await this.listMeasurementImportsRaw(requestParameters);
    }

    /**
     * Measurement
     * List Measurements
     */
    async listMeasurementsRaw(requestParameters: ListMeasurementsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.connectionId !== undefined) {
            queryParameters['connection_id'] = requestParameters.connectionId;
        }

        if (requestParameters.connectorId !== undefined) {
            queryParameters['connector_id'] = requestParameters.connectorId;
        }

        if (requestParameters.connectorImportId !== undefined) {
            queryParameters['connector_import_id'] = requestParameters.connectorImportId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.latitude !== undefined) {
            queryParameters['latitude'] = requestParameters.latitude;
        }

        if (requestParameters.location !== undefined) {
            queryParameters['location'] = requestParameters.location;
        }

        if (requestParameters.longitude !== undefined) {
            queryParameters['longitude'] = requestParameters.longitude;
        }

        if (requestParameters.originalUnitId !== undefined) {
            queryParameters['original_unit_id'] = requestParameters.originalUnitId;
        }

        if (requestParameters.originalValue !== undefined) {
            queryParameters['original_value'] = requestParameters.originalValue;
        }

        if (requestParameters.sourceId !== undefined) {
            queryParameters['source_id'] = requestParameters.sourceId;
        }

        if (requestParameters.sourceName !== undefined) {
            queryParameters['source_name'] = requestParameters.sourceName;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['start_at'] = (requestParameters.startAt as any).toISOString();
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = requestParameters.startTime;
        }

        if (requestParameters.unitId !== undefined) {
            queryParameters['unit_id'] = requestParameters.unitId;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.userVariableId !== undefined) {
            queryParameters['user_variable_id'] = requestParameters.userVariableId;
        }

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        if (requestParameters.variableCategoryId !== undefined) {
            queryParameters['variable_category_id'] = requestParameters.variableCategoryId;
        }

        if (requestParameters.variableId !== undefined) {
            queryParameters['variable_id'] = requestParameters.variableId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Measurement
     * List Measurements
     */
    async listMeasurements(requestParameters: ListMeasurementsRequest): Promise<void> {
        await this.listMeasurementsRaw(requestParameters);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * List Notifications
     */
    async listNotificationsRaw(requestParameters: ListNotificationsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.data !== undefined) {
            queryParameters['data'] = requestParameters.data;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = requestParameters.deletedAt;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.notifiableId !== undefined) {
            queryParameters['notifiable_id'] = requestParameters.notifiableId;
        }

        if (requestParameters.notifiableType !== undefined) {
            queryParameters['notifiable_type'] = requestParameters.notifiableType;
        }

        if (requestParameters.readAt !== undefined) {
            queryParameters['read_at'] = (requestParameters.readAt as any).toISOString();
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * List Notifications
     */
    async listNotifications(requestParameters: ListNotificationsRequest): Promise<void> {
        await this.listNotificationsRaw(requestParameters);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * List OAuth Access Tokens
     */
    async listOAuthAccessTokensRaw(requestParameters: ListOAuthAccessTokensRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.accessToken !== undefined) {
            queryParameters['access_token'] = requestParameters.accessToken;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.expires !== undefined) {
            queryParameters['expires'] = (requestParameters.expires as any).toISOString();
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_access_tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * List OAuth Access Tokens
     */
    async listOAuthAccessTokens(requestParameters: ListOAuthAccessTokensRequest): Promise<void> {
        await this.listOAuthAccessTokensRaw(requestParameters);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * List OAuth Clients
     */
    async listOAuthClientsRaw(requestParameters: ListOAuthClientsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.appIdentifier !== undefined) {
            queryParameters['app_identifier'] = requestParameters.appIdentifier;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.clientSecret !== undefined) {
            queryParameters['client_secret'] = requestParameters.clientSecret;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.earliestMeasurementStartAt !== undefined) {
            queryParameters['earliest_measurement_start_at'] = (requestParameters.earliestMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.grantTypes !== undefined) {
            queryParameters['grant_types'] = requestParameters.grantTypes;
        }

        if (requestParameters.iconUrl !== undefined) {
            queryParameters['icon_url'] = requestParameters.iconUrl;
        }

        if (requestParameters.latestMeasurementStartAt !== undefined) {
            queryParameters['latest_measurement_start_at'] = (requestParameters.latestMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.numberOfAggregateCorrelations !== undefined) {
            queryParameters['number_of_aggregate_correlations'] = requestParameters.numberOfAggregateCorrelations;
        }

        if (requestParameters.numberOfApplications !== undefined) {
            queryParameters['number_of_applications'] = requestParameters.numberOfApplications;
        }

        if (requestParameters.numberOfButtonClicks !== undefined) {
            queryParameters['number_of_button_clicks'] = requestParameters.numberOfButtonClicks;
        }

        if (requestParameters.numberOfCollaborators !== undefined) {
            queryParameters['number_of_collaborators'] = requestParameters.numberOfCollaborators;
        }

        if (requestParameters.numberOfCommonTags !== undefined) {
            queryParameters['number_of_common_tags'] = requestParameters.numberOfCommonTags;
        }

        if (requestParameters.numberOfConnections !== undefined) {
            queryParameters['number_of_connections'] = requestParameters.numberOfConnections;
        }

        if (requestParameters.numberOfConnectorImports !== undefined) {
            queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
        }

        if (requestParameters.numberOfConnectors !== undefined) {
            queryParameters['number_of_connectors'] = requestParameters.numberOfConnectors;
        }

        if (requestParameters.numberOfCorrelations !== undefined) {
            queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
        }

        if (requestParameters.numberOfOauthAccessTokens !== undefined) {
            queryParameters['number_of_oauth_access_tokens'] = requestParameters.numberOfOauthAccessTokens;
        }

        if (requestParameters.numberOfOauthAuthorizationCodes !== undefined) {
            queryParameters['number_of_oauth_authorization_codes'] = requestParameters.numberOfOauthAuthorizationCodes;
        }

        if (requestParameters.numberOfOauthRefreshTokens !== undefined) {
            queryParameters['number_of_oauth_refresh_tokens'] = requestParameters.numberOfOauthRefreshTokens;
        }

        if (requestParameters.redirectUri !== undefined) {
            queryParameters['redirect_uri'] = requestParameters.redirectUri;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * List OAuth Clients
     */
    async listOAuthClients(requestParameters: ListOAuthClientsRequest): Promise<void> {
        await this.listOAuthClientsRaw(requestParameters);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * List Posts
     */
    async listPostsRaw(requestParameters: ListPostsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.iD !== undefined) {
            queryParameters['ID'] = requestParameters.iD;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.commentCount !== undefined) {
            queryParameters['comment_count'] = requestParameters.commentCount;
        }

        if (requestParameters.commentStatus !== undefined) {
            queryParameters['comment_status'] = requestParameters.commentStatus;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.guid !== undefined) {
            queryParameters['guid'] = requestParameters.guid;
        }

        if (requestParameters.menuOrder !== undefined) {
            queryParameters['menu_order'] = requestParameters.menuOrder;
        }

        if (requestParameters.pingStatus !== undefined) {
            queryParameters['ping_status'] = requestParameters.pingStatus;
        }

        if (requestParameters.pinged !== undefined) {
            queryParameters['pinged'] = requestParameters.pinged;
        }

        if (requestParameters.postAuthor !== undefined) {
            queryParameters['post_author'] = requestParameters.postAuthor;
        }

        if (requestParameters.postContent !== undefined) {
            queryParameters['post_content'] = requestParameters.postContent;
        }

        if (requestParameters.postContentFiltered !== undefined) {
            queryParameters['post_content_filtered'] = requestParameters.postContentFiltered;
        }

        if (requestParameters.postDate !== undefined) {
            queryParameters['post_date'] = (requestParameters.postDate as any).toISOString();
        }

        if (requestParameters.postDateGmt !== undefined) {
            queryParameters['post_date_gmt'] = (requestParameters.postDateGmt as any).toISOString();
        }

        if (requestParameters.postExcerpt !== undefined) {
            queryParameters['post_excerpt'] = requestParameters.postExcerpt;
        }

        if (requestParameters.postMimeType !== undefined) {
            queryParameters['post_mime_type'] = requestParameters.postMimeType;
        }

        if (requestParameters.postModified !== undefined) {
            queryParameters['post_modified'] = (requestParameters.postModified as any).toISOString();
        }

        if (requestParameters.postModifiedGmt !== undefined) {
            queryParameters['post_modified_gmt'] = (requestParameters.postModifiedGmt as any).toISOString();
        }

        if (requestParameters.postName !== undefined) {
            queryParameters['post_name'] = requestParameters.postName;
        }

        if (requestParameters.postParent !== undefined) {
            queryParameters['post_parent'] = requestParameters.postParent;
        }

        if (requestParameters.postPassword !== undefined) {
            queryParameters['post_password'] = requestParameters.postPassword;
        }

        if (requestParameters.postStatus !== undefined) {
            queryParameters['post_status'] = requestParameters.postStatus;
        }

        if (requestParameters.postTitle !== undefined) {
            queryParameters['post_title'] = requestParameters.postTitle;
        }

        if (requestParameters.postType !== undefined) {
            queryParameters['post_type'] = requestParameters.postType;
        }

        if (requestParameters.toPing !== undefined) {
            queryParameters['to_ping'] = requestParameters.toPing;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp_posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * List Posts
     */
    async listPosts(requestParameters: ListPostsRequest): Promise<void> {
        await this.listPostsRaw(requestParameters);
    }

    /**
     * A sent email
     * List Sent Emails
     */
    async listSentEmailsRaw(requestParameters: ListSentEmailsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['email_address'] = requestParameters.emailAddress;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.response !== undefined) {
            queryParameters['response'] = requestParameters.response;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.subject !== undefined) {
            queryParameters['subject'] = requestParameters.subject;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sent_emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A sent email
     * List Sent Emails
     */
    async listSentEmails(requestParameters: ListSentEmailsRequest): Promise<void> {
        await this.listSentEmailsRaw(requestParameters);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * List Studies
     */
    async listStudiesRaw(requestParameters: ListStudiesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.analysisEndedAt !== undefined) {
            queryParameters['analysis_ended_at'] = (requestParameters.analysisEndedAt as any).toISOString();
        }

        if (requestParameters.analysisRequestedAt !== undefined) {
            queryParameters['analysis_requested_at'] = (requestParameters.analysisRequestedAt as any).toISOString();
        }

        if (requestParameters.analysisSettingsModifiedAt !== undefined) {
            queryParameters['analysis_settings_modified_at'] = (requestParameters.analysisSettingsModifiedAt as any).toISOString();
        }

        if (requestParameters.analysisStartedAt !== undefined) {
            queryParameters['analysis_started_at'] = (requestParameters.analysisStartedAt as any).toISOString();
        }

        if (requestParameters.causeVariableId !== undefined) {
            queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.commentStatus !== undefined) {
            queryParameters['comment_status'] = requestParameters.commentStatus;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.effectVariableId !== undefined) {
            queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.newestDataAt !== undefined) {
            queryParameters['newest_data_at'] = (requestParameters.newestDataAt as any).toISOString();
        }

        if (requestParameters.publishedAt !== undefined) {
            queryParameters['published_at'] = (requestParameters.publishedAt as any).toISOString();
        }

        if (requestParameters.reasonForAnalysis !== undefined) {
            queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
        }

        if (requestParameters.statistics !== undefined) {
            queryParameters['statistics'] = requestParameters.statistics;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.studyPassword !== undefined) {
            queryParameters['study_password'] = requestParameters.studyPassword;
        }

        if (requestParameters.studyStatus !== undefined) {
            queryParameters['study_status'] = requestParameters.studyStatus;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.userStudyText !== undefined) {
            queryParameters['user_study_text'] = requestParameters.userStudyText;
        }

        if (requestParameters.userTitle !== undefined) {
            queryParameters['user_title'] = requestParameters.userTitle;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * List Studies
     */
    async listStudies(requestParameters: ListStudiesRequest): Promise<void> {
        await this.listStudiesRaw(requestParameters);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * List Tracking Reminder Notifications
     */
    async listTrackingReminderNotificationsRaw(requestParameters: ListTrackingReminderNotificationsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.notifiedAt !== undefined) {
            queryParameters['notified_at'] = (requestParameters.notifiedAt as any).toISOString();
        }

        if (requestParameters.notifyAt !== undefined) {
            queryParameters['notify_at'] = (requestParameters.notifyAt as any).toISOString();
        }

        if (requestParameters.receivedAt !== undefined) {
            queryParameters['received_at'] = (requestParameters.receivedAt as any).toISOString();
        }

        if (requestParameters.trackingReminderId !== undefined) {
            queryParameters['tracking_reminder_id'] = requestParameters.trackingReminderId;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.userVariableId !== undefined) {
            queryParameters['user_variable_id'] = requestParameters.userVariableId;
        }

        if (requestParameters.variableId !== undefined) {
            queryParameters['variable_id'] = requestParameters.variableId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminder_notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * List Tracking Reminder Notifications
     */
    async listTrackingReminderNotifications(requestParameters: ListTrackingReminderNotificationsRequest): Promise<void> {
        await this.listTrackingReminderNotificationsRaw(requestParameters);
    }

    /**
     * Favorite
     * List Tracking Reminders
     */
    async listTrackingRemindersRaw(requestParameters: ListTrackingRemindersRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.defaultValue !== undefined) {
            queryParameters['default_value'] = requestParameters.defaultValue;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.imageUrl !== undefined) {
            queryParameters['image_url'] = requestParameters.imageUrl;
        }

        if (requestParameters.instructions !== undefined) {
            queryParameters['instructions'] = requestParameters.instructions;
        }

        if (requestParameters.lastTracked !== undefined) {
            queryParameters['last_tracked'] = (requestParameters.lastTracked as any).toISOString();
        }

        if (requestParameters.latestTrackingReminderNotificationNotifyAt !== undefined) {
            queryParameters['latest_tracking_reminder_notification_notify_at'] = (requestParameters.latestTrackingReminderNotificationNotifyAt as any).toISOString();
        }

        if (requestParameters.notificationBar !== undefined) {
            queryParameters['notification_bar'] = requestParameters.notificationBar;
        }

        if (requestParameters.popUp !== undefined) {
            queryParameters['pop_up'] = requestParameters.popUp;
        }

        if (requestParameters.reminderEndTime !== undefined) {
            queryParameters['reminder_end_time'] = requestParameters.reminderEndTime;
        }

        if (requestParameters.reminderFrequency !== undefined) {
            queryParameters['reminder_frequency'] = requestParameters.reminderFrequency;
        }

        if (requestParameters.reminderSound !== undefined) {
            queryParameters['reminder_sound'] = requestParameters.reminderSound;
        }

        if (requestParameters.reminderStartTime !== undefined) {
            queryParameters['reminder_start_time'] = requestParameters.reminderStartTime;
        }

        if (requestParameters.sms !== undefined) {
            queryParameters['sms'] = requestParameters.sms;
        }

        if (requestParameters.startTrackingDate !== undefined) {
            queryParameters['start_tracking_date'] = requestParameters.startTrackingDate;
        }

        if (requestParameters.stopTrackingDate !== undefined) {
            queryParameters['stop_tracking_date'] = requestParameters.stopTrackingDate;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.userVariableId !== undefined) {
            queryParameters['user_variable_id'] = requestParameters.userVariableId;
        }

        if (requestParameters.variableId !== undefined) {
            queryParameters['variable_id'] = requestParameters.variableId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Favorite
     * List Tracking Reminders
     */
    async listTrackingReminders(requestParameters: ListTrackingRemindersRequest): Promise<void> {
        await this.listTrackingRemindersRaw(requestParameters);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * List User Tags
     */
    async listUserTagsRaw(requestParameters: ListUserTagsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.conversionFactor !== undefined) {
            queryParameters['conversion_factor'] = requestParameters.conversionFactor;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.tagVariableId !== undefined) {
            queryParameters['tag_variable_id'] = requestParameters.tagVariableId;
        }

        if (requestParameters.taggedVariableId !== undefined) {
            queryParameters['tagged_variable_id'] = requestParameters.taggedVariableId;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * List User Tags
     */
    async listUserTags(requestParameters: ListUserTagsRequest): Promise<void> {
        await this.listUserTagsRaw(requestParameters);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * List User Variables
     */
    async listUserVariablesRaw(requestParameters: ListUserVariablesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.alias !== undefined) {
            queryParameters['alias'] = requestParameters.alias;
        }

        if (requestParameters.analysisEndedAt !== undefined) {
            queryParameters['analysis_ended_at'] = (requestParameters.analysisEndedAt as any).toISOString();
        }

        if (requestParameters.analysisRequestedAt !== undefined) {
            queryParameters['analysis_requested_at'] = (requestParameters.analysisRequestedAt as any).toISOString();
        }

        if (requestParameters.analysisSettingsModifiedAt !== undefined) {
            queryParameters['analysis_settings_modified_at'] = (requestParameters.analysisSettingsModifiedAt as any).toISOString();
        }

        if (requestParameters.analysisStartedAt !== undefined) {
            queryParameters['analysis_started_at'] = (requestParameters.analysisStartedAt as any).toISOString();
        }

        if (requestParameters.averageSecondsBetweenMeasurements !== undefined) {
            queryParameters['average_seconds_between_measurements'] = requestParameters.averageSecondsBetweenMeasurements;
        }

        if (requestParameters.bestCauseVariableId !== undefined) {
            queryParameters['best_cause_variable_id'] = requestParameters.bestCauseVariableId;
        }

        if (requestParameters.bestEffectVariableId !== undefined) {
            queryParameters['best_effect_variable_id'] = requestParameters.bestEffectVariableId;
        }

        if (requestParameters.bestUserCorrelationId !== undefined) {
            queryParameters['best_user_correlation_id'] = requestParameters.bestUserCorrelationId;
        }

        if (requestParameters.causeOnly !== undefined) {
            queryParameters['cause_only'] = requestParameters.causeOnly;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.combinationOperation !== undefined) {
            queryParameters['combination_operation'] = requestParameters.combinationOperation;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.defaultUnitId !== undefined) {
            queryParameters['default_unit_id'] = requestParameters.defaultUnitId;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.durationOfAction !== undefined) {
            queryParameters['duration_of_action'] = requestParameters.durationOfAction;
        }

        if (requestParameters.earliestFillingTime !== undefined) {
            queryParameters['earliest_filling_time'] = requestParameters.earliestFillingTime;
        }

        if (requestParameters.earliestMeasurementTime !== undefined) {
            queryParameters['earliest_measurement_time'] = requestParameters.earliestMeasurementTime;
        }

        if (requestParameters.earliestNonTaggedMeasurementStartAt !== undefined) {
            queryParameters['earliest_non_tagged_measurement_start_at'] = (requestParameters.earliestNonTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.earliestNonTaggedMeasurementTime !== undefined) {
            queryParameters['earliest_non_tagged_measurement_time'] = requestParameters.earliestNonTaggedMeasurementTime;
        }

        if (requestParameters.earliestSourceMeasurementStartAt !== undefined) {
            queryParameters['earliest_source_measurement_start_at'] = (requestParameters.earliestSourceMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.earliestSourceTime !== undefined) {
            queryParameters['earliest_source_time'] = requestParameters.earliestSourceTime;
        }

        if (requestParameters.earliestTaggedMeasurementStartAt !== undefined) {
            queryParameters['earliest_tagged_measurement_start_at'] = (requestParameters.earliestTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.earliestTaggedMeasurementTime !== undefined) {
            queryParameters['earliest_tagged_measurement_time'] = requestParameters.earliestTaggedMeasurementTime;
        }

        if (requestParameters.experimentEndTime !== undefined) {
            queryParameters['experiment_end_time'] = (requestParameters.experimentEndTime as any).toISOString();
        }

        if (requestParameters.experimentStartTime !== undefined) {
            queryParameters['experiment_start_time'] = (requestParameters.experimentStartTime as any).toISOString();
        }

        if (requestParameters.fillingType !== undefined) {
            queryParameters['filling_type'] = requestParameters.fillingType;
        }

        if (requestParameters.fillingValue !== undefined) {
            queryParameters['filling_value'] = requestParameters.fillingValue;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.informationalUrl !== undefined) {
            queryParameters['informational_url'] = requestParameters.informationalUrl;
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.joinWith !== undefined) {
            queryParameters['join_with'] = requestParameters.joinWith;
        }

        if (requestParameters.kurtosis !== undefined) {
            queryParameters['kurtosis'] = requestParameters.kurtosis;
        }

        if (requestParameters.lastCorrelatedAt !== undefined) {
            queryParameters['last_correlated_at'] = (requestParameters.lastCorrelatedAt as any).toISOString();
        }

        if (requestParameters.lastOriginalUnitId !== undefined) {
            queryParameters['last_original_unit_id'] = requestParameters.lastOriginalUnitId;
        }

        if (requestParameters.lastOriginalValue !== undefined) {
            queryParameters['last_original_value'] = requestParameters.lastOriginalValue;
        }

        if (requestParameters.lastProcessedDailyValue !== undefined) {
            queryParameters['last_processed_daily_value'] = requestParameters.lastProcessedDailyValue;
        }

        if (requestParameters.lastSourceId !== undefined) {
            queryParameters['last_source_id'] = requestParameters.lastSourceId;
        }

        if (requestParameters.lastSuccessfulUpdateTime !== undefined) {
            queryParameters['last_successful_update_time'] = (requestParameters.lastSuccessfulUpdateTime as any).toISOString();
        }

        if (requestParameters.lastUnitId !== undefined) {
            queryParameters['last_unit_id'] = requestParameters.lastUnitId;
        }

        if (requestParameters.lastValue !== undefined) {
            queryParameters['last_value'] = requestParameters.lastValue;
        }

        if (requestParameters.latestFillingTime !== undefined) {
            queryParameters['latest_filling_time'] = requestParameters.latestFillingTime;
        }

        if (requestParameters.latestMeasurementTime !== undefined) {
            queryParameters['latest_measurement_time'] = requestParameters.latestMeasurementTime;
        }

        if (requestParameters.latestNonTaggedMeasurementStartAt !== undefined) {
            queryParameters['latest_non_tagged_measurement_start_at'] = (requestParameters.latestNonTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.latestNonTaggedMeasurementTime !== undefined) {
            queryParameters['latest_non_tagged_measurement_time'] = requestParameters.latestNonTaggedMeasurementTime;
        }

        if (requestParameters.latestSourceMeasurementStartAt !== undefined) {
            queryParameters['latest_source_measurement_start_at'] = (requestParameters.latestSourceMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.latestSourceTime !== undefined) {
            queryParameters['latest_source_time'] = requestParameters.latestSourceTime;
        }

        if (requestParameters.latestTaggedMeasurementStartAt !== undefined) {
            queryParameters['latest_tagged_measurement_start_at'] = (requestParameters.latestTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.latestTaggedMeasurementTime !== undefined) {
            queryParameters['latest_tagged_measurement_time'] = requestParameters.latestTaggedMeasurementTime;
        }

        if (requestParameters.latitude !== undefined) {
            queryParameters['latitude'] = requestParameters.latitude;
        }

        if (requestParameters.location !== undefined) {
            queryParameters['location'] = requestParameters.location;
        }

        if (requestParameters.longitude !== undefined) {
            queryParameters['longitude'] = requestParameters.longitude;
        }

        if (requestParameters.maximumAllowedValue !== undefined) {
            queryParameters['maximum_allowed_value'] = requestParameters.maximumAllowedValue;
        }

        if (requestParameters.maximumRecordedValue !== undefined) {
            queryParameters['maximum_recorded_value'] = requestParameters.maximumRecordedValue;
        }

        if (requestParameters.mean !== undefined) {
            queryParameters['mean'] = requestParameters.mean;
        }

        if (requestParameters.measurementsAtLastAnalysis !== undefined) {
            queryParameters['measurements_at_last_analysis'] = requestParameters.measurementsAtLastAnalysis;
        }

        if (requestParameters.median !== undefined) {
            queryParameters['median'] = requestParameters.median;
        }

        if (requestParameters.medianSecondsBetweenMeasurements !== undefined) {
            queryParameters['median_seconds_between_measurements'] = requestParameters.medianSecondsBetweenMeasurements;
        }

        if (requestParameters.minimumAllowedSecondsBetweenMeasurements !== undefined) {
            queryParameters['minimum_allowed_seconds_between_measurements'] = requestParameters.minimumAllowedSecondsBetweenMeasurements;
        }

        if (requestParameters.minimumAllowedValue !== undefined) {
            queryParameters['minimum_allowed_value'] = requestParameters.minimumAllowedValue;
        }

        if (requestParameters.minimumRecordedValue !== undefined) {
            queryParameters['minimum_recorded_value'] = requestParameters.minimumRecordedValue;
        }

        if (requestParameters.mostCommonConnectorId !== undefined) {
            queryParameters['most_common_connector_id'] = requestParameters.mostCommonConnectorId;
        }

        if (requestParameters.mostCommonOriginalUnitId !== undefined) {
            queryParameters['most_common_original_unit_id'] = requestParameters.mostCommonOriginalUnitId;
        }

        if (requestParameters.mostCommonSourceName !== undefined) {
            queryParameters['most_common_source_name'] = requestParameters.mostCommonSourceName;
        }

        if (requestParameters.mostCommonValue !== undefined) {
            queryParameters['most_common_value'] = requestParameters.mostCommonValue;
        }

        if (requestParameters.newestDataAt !== undefined) {
            queryParameters['newest_data_at'] = (requestParameters.newestDataAt as any).toISOString();
        }

        if (requestParameters.numberOfChanges !== undefined) {
            queryParameters['number_of_changes'] = requestParameters.numberOfChanges;
        }

        if (requestParameters.numberOfCorrelations !== undefined) {
            queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
        }

        if (requestParameters.numberOfMeasurementsWithTagsAtLastCorrelation !== undefined) {
            queryParameters['number_of_measurements_with_tags_at_last_correlation'] = requestParameters.numberOfMeasurementsWithTagsAtLastCorrelation;
        }

        if (requestParameters.numberOfProcessedDailyMeasurements !== undefined) {
            queryParameters['number_of_processed_daily_measurements'] = requestParameters.numberOfProcessedDailyMeasurements;
        }

        if (requestParameters.numberOfRawMeasurements !== undefined) {
            queryParameters['number_of_raw_measurements'] = requestParameters.numberOfRawMeasurements;
        }

        if (requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren !== undefined) {
            queryParameters['number_of_raw_measurements_with_tags_joins_children'] = requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren;
        }

        if (requestParameters.numberOfSoftDeletedMeasurements !== undefined) {
            queryParameters['number_of_soft_deleted_measurements'] = requestParameters.numberOfSoftDeletedMeasurements;
        }

        if (requestParameters.numberOfTrackingReminders !== undefined) {
            queryParameters['number_of_tracking_reminders'] = requestParameters.numberOfTrackingReminders;
        }

        if (requestParameters.numberOfUniqueDailyValues !== undefined) {
            queryParameters['number_of_unique_daily_values'] = requestParameters.numberOfUniqueDailyValues;
        }

        if (requestParameters.numberOfUniqueValues !== undefined) {
            queryParameters['number_of_unique_values'] = requestParameters.numberOfUniqueValues;
        }

        if (requestParameters.numberOfUserCorrelationsAsCause !== undefined) {
            queryParameters['number_of_user_correlations_as_cause'] = requestParameters.numberOfUserCorrelationsAsCause;
        }

        if (requestParameters.numberOfUserCorrelationsAsEffect !== undefined) {
            queryParameters['number_of_user_correlations_as_effect'] = requestParameters.numberOfUserCorrelationsAsEffect;
        }

        if (requestParameters.onsetDelay !== undefined) {
            queryParameters['onset_delay'] = requestParameters.onsetDelay;
        }

        if (requestParameters.optimalValueMessage !== undefined) {
            queryParameters['optimal_value_message'] = requestParameters.optimalValueMessage;
        }

        if (requestParameters.outcome !== undefined) {
            queryParameters['outcome'] = requestParameters.outcome;
        }

        if (requestParameters.outcomeOfInterest !== undefined) {
            queryParameters['outcome_of_interest'] = requestParameters.outcomeOfInterest;
        }

        if (requestParameters.parentId !== undefined) {
            queryParameters['parent_id'] = requestParameters.parentId;
        }

        if (requestParameters.predictorOfInterest !== undefined) {
            queryParameters['predictor_of_interest'] = requestParameters.predictorOfInterest;
        }

        if (requestParameters._public !== undefined) {
            queryParameters['public'] = requestParameters._public;
        }

        if (requestParameters.reasonForAnalysis !== undefined) {
            queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
        }

        if (requestParameters.secondToLastValue !== undefined) {
            queryParameters['second_to_last_value'] = requestParameters.secondToLastValue;
        }

        if (requestParameters.shareUserMeasurements !== undefined) {
            queryParameters['share_user_measurements'] = requestParameters.shareUserMeasurements;
        }

        if (requestParameters.skewness !== undefined) {
            queryParameters['skewness'] = requestParameters.skewness;
        }

        if (requestParameters.standardDeviation !== undefined) {
            queryParameters['standard_deviation'] = requestParameters.standardDeviation;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.thirdToLastValue !== undefined) {
            queryParameters['third_to_last_value'] = requestParameters.thirdToLastValue;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.userMaximumAllowedDailyValue !== undefined) {
            queryParameters['user_maximum_allowed_daily_value'] = requestParameters.userMaximumAllowedDailyValue;
        }

        if (requestParameters.userMinimumAllowedDailyValue !== undefined) {
            queryParameters['user_minimum_allowed_daily_value'] = requestParameters.userMinimumAllowedDailyValue;
        }

        if (requestParameters.userMinimumAllowedNonZeroValue !== undefined) {
            queryParameters['user_minimum_allowed_non_zero_value'] = requestParameters.userMinimumAllowedNonZeroValue;
        }

        if (requestParameters.valence !== undefined) {
            queryParameters['valence'] = requestParameters.valence;
        }

        if (requestParameters.variableCategoryId !== undefined) {
            queryParameters['variable_category_id'] = requestParameters.variableCategoryId;
        }

        if (requestParameters.variableId !== undefined) {
            queryParameters['variable_id'] = requestParameters.variableId;
        }

        if (requestParameters.variance !== undefined) {
            queryParameters['variance'] = requestParameters.variance;
        }

        if (requestParameters.wikipediaTitle !== undefined) {
            queryParameters['wikipedia_title'] = requestParameters.wikipediaTitle;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_variables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * List User Variables
     */
    async listUserVariables(requestParameters: ListUserVariablesRequest): Promise<void> {
        await this.listUserVariablesRaw(requestParameters);
    }

    /**
     * Overview of discoveries, research from \'s data
     * List Users
     */
    async listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.iD !== undefined) {
            queryParameters['ID'] = requestParameters.iD;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.analysisEndedAt !== undefined) {
            queryParameters['analysis_ended_at'] = (requestParameters.analysisEndedAt as any).toISOString();
        }

        if (requestParameters.analysisRequestedAt !== undefined) {
            queryParameters['analysis_requested_at'] = (requestParameters.analysisRequestedAt as any).toISOString();
        }

        if (requestParameters.analysisSettingsModifiedAt !== undefined) {
            queryParameters['analysis_settings_modified_at'] = (requestParameters.analysisSettingsModifiedAt as any).toISOString();
        }

        if (requestParameters.analysisStartedAt !== undefined) {
            queryParameters['analysis_started_at'] = (requestParameters.analysisStartedAt as any).toISOString();
        }

        if (requestParameters.avatarImage !== undefined) {
            queryParameters['avatar_image'] = requestParameters.avatarImage;
        }

        if (requestParameters.birthday !== undefined) {
            queryParameters['birthday'] = requestParameters.birthday;
        }

        if (requestParameters.cardBrand !== undefined) {
            queryParameters['card_brand'] = requestParameters.cardBrand;
        }

        if (requestParameters.cardLastFour !== undefined) {
            queryParameters['card_last_four'] = requestParameters.cardLastFour;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.combineNotifications !== undefined) {
            queryParameters['combine_notifications'] = requestParameters.combineNotifications;
        }

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        if (requestParameters.coverPhoto !== undefined) {
            queryParameters['cover_photo'] = requestParameters.coverPhoto;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.displayName !== undefined) {
            queryParameters['display_name'] = requestParameters.displayName;
        }

        if (requestParameters.earliestReminderTime !== undefined) {
            queryParameters['earliest_reminder_time'] = requestParameters.earliestReminderTime;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['first_name'] = requestParameters.firstName;
        }

        if (requestParameters.gender !== undefined) {
            queryParameters['gender'] = requestParameters.gender;
        }

        if (requestParameters.getPreviewBuilds !== undefined) {
            queryParameters['get_preview_builds'] = requestParameters.getPreviewBuilds;
        }

        if (requestParameters.hasAndroidApp !== undefined) {
            queryParameters['has_android_app'] = requestParameters.hasAndroidApp;
        }

        if (requestParameters.hasChromeExtension !== undefined) {
            queryParameters['has_chrome_extension'] = requestParameters.hasChromeExtension;
        }

        if (requestParameters.hasIosApp !== undefined) {
            queryParameters['has_ios_app'] = requestParameters.hasIosApp;
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.lastCorrelationAt !== undefined) {
            queryParameters['last_correlation_at'] = (requestParameters.lastCorrelationAt as any).toISOString();
        }

        if (requestParameters.lastEmailAt !== undefined) {
            queryParameters['last_email_at'] = (requestParameters.lastEmailAt as any).toISOString();
        }

        if (requestParameters.lastFour !== undefined) {
            queryParameters['last_four'] = requestParameters.lastFour;
        }

        if (requestParameters.lastLoginAt !== undefined) {
            queryParameters['last_login_at'] = (requestParameters.lastLoginAt as any).toISOString();
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['last_name'] = requestParameters.lastName;
        }

        if (requestParameters.lastPushAt !== undefined) {
            queryParameters['last_push_at'] = (requestParameters.lastPushAt as any).toISOString();
        }

        if (requestParameters.lastSmsTrackingReminderNotificationId !== undefined) {
            queryParameters['last_sms_tracking_reminder_notification_id'] = requestParameters.lastSmsTrackingReminderNotificationId;
        }

        if (requestParameters.latestReminderTime !== undefined) {
            queryParameters['latest_reminder_time'] = requestParameters.latestReminderTime;
        }

        if (requestParameters.newestDataAt !== undefined) {
            queryParameters['newest_data_at'] = (requestParameters.newestDataAt as any).toISOString();
        }

        if (requestParameters.numberOfApplications !== undefined) {
            queryParameters['number_of_applications'] = requestParameters.numberOfApplications;
        }

        if (requestParameters.numberOfButtonClicks !== undefined) {
            queryParameters['number_of_button_clicks'] = requestParameters.numberOfButtonClicks;
        }

        if (requestParameters.numberOfCollaborators !== undefined) {
            queryParameters['number_of_collaborators'] = requestParameters.numberOfCollaborators;
        }

        if (requestParameters.numberOfConnections !== undefined) {
            queryParameters['number_of_connections'] = requestParameters.numberOfConnections;
        }

        if (requestParameters.numberOfConnectorImports !== undefined) {
            queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
        }

        if (requestParameters.numberOfConnectorRequests !== undefined) {
            queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
        }

        if (requestParameters.numberOfCorrelations !== undefined) {
            queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
        }

        if (requestParameters.numberOfOauthAccessTokens !== undefined) {
            queryParameters['number_of_oauth_access_tokens'] = requestParameters.numberOfOauthAccessTokens;
        }

        if (requestParameters.numberOfOauthAuthorizationCodes !== undefined) {
            queryParameters['number_of_oauth_authorization_codes'] = requestParameters.numberOfOauthAuthorizationCodes;
        }

        if (requestParameters.numberOfOauthClients !== undefined) {
            queryParameters['number_of_oauth_clients'] = requestParameters.numberOfOauthClients;
        }

        if (requestParameters.numberOfOauthRefreshTokens !== undefined) {
            queryParameters['number_of_oauth_refresh_tokens'] = requestParameters.numberOfOauthRefreshTokens;
        }

        if (requestParameters.numberOfRawMeasurementsWithTags !== undefined) {
            queryParameters['number_of_raw_measurements_with_tags'] = requestParameters.numberOfRawMeasurementsWithTags;
        }

        if (requestParameters.numberOfRawMeasurementsWithTagsAtLastCorrelation !== undefined) {
            queryParameters['number_of_raw_measurements_with_tags_at_last_correlation'] = requestParameters.numberOfRawMeasurementsWithTagsAtLastCorrelation;
        }

        if (requestParameters.numberOfStudies !== undefined) {
            queryParameters['number_of_studies'] = requestParameters.numberOfStudies;
        }

        if (requestParameters.numberOfTrackingReminders !== undefined) {
            queryParameters['number_of_tracking_reminders'] = requestParameters.numberOfTrackingReminders;
        }

        if (requestParameters.numberOfUserVariables !== undefined) {
            queryParameters['number_of_user_variables'] = requestParameters.numberOfUserVariables;
        }

        if (requestParameters.numberOfVotes !== undefined) {
            queryParameters['number_of_votes'] = requestParameters.numberOfVotes;
        }

        if (requestParameters.oldUser !== undefined) {
            queryParameters['old_user'] = requestParameters.oldUser;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phone_number'] = requestParameters.phoneNumber;
        }

        if (requestParameters.phoneVerificationCode !== undefined) {
            queryParameters['phone_verification_code'] = requestParameters.phoneVerificationCode;
        }

        if (requestParameters.primaryOutcomeVariableId !== undefined) {
            queryParameters['primary_outcome_variable_id'] = requestParameters.primaryOutcomeVariableId;
        }

        if (requestParameters.providerId !== undefined) {
            queryParameters['provider_id'] = requestParameters.providerId;
        }

        if (requestParameters.providerToken !== undefined) {
            queryParameters['provider_token'] = requestParameters.providerToken;
        }

        if (requestParameters.pushNotificationsEnabled !== undefined) {
            queryParameters['push_notifications_enabled'] = requestParameters.pushNotificationsEnabled;
        }

        if (requestParameters.reasonForAnalysis !== undefined) {
            queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
        }

        if (requestParameters.referrerUserId !== undefined) {
            queryParameters['referrer_user_id'] = requestParameters.referrerUserId;
        }

        if (requestParameters.refreshToken !== undefined) {
            queryParameters['refresh_token'] = requestParameters.refreshToken;
        }

        if (requestParameters.regProvider !== undefined) {
            queryParameters['reg_provider'] = requestParameters.regProvider;
        }

        if (requestParameters.rememberToken !== undefined) {
            queryParameters['remember_token'] = requestParameters.rememberToken;
        }

        if (requestParameters.sendPredictorEmails !== undefined) {
            queryParameters['send_predictor_emails'] = requestParameters.sendPredictorEmails;
        }

        if (requestParameters.sendReminderNotificationEmails !== undefined) {
            queryParameters['send_reminder_notification_emails'] = requestParameters.sendReminderNotificationEmails;
        }

        if (requestParameters.smsNotificationsEnabled !== undefined) {
            queryParameters['sms_notifications_enabled'] = requestParameters.smsNotificationsEnabled;
        }

        if (requestParameters.spam !== undefined) {
            queryParameters['spam'] = requestParameters.spam;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.stripeActive !== undefined) {
            queryParameters['stripe_active'] = requestParameters.stripeActive;
        }

        if (requestParameters.stripeId !== undefined) {
            queryParameters['stripe_id'] = requestParameters.stripeId;
        }

        if (requestParameters.stripePlan !== undefined) {
            queryParameters['stripe_plan'] = requestParameters.stripePlan;
        }

        if (requestParameters.stripeSubscription !== undefined) {
            queryParameters['stripe_subscription'] = requestParameters.stripeSubscription;
        }

        if (requestParameters.subscriptionEndsAt !== undefined) {
            queryParameters['subscription_ends_at'] = (requestParameters.subscriptionEndsAt as any).toISOString();
        }

        if (requestParameters.subscriptionProvider !== undefined) {
            queryParameters['subscription_provider'] = requestParameters.subscriptionProvider;
        }

        if (requestParameters.tagLine !== undefined) {
            queryParameters['tag_line'] = requestParameters.tagLine;
        }

        if (requestParameters.timeZoneOffset !== undefined) {
            queryParameters['time_zone_offset'] = requestParameters.timeZoneOffset;
        }

        if (requestParameters.timezone !== undefined) {
            queryParameters['timezone'] = requestParameters.timezone;
        }

        if (requestParameters.trackLocation !== undefined) {
            queryParameters['track_location'] = requestParameters.trackLocation;
        }

        if (requestParameters.trialEndsAt !== undefined) {
            queryParameters['trial_ends_at'] = (requestParameters.trialEndsAt as any).toISOString();
        }

        if (requestParameters.unsubscribed !== undefined) {
            queryParameters['unsubscribed'] = requestParameters.unsubscribed;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userActivationKey !== undefined) {
            queryParameters['user_activation_key'] = requestParameters.userActivationKey;
        }

        if (requestParameters.userEmail !== undefined) {
            queryParameters['user_email'] = requestParameters.userEmail;
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.userLogin !== undefined) {
            queryParameters['user_login'] = requestParameters.userLogin;
        }

        if (requestParameters.userNicename !== undefined) {
            queryParameters['user_nicename'] = requestParameters.userNicename;
        }

        if (requestParameters.userPass !== undefined) {
            queryParameters['user_pass'] = requestParameters.userPass;
        }

        if (requestParameters.userRegistered !== undefined) {
            queryParameters['user_registered'] = (requestParameters.userRegistered as any).toISOString();
        }

        if (requestParameters.userStatus !== undefined) {
            queryParameters['user_status'] = requestParameters.userStatus;
        }

        if (requestParameters.userUrl !== undefined) {
            queryParameters['user_url'] = requestParameters.userUrl;
        }

        if (requestParameters.verified !== undefined) {
            queryParameters['verified'] = requestParameters.verified;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zip_code'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overview of discoveries, research from \'s data
     * List Users
     */
    async listUsers(requestParameters: ListUsersRequest): Promise<void> {
        await this.listUsersRaw(requestParameters);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * List Variable Categories
     */
    async listVariableCategoriesRaw(requestParameters: ListVariableCategoriesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.averageSecondsBetweenMeasurements !== undefined) {
            queryParameters['average_seconds_between_measurements'] = requestParameters.averageSecondsBetweenMeasurements;
        }

        if (requestParameters.causeOnly !== undefined) {
            queryParameters['cause_only'] = requestParameters.causeOnly;
        }

        if (requestParameters.combinationOperation !== undefined) {
            queryParameters['combination_operation'] = requestParameters.combinationOperation;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.defaultUnitId !== undefined) {
            queryParameters['default_unit_id'] = requestParameters.defaultUnitId;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.durationOfAction !== undefined) {
            queryParameters['duration_of_action'] = requestParameters.durationOfAction;
        }

        if (requestParameters.fillingType !== undefined) {
            queryParameters['filling_type'] = requestParameters.fillingType;
        }

        if (requestParameters.fillingValue !== undefined) {
            queryParameters['filling_value'] = requestParameters.fillingValue;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.imageUrl !== undefined) {
            queryParameters['image_url'] = requestParameters.imageUrl;
        }

        if (requestParameters.manualTracking !== undefined) {
            queryParameters['manual_tracking'] = requestParameters.manualTracking;
        }

        if (requestParameters.maximumAllowedValue !== undefined) {
            queryParameters['maximum_allowed_value'] = requestParameters.maximumAllowedValue;
        }

        if (requestParameters.medianSecondsBetweenMeasurements !== undefined) {
            queryParameters['median_seconds_between_measurements'] = requestParameters.medianSecondsBetweenMeasurements;
        }

        if (requestParameters.minimumAllowedSecondsBetweenMeasurements !== undefined) {
            queryParameters['minimum_allowed_seconds_between_measurements'] = requestParameters.minimumAllowedSecondsBetweenMeasurements;
        }

        if (requestParameters.minimumAllowedValue !== undefined) {
            queryParameters['minimum_allowed_value'] = requestParameters.minimumAllowedValue;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.numberOfOutcomeCaseStudies !== undefined) {
            queryParameters['number_of_outcome_case_studies'] = requestParameters.numberOfOutcomeCaseStudies;
        }

        if (requestParameters.numberOfOutcomePopulationStudies !== undefined) {
            queryParameters['number_of_outcome_population_studies'] = requestParameters.numberOfOutcomePopulationStudies;
        }

        if (requestParameters.numberOfPredictorCaseStudies !== undefined) {
            queryParameters['number_of_predictor_case_studies'] = requestParameters.numberOfPredictorCaseStudies;
        }

        if (requestParameters.numberOfPredictorPopulationStudies !== undefined) {
            queryParameters['number_of_predictor_population_studies'] = requestParameters.numberOfPredictorPopulationStudies;
        }

        if (requestParameters.onsetDelay !== undefined) {
            queryParameters['onset_delay'] = requestParameters.onsetDelay;
        }

        if (requestParameters.outcome !== undefined) {
            queryParameters['outcome'] = requestParameters.outcome;
        }

        if (requestParameters._public !== undefined) {
            queryParameters['public'] = requestParameters._public;
        }

        if (requestParameters.updated !== undefined) {
            queryParameters['updated'] = requestParameters.updated;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * List Variable Categories
     */
    async listVariableCategories(requestParameters: ListVariableCategoriesRequest): Promise<void> {
        await this.listVariableCategoriesRaw(requestParameters);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * List Variable User Sources
     */
    async listVariableUserSourcesRaw(requestParameters: ListVariableUserSourcesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.dataSourceName !== undefined) {
            queryParameters['data_source_name'] = requestParameters.dataSourceName;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.earliestMeasurementStartAt !== undefined) {
            queryParameters['earliest_measurement_start_at'] = (requestParameters.earliestMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.earliestMeasurementTime !== undefined) {
            queryParameters['earliest_measurement_time'] = requestParameters.earliestMeasurementTime;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.latestMeasurementStartAt !== undefined) {
            queryParameters['latest_measurement_start_at'] = (requestParameters.latestMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.latestMeasurementTime !== undefined) {
            queryParameters['latest_measurement_time'] = requestParameters.latestMeasurementTime;
        }

        if (requestParameters.numberOfRawMeasurements !== undefined) {
            queryParameters['number_of_raw_measurements'] = requestParameters.numberOfRawMeasurements;
        }

        if (requestParameters.sourceId !== undefined) {
            queryParameters['source_id'] = requestParameters.sourceId;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.userVariableId !== undefined) {
            queryParameters['user_variable_id'] = requestParameters.userVariableId;
        }

        if (requestParameters.variableId !== undefined) {
            queryParameters['variable_id'] = requestParameters.variableId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_user_sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * List Variable User Sources
     */
    async listVariableUserSources(requestParameters: ListVariableUserSourcesRequest): Promise<void> {
        await this.listVariableUserSourcesRaw(requestParameters);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * List Variables
     */
    async listVariablesRaw(requestParameters: ListVariablesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.analysisEndedAt !== undefined) {
            queryParameters['analysis_ended_at'] = (requestParameters.analysisEndedAt as any).toISOString();
        }

        if (requestParameters.analysisRequestedAt !== undefined) {
            queryParameters['analysis_requested_at'] = (requestParameters.analysisRequestedAt as any).toISOString();
        }

        if (requestParameters.analysisSettingsModifiedAt !== undefined) {
            queryParameters['analysis_settings_modified_at'] = (requestParameters.analysisSettingsModifiedAt as any).toISOString();
        }

        if (requestParameters.analysisStartedAt !== undefined) {
            queryParameters['analysis_started_at'] = (requestParameters.analysisStartedAt as any).toISOString();
        }

        if (requestParameters.averageSecondsBetweenMeasurements !== undefined) {
            queryParameters['average_seconds_between_measurements'] = requestParameters.averageSecondsBetweenMeasurements;
        }

        if (requestParameters.bestAggregateCorrelationId !== undefined) {
            queryParameters['best_aggregate_correlation_id'] = requestParameters.bestAggregateCorrelationId;
        }

        if (requestParameters.bestCauseVariableId !== undefined) {
            queryParameters['best_cause_variable_id'] = requestParameters.bestCauseVariableId;
        }

        if (requestParameters.bestEffectVariableId !== undefined) {
            queryParameters['best_effect_variable_id'] = requestParameters.bestEffectVariableId;
        }

        if (requestParameters.brandName !== undefined) {
            queryParameters['brand_name'] = requestParameters.brandName;
        }

        if (requestParameters.causeOnly !== undefined) {
            queryParameters['cause_only'] = requestParameters.causeOnly;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.combinationOperation !== undefined) {
            queryParameters['combination_operation'] = requestParameters.combinationOperation;
        }

        if (requestParameters.commonAlias !== undefined) {
            queryParameters['common_alias'] = requestParameters.commonAlias;
        }

        if (requestParameters.commonMaximumAllowedDailyValue !== undefined) {
            queryParameters['common_maximum_allowed_daily_value'] = requestParameters.commonMaximumAllowedDailyValue;
        }

        if (requestParameters.commonMinimumAllowedDailyValue !== undefined) {
            queryParameters['common_minimum_allowed_daily_value'] = requestParameters.commonMinimumAllowedDailyValue;
        }

        if (requestParameters.commonMinimumAllowedNonZeroValue !== undefined) {
            queryParameters['common_minimum_allowed_non_zero_value'] = requestParameters.commonMinimumAllowedNonZeroValue;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.creatorUserId !== undefined) {
            queryParameters['creator_user_id'] = requestParameters.creatorUserId;
        }

        if (requestParameters.defaultUnitId !== undefined) {
            queryParameters['default_unit_id'] = requestParameters.defaultUnitId;
        }

        if (requestParameters.defaultValue !== undefined) {
            queryParameters['default_value'] = requestParameters.defaultValue;
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.durationOfAction !== undefined) {
            queryParameters['duration_of_action'] = requestParameters.durationOfAction;
        }

        if (requestParameters.earliestMeasurementTime !== undefined) {
            queryParameters['earliest_measurement_time'] = requestParameters.earliestMeasurementTime;
        }

        if (requestParameters.earliestNonTaggedMeasurementStartAt !== undefined) {
            queryParameters['earliest_non_tagged_measurement_start_at'] = (requestParameters.earliestNonTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.earliestNonTaggedMeasurementTime !== undefined) {
            queryParameters['earliest_non_tagged_measurement_time'] = requestParameters.earliestNonTaggedMeasurementTime;
        }

        if (requestParameters.earliestTaggedMeasurementStartAt !== undefined) {
            queryParameters['earliest_tagged_measurement_start_at'] = (requestParameters.earliestTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.earliestTaggedMeasurementTime !== undefined) {
            queryParameters['earliest_tagged_measurement_time'] = requestParameters.earliestTaggedMeasurementTime;
        }

        if (requestParameters.fillingType !== undefined) {
            queryParameters['filling_type'] = requestParameters.fillingType;
        }

        if (requestParameters.fillingValue !== undefined) {
            queryParameters['filling_value'] = requestParameters.fillingValue;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.imageUrl !== undefined) {
            queryParameters['image_url'] = requestParameters.imageUrl;
        }

        if (requestParameters.informationalUrl !== undefined) {
            queryParameters['informational_url'] = requestParameters.informationalUrl;
        }

        if (requestParameters.internalErrorMessage !== undefined) {
            queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
        }

        if (requestParameters.ionIcon !== undefined) {
            queryParameters['ion_icon'] = requestParameters.ionIcon;
        }

        if (requestParameters.kurtosis !== undefined) {
            queryParameters['kurtosis'] = requestParameters.kurtosis;
        }

        if (requestParameters.lastSuccessfulUpdateTime !== undefined) {
            queryParameters['last_successful_update_time'] = (requestParameters.lastSuccessfulUpdateTime as any).toISOString();
        }

        if (requestParameters.latestMeasurementTime !== undefined) {
            queryParameters['latest_measurement_time'] = requestParameters.latestMeasurementTime;
        }

        if (requestParameters.latestNonTaggedMeasurementStartAt !== undefined) {
            queryParameters['latest_non_tagged_measurement_start_at'] = (requestParameters.latestNonTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.latestNonTaggedMeasurementTime !== undefined) {
            queryParameters['latest_non_tagged_measurement_time'] = requestParameters.latestNonTaggedMeasurementTime;
        }

        if (requestParameters.latestTaggedMeasurementStartAt !== undefined) {
            queryParameters['latest_tagged_measurement_start_at'] = (requestParameters.latestTaggedMeasurementStartAt as any).toISOString();
        }

        if (requestParameters.latestTaggedMeasurementTime !== undefined) {
            queryParameters['latest_tagged_measurement_time'] = requestParameters.latestTaggedMeasurementTime;
        }

        if (requestParameters.manualTracking !== undefined) {
            queryParameters['manual_tracking'] = requestParameters.manualTracking;
        }

        if (requestParameters.maximumAllowedValue !== undefined) {
            queryParameters['maximum_allowed_value'] = requestParameters.maximumAllowedValue;
        }

        if (requestParameters.maximumRecordedValue !== undefined) {
            queryParameters['maximum_recorded_value'] = requestParameters.maximumRecordedValue;
        }

        if (requestParameters.mean !== undefined) {
            queryParameters['mean'] = requestParameters.mean;
        }

        if (requestParameters.median !== undefined) {
            queryParameters['median'] = requestParameters.median;
        }

        if (requestParameters.medianSecondsBetweenMeasurements !== undefined) {
            queryParameters['median_seconds_between_measurements'] = requestParameters.medianSecondsBetweenMeasurements;
        }

        if (requestParameters.minimumAllowedSecondsBetweenMeasurements !== undefined) {
            queryParameters['minimum_allowed_seconds_between_measurements'] = requestParameters.minimumAllowedSecondsBetweenMeasurements;
        }

        if (requestParameters.minimumAllowedValue !== undefined) {
            queryParameters['minimum_allowed_value'] = requestParameters.minimumAllowedValue;
        }

        if (requestParameters.minimumRecordedValue !== undefined) {
            queryParameters['minimum_recorded_value'] = requestParameters.minimumRecordedValue;
        }

        if (requestParameters.mostCommonConnectorId !== undefined) {
            queryParameters['most_common_connector_id'] = requestParameters.mostCommonConnectorId;
        }

        if (requestParameters.mostCommonOriginalUnitId !== undefined) {
            queryParameters['most_common_original_unit_id'] = requestParameters.mostCommonOriginalUnitId;
        }

        if (requestParameters.mostCommonSourceName !== undefined) {
            queryParameters['most_common_source_name'] = requestParameters.mostCommonSourceName;
        }

        if (requestParameters.mostCommonValue !== undefined) {
            queryParameters['most_common_value'] = requestParameters.mostCommonValue;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.newestDataAt !== undefined) {
            queryParameters['newest_data_at'] = (requestParameters.newestDataAt as any).toISOString();
        }

        if (requestParameters.numberCommonTaggedBy !== undefined) {
            queryParameters['number_common_tagged_by'] = requestParameters.numberCommonTaggedBy;
        }

        if (requestParameters.numberOfAggregateCorrelationsAsCause !== undefined) {
            queryParameters['number_of_aggregate_correlations_as_cause'] = requestParameters.numberOfAggregateCorrelationsAsCause;
        }

        if (requestParameters.numberOfAggregateCorrelationsAsEffect !== undefined) {
            queryParameters['number_of_aggregate_correlations_as_effect'] = requestParameters.numberOfAggregateCorrelationsAsEffect;
        }

        if (requestParameters.numberOfApplicationsWhereOutcomeVariable !== undefined) {
            queryParameters['number_of_applications_where_outcome_variable'] = requestParameters.numberOfApplicationsWhereOutcomeVariable;
        }

        if (requestParameters.numberOfApplicationsWherePredictorVariable !== undefined) {
            queryParameters['number_of_applications_where_predictor_variable'] = requestParameters.numberOfApplicationsWherePredictorVariable;
        }

        if (requestParameters.numberOfCommonTags !== undefined) {
            queryParameters['number_of_common_tags'] = requestParameters.numberOfCommonTags;
        }

        if (requestParameters.numberOfCommonTagsWhereTagVariable !== undefined) {
            queryParameters['number_of_common_tags_where_tag_variable'] = requestParameters.numberOfCommonTagsWhereTagVariable;
        }

        if (requestParameters.numberOfCommonTagsWhereTaggedVariable !== undefined) {
            queryParameters['number_of_common_tags_where_tagged_variable'] = requestParameters.numberOfCommonTagsWhereTaggedVariable;
        }

        if (requestParameters.numberOfOutcomeCaseStudies !== undefined) {
            queryParameters['number_of_outcome_case_studies'] = requestParameters.numberOfOutcomeCaseStudies;
        }

        if (requestParameters.numberOfOutcomePopulationStudies !== undefined) {
            queryParameters['number_of_outcome_population_studies'] = requestParameters.numberOfOutcomePopulationStudies;
        }

        if (requestParameters.numberOfPredictorPopulationStudies !== undefined) {
            queryParameters['number_of_predictor_population_studies'] = requestParameters.numberOfPredictorPopulationStudies;
        }

        if (requestParameters.numberOfRawMeasurements !== undefined) {
            queryParameters['number_of_raw_measurements'] = requestParameters.numberOfRawMeasurements;
        }

        if (requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren !== undefined) {
            queryParameters['number_of_raw_measurements_with_tags_joins_children'] = requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren;
        }

        if (requestParameters.numberOfSoftDeletedMeasurements !== undefined) {
            queryParameters['number_of_soft_deleted_measurements'] = requestParameters.numberOfSoftDeletedMeasurements;
        }

        if (requestParameters.numberOfTrackingReminders !== undefined) {
            queryParameters['number_of_tracking_reminders'] = requestParameters.numberOfTrackingReminders;
        }

        if (requestParameters.numberOfUniqueValues !== undefined) {
            queryParameters['number_of_unique_values'] = requestParameters.numberOfUniqueValues;
        }

        if (requestParameters.numberOfUserVariables !== undefined) {
            queryParameters['number_of_user_variables'] = requestParameters.numberOfUserVariables;
        }

        if (requestParameters.onsetDelay !== undefined) {
            queryParameters['onset_delay'] = requestParameters.onsetDelay;
        }

        if (requestParameters.optimalValueMessage !== undefined) {
            queryParameters['optimal_value_message'] = requestParameters.optimalValueMessage;
        }

        if (requestParameters.outcome !== undefined) {
            queryParameters['outcome'] = requestParameters.outcome;
        }

        if (requestParameters.parentId !== undefined) {
            queryParameters['parent_id'] = requestParameters.parentId;
        }

        if (requestParameters.price !== undefined) {
            queryParameters['price'] = requestParameters.price;
        }

        if (requestParameters.productUrl !== undefined) {
            queryParameters['product_url'] = requestParameters.productUrl;
        }

        if (requestParameters._public !== undefined) {
            queryParameters['public'] = requestParameters._public;
        }

        if (requestParameters.reasonForAnalysis !== undefined) {
            queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
        }

        if (requestParameters.secondMostCommonValue !== undefined) {
            queryParameters['second_most_common_value'] = requestParameters.secondMostCommonValue;
        }

        if (requestParameters.skewness !== undefined) {
            queryParameters['skewness'] = requestParameters.skewness;
        }

        if (requestParameters.standardDeviation !== undefined) {
            queryParameters['standard_deviation'] = requestParameters.standardDeviation;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.thirdMostCommonValue !== undefined) {
            queryParameters['third_most_common_value'] = requestParameters.thirdMostCommonValue;
        }

        if (requestParameters.upc12 !== undefined) {
            queryParameters['upc_12'] = requestParameters.upc12;
        }

        if (requestParameters.upc14 !== undefined) {
            queryParameters['upc_14'] = requestParameters.upc14;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userErrorMessage !== undefined) {
            queryParameters['user_error_message'] = requestParameters.userErrorMessage;
        }

        if (requestParameters.valence !== undefined) {
            queryParameters['valence'] = requestParameters.valence;
        }

        if (requestParameters.variableCategoryId !== undefined) {
            queryParameters['variable_category_id'] = requestParameters.variableCategoryId;
        }

        if (requestParameters.variance !== undefined) {
            queryParameters['variance'] = requestParameters.variance;
        }

        if (requestParameters.wikipediaTitle !== undefined) {
            queryParameters['wikipedia_title'] = requestParameters.wikipediaTitle;
        }

        if (requestParameters.wikipediaUrl !== undefined) {
            queryParameters['wikipedia_url'] = requestParameters.wikipediaUrl;
        }

        if (requestParameters.wpPostId !== undefined) {
            queryParameters['wp_post_id'] = requestParameters.wpPostId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * List Variables
     */
    async listVariables(requestParameters: ListVariablesRequest): Promise<void> {
        await this.listVariablesRaw(requestParameters);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * List Votes
     */
    async listVotesRaw(requestParameters: ListVotesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.causeVariableId !== undefined) {
            queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['created_at'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.deletedAt !== undefined) {
            queryParameters['deleted_at'] = (requestParameters.deletedAt as any).toISOString();
        }

        if (requestParameters.effectVariableId !== undefined) {
            queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updated_at'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/votes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * List Votes
     */
    async listVotes(requestParameters: ListVotesRequest): Promise<void> {
        await this.listVotesRaw(requestParameters);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Store a Aggregate Correlation
     */
    async storeAggregateCorrelationRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aggregate_correlations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Store a Aggregate Correlation
     */
    async storeAggregateCorrelation(): Promise<void> {
        await this.storeAggregateCorrelationRaw();
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Store a Application
     */
    async storeApplicationRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Store a Application
     */
    async storeApplication(): Promise<void> {
        await this.storeApplicationRaw();
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Store a Collaborator
     */
    async storeCollaboratorRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collaborators`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Store a Collaborator
     */
    async storeCollaborator(): Promise<void> {
        await this.storeCollaboratorRaw();
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a Common Tag
     */
    async storeCommonTagRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common_tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a Common Tag
     */
    async storeCommonTag(): Promise<void> {
        await this.storeCommonTagRaw();
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Store a Connection
     */
    async storeConnectionRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Store a Connection
     */
    async storeConnection(): Promise<void> {
        await this.storeConnectionRaw();
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Store a Connector
     */
    async storeConnectorRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connectors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Store a Connector
     */
    async storeConnector(): Promise<void> {
        await this.storeConnectorRaw();
    }

    /**
     * A record of attempts to import from a given data source. 
     * Store a Connector Import
     */
    async storeConnectorImportRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_imports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A record of attempts to import from a given data source. 
     * Store a Connector Import
     */
    async storeConnectorImport(): Promise<void> {
        await this.storeConnectorImportRaw();
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Store a Connector Request
     */
    async storeConnectorRequestRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Store a Connector Request
     */
    async storeConnectorRequest(): Promise<void> {
        await this.storeConnectorRequestRaw();
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Store a Correlation
     */
    async storeCorrelationRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/correlations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Store a Correlation
     */
    async storeCorrelation(): Promise<void> {
        await this.storeCorrelationRaw();
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Store a Device Token
     */
    async storeDeviceTokenRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device_tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Store a Device Token
     */
    async storeDeviceToken(): Promise<void> {
        await this.storeDeviceTokenRaw();
    }

    /**
     * Measurement
     * Store a Measurement
     */
    async storeMeasurementRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Measurement
     * Store a Measurement
     */
    async storeMeasurement(): Promise<void> {
        await this.storeMeasurementRaw();
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Store a Measurement Export
     */
    async storeMeasurementExportRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_exports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Store a Measurement Export
     */
    async storeMeasurementExport(): Promise<void> {
        await this.storeMeasurementExportRaw();
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Store a Measurement Import
     */
    async storeMeasurementImportRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_imports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Store a Measurement Import
     */
    async storeMeasurementImport(): Promise<void> {
        await this.storeMeasurementImportRaw();
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Store a Notification
     */
    async storeNotificationRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Store a Notification
     */
    async storeNotification(): Promise<void> {
        await this.storeNotificationRaw();
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Store a OAuth Access Token
     */
    async storeOAuthAccessTokenRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_access_tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Store a OAuth Access Token
     */
    async storeOAuthAccessToken(): Promise<void> {
        await this.storeOAuthAccessTokenRaw();
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Store a OAuth Client
     */
    async storeOAuthClientRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Store a OAuth Client
     */
    async storeOAuthClient(): Promise<void> {
        await this.storeOAuthClientRaw();
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Store a Post
     */
    async storePostRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp_posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Store a Post
     */
    async storePost(): Promise<void> {
        await this.storePostRaw();
    }

    /**
     * A sent email
     * Store a Sent Email
     */
    async storeSentEmailRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sent_emails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A sent email
     * Store a Sent Email
     */
    async storeSentEmail(): Promise<void> {
        await this.storeSentEmailRaw();
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Store a Study
     */
    async storeStudyRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Store a Study
     */
    async storeStudy(): Promise<void> {
        await this.storeStudyRaw();
    }

    /**
     * Favorite
     * Store a Tracking Reminder
     */
    async storeTrackingReminderRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Favorite
     * Store a Tracking Reminder
     */
    async storeTrackingReminder(): Promise<void> {
        await this.storeTrackingReminderRaw();
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Store a Tracking Reminder Notification
     */
    async storeTrackingReminderNotificationRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminder_notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Store a Tracking Reminder Notification
     */
    async storeTrackingReminderNotification(): Promise<void> {
        await this.storeTrackingReminderNotificationRaw();
    }

    /**
     * Overview of discoveries, research from \'s data
     * Store a User
     */
    async storeUserRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overview of discoveries, research from \'s data
     * Store a User
     */
    async storeUser(): Promise<void> {
        await this.storeUserRaw();
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Store a User Tag
     */
    async storeUserTagRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Store a User Tag
     */
    async storeUserTag(): Promise<void> {
        await this.storeUserTagRaw();
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Store a User Variable
     */
    async storeUserVariableRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_variables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Store a User Variable
     */
    async storeUserVariable(): Promise<void> {
        await this.storeUserVariableRaw();
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Store a Variable
     */
    async storeVariableRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Store a Variable
     */
    async storeVariable(): Promise<void> {
        await this.storeVariableRaw();
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Store a Variable Category
     */
    async storeVariableCategoryRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Store a Variable Category
     */
    async storeVariableCategory(): Promise<void> {
        await this.storeVariableCategoryRaw();
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Store a Variable User Source
     */
    async storeVariableUserSourceRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_user_sources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Store a Variable User Source
     */
    async storeVariableUserSource(): Promise<void> {
        await this.storeVariableUserSourceRaw();
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Store a Vote
     */
    async storeVoteRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/votes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Store a Vote
     */
    async storeVote(): Promise<void> {
        await this.storeVoteRaw();
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Update a Aggregate Correlation
     */
    async updateAggregateCorrelationRaw(requestParameters: UpdateAggregateCorrelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAggregateCorrelation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aggregate_correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Update a Aggregate Correlation
     */
    async updateAggregateCorrelation(requestParameters: UpdateAggregateCorrelationRequest): Promise<void> {
        await this.updateAggregateCorrelationRaw(requestParameters);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Update a Application
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Update a Application
     */
    async updateApplication(requestParameters: UpdateApplicationRequest): Promise<void> {
        await this.updateApplicationRaw(requestParameters);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Update a Collaborator
     */
    async updateCollaboratorRaw(requestParameters: UpdateCollaboratorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCollaborator.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collaborators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * Update a Collaborator
     */
    async updateCollaborator(requestParameters: UpdateCollaboratorRequest): Promise<void> {
        await this.updateCollaboratorRaw(requestParameters);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a Common Tag
     */
    async updateCommonTagRaw(requestParameters: UpdateCommonTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCommonTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/common_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a Common Tag
     */
    async updateCommonTag(requestParameters: UpdateCommonTagRequest): Promise<void> {
        await this.updateCommonTagRaw(requestParameters);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Update a Connection
     */
    async updateConnectionRaw(requestParameters: UpdateConnectionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateConnection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connections to 3rd party data sources that we can import from.
     * Update a Connection
     */
    async updateConnection(requestParameters: UpdateConnectionRequest): Promise<void> {
        await this.updateConnectionRaw(requestParameters);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Update a Connector
     */
    async updateConnectorRaw(requestParameters: UpdateConnectorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateConnector.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Update a Connector
     */
    async updateConnector(requestParameters: UpdateConnectorRequest): Promise<void> {
        await this.updateConnectorRaw(requestParameters);
    }

    /**
     * A record of attempts to import from a given data source. 
     * Update a Connector Import
     */
    async updateConnectorImportRaw(requestParameters: UpdateConnectorImportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateConnectorImport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A record of attempts to import from a given data source. 
     * Update a Connector Import
     */
    async updateConnectorImport(requestParameters: UpdateConnectorImportRequest): Promise<void> {
        await this.updateConnectorImportRaw(requestParameters);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Update a Connector Request
     */
    async updateConnectorRequestRaw(requestParameters: UpdateConnectorRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateConnectorRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connector_requests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An API request made to an HTTP endpoint during import from a data source. 
     * Update a Connector Request
     */
    async updateConnectorRequest(requestParameters: UpdateConnectorRequestRequest): Promise<void> {
        await this.updateConnectorRequestRaw(requestParameters);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Update a Correlation
     */
    async updateCorrelationRaw(requestParameters: UpdateCorrelationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCorrelation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Update a Correlation
     */
    async updateCorrelation(requestParameters: UpdateCorrelationRequest): Promise<void> {
        await this.updateCorrelationRaw(requestParameters);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Update a Device Token
     */
    async updateDeviceTokenRaw(requestParameters: UpdateDeviceTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDeviceToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User token needed to send Android, iOS, or web push notifications. 
     * Update a Device Token
     */
    async updateDeviceToken(requestParameters: UpdateDeviceTokenRequest): Promise<void> {
        await this.updateDeviceTokenRaw(requestParameters);
    }

    /**
     * Measurement
     * Update a Measurement
     */
    async updateMeasurementRaw(requestParameters: UpdateMeasurementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMeasurement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Measurement
     * Update a Measurement
     */
    async updateMeasurement(requestParameters: UpdateMeasurementRequest): Promise<void> {
        await this.updateMeasurementRaw(requestParameters);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Update a Measurement Export
     */
    async updateMeasurementExportRaw(requestParameters: UpdateMeasurementExportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMeasurementExport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A request from a user to export their data as a spreadsheet. 
     * Update a Measurement Export
     */
    async updateMeasurementExport(requestParameters: UpdateMeasurementExportRequest): Promise<void> {
        await this.updateMeasurementExportRaw(requestParameters);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Update a Measurement Import
     */
    async updateMeasurementImportRaw(requestParameters: UpdateMeasurementImportRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMeasurementImport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurement_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An uploaded spreadsheet or data file to be imported. 
     * Update a Measurement Import
     */
    async updateMeasurementImport(requestParameters: UpdateMeasurementImportRequest): Promise<void> {
        await this.updateMeasurementImportRaw(requestParameters);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Update a Notification
     */
    async updateNotificationRaw(requestParameters: UpdateNotificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNotification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tracking reminder notifications, messages, and study results. 
     * Update a Notification
     */
    async updateNotification(requestParameters: UpdateNotificationRequest): Promise<void> {
        await this.updateNotificationRaw(requestParameters);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Update a OAuth Access Token
     */
    async updateOAuthAccessTokenRaw(requestParameters: UpdateOAuthAccessTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOAuthAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_access_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * Update a OAuth Access Token
     */
    async updateOAuthAccessToken(requestParameters: UpdateOAuthAccessTokenRequest): Promise<void> {
        await this.updateOAuthAccessTokenRaw(requestParameters);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Update a OAuth Client
     */
    async updateOAuthClientRaw(requestParameters: UpdateOAuthClientRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOAuthClient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth_clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * Update a OAuth Client
     */
    async updateOAuthClient(requestParameters: UpdateOAuthClientRequest): Promise<void> {
        await this.updateOAuthClientRaw(requestParameters);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Update a Post
     */
    async updatePostRaw(requestParameters: UpdatePostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp_posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Published studies at the Journal of Citizen Science. 
     * Update a Post
     */
    async updatePost(requestParameters: UpdatePostRequest): Promise<void> {
        await this.updatePostRaw(requestParameters);
    }

    /**
     * A sent email
     * Update a Sent Email
     */
    async updateSentEmailRaw(requestParameters: UpdateSentEmailRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSentEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sent_emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A sent email
     * Update a Sent Email
     */
    async updateSentEmail(requestParameters: UpdateSentEmailRequest): Promise<void> {
        await this.updateSentEmailRaw(requestParameters);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Update a Study
     */
    async updateStudyRaw(requestParameters: UpdateStudyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStudy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Study Analysis Settings Saved by Individuals
     * Update a Study
     */
    async updateStudy(requestParameters: UpdateStudyRequest): Promise<void> {
        await this.updateStudyRaw(requestParameters);
    }

    /**
     * Favorite
     * Update a Tracking Reminder
     */
    async updateTrackingReminderRaw(requestParameters: UpdateTrackingReminderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTrackingReminder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Favorite
     * Update a Tracking Reminder
     */
    async updateTrackingReminder(requestParameters: UpdateTrackingReminderRequest): Promise<void> {
        await this.updateTrackingReminderRaw(requestParameters);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Update a Tracking Reminder Notification
     */
    async updateTrackingReminderNotificationRaw(requestParameters: UpdateTrackingReminderNotificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTrackingReminderNotification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracking_reminder_notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Specific reminder notification instances that still need to be tracked. 
     * Update a Tracking Reminder Notification
     */
    async updateTrackingReminderNotification(requestParameters: UpdateTrackingReminderNotificationRequest): Promise<void> {
        await this.updateTrackingReminderNotificationRaw(requestParameters);
    }

    /**
     * Overview of discoveries, research from \'s data
     * Update a User
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Overview of discoveries, research from \'s data
     * Update a User
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<void> {
        await this.updateUserRaw(requestParameters);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Update a User Tag
     */
    async updateUserTagRaw(requestParameters: UpdateUserTagRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * Update a User Tag
     */
    async updateUserTag(requestParameters: UpdateUserTagRequest): Promise<void> {
        await this.updateUserTagRaw(requestParameters);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Update a User Variable
     */
    async updateUserVariableRaw(requestParameters: UpdateUserVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Update a User Variable
     */
    async updateUserVariable(requestParameters: UpdateUserVariableRequest): Promise<void> {
        await this.updateUserVariableRaw(requestParameters);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Update a Variable
     */
    async updateVariableRaw(requestParameters: UpdateVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * Update a Variable
     */
    async updateVariable(requestParameters: UpdateVariableRequest): Promise<void> {
        await this.updateVariableRaw(requestParameters);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Update a Variable Category
     */
    async updateVariableCategoryRaw(requestParameters: UpdateVariableCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVariableCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Update a Variable Category
     */
    async updateVariableCategory(requestParameters: UpdateVariableCategoryRequest): Promise<void> {
        await this.updateVariableCategoryRaw(requestParameters);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Update a Variable User Source
     */
    async updateVariableUserSourceRaw(requestParameters: UpdateVariableUserSourceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVariableUserSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/variable_user_sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A list of data sources for a given variable for a given user. 
     * Update a Variable User Source
     */
    async updateVariableUserSource(requestParameters: UpdateVariableUserSourceRequest): Promise<void> {
        await this.updateVariableUserSourceRaw(requestParameters);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Update a Vote
     */
    async updateVoteRaw(requestParameters: UpdateVoteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/votes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * Update a Vote
     */
    async updateVote(requestParameters: UpdateVoteRequest): Promise<void> {
        await this.updateVoteRaw(requestParameters);
    }

}
