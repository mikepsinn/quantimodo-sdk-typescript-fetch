/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommonResponse,
    CommonResponseFromJSON,
    CommonResponseToJSON,
    GetTrackingReminderNotificationsResponse,
    GetTrackingReminderNotificationsResponseFromJSON,
    GetTrackingReminderNotificationsResponseToJSON,
    PostTrackingRemindersResponse,
    PostTrackingRemindersResponseFromJSON,
    PostTrackingRemindersResponseToJSON,
    TrackingReminder,
    TrackingReminderFromJSON,
    TrackingReminderToJSON,
    TrackingReminderDelete,
    TrackingReminderDeleteFromJSON,
    TrackingReminderDeleteToJSON,
    TrackingReminderNotificationPost,
    TrackingReminderNotificationPostFromJSON,
    TrackingReminderNotificationPostToJSON,
} from '../models';

export interface DeleteTrackingReminderRequest {
    body: TrackingReminderDelete;
    userId?: number;
}

export interface GetTrackingReminderNotificationsRequest {
    sort?: string;
    userId?: number;
    createdAt?: string;
    updatedAt?: string;
    limit?: number;
    offset?: number;
    variableCategoryName?: GetTrackingReminderNotificationsVariableCategoryNameEnum;
    reminderTime?: string;
    clientId?: string;
    onlyPast?: boolean;
    includeDeleted?: boolean;
    platform?: GetTrackingReminderNotificationsPlatformEnum;
}

export interface GetTrackingRemindersRequest {
    userId?: number;
    variableCategoryName?: GetTrackingRemindersVariableCategoryNameEnum;
    createdAt?: string;
    updatedAt?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    clientId?: string;
    appVersion?: string;
    platform?: GetTrackingRemindersPlatformEnum;
}

export interface PostTrackingReminderNotificationsRequest {
    body: Array<TrackingReminderNotificationPost>;
    userId?: number;
    clientId?: string;
    platform?: PostTrackingReminderNotificationsPlatformEnum;
}

export interface PostTrackingRemindersRequest {
    body: Array<TrackingReminder>;
}

/**
 * 
 */
export class RemindersApi extends runtime.BaseAPI {

    /**
     * Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
     * Delete Tracking Reminder
     */
    async deleteTrackingReminderRaw(requestParameters: DeleteTrackingReminderRequest): Promise<runtime.ApiResponse<CommonResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteTrackingReminder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/trackingReminders/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TrackingReminderDeleteToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseFromJSON(jsonValue));
    }

    /**
     * Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
     * Delete Tracking Reminder
     */
    async deleteTrackingReminder(requestParameters: DeleteTrackingReminderRequest): Promise<CommonResponse> {
        const response = await this.deleteTrackingReminderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Specific tracking reminder notification instances that still need to be tracked.
     * Get specific tracking reminder notifications
     */
    async getTrackingReminderNotificationsRaw(requestParameters: GetTrackingReminderNotificationsRequest): Promise<runtime.ApiResponse<GetTrackingReminderNotificationsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = requestParameters.createdAt;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = requestParameters.updatedAt;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.variableCategoryName !== undefined) {
            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
        }

        if (requestParameters.reminderTime !== undefined) {
            queryParameters['reminderTime'] = requestParameters.reminderTime;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.onlyPast !== undefined) {
            queryParameters['onlyPast'] = requestParameters.onlyPast;
        }

        if (requestParameters.includeDeleted !== undefined) {
            queryParameters['includeDeleted'] = requestParameters.includeDeleted;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/trackingReminderNotifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTrackingReminderNotificationsResponseFromJSON(jsonValue));
    }

    /**
     * Specific tracking reminder notification instances that still need to be tracked.
     * Get specific tracking reminder notifications
     */
    async getTrackingReminderNotifications(requestParameters: GetTrackingReminderNotificationsRequest): Promise<GetTrackingReminderNotificationsResponse> {
        const response = await this.getTrackingReminderNotificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Users can be reminded to track certain variables at a specified frequency with a default value.
     * Get repeating tracking reminder settings
     */
    async getTrackingRemindersRaw(requestParameters: GetTrackingRemindersRequest): Promise<runtime.ApiResponse<Array<TrackingReminder>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.variableCategoryName !== undefined) {
            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = requestParameters.createdAt;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = requestParameters.updatedAt;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.appVersion !== undefined) {
            queryParameters['appVersion'] = requestParameters.appVersion;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/trackingReminders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackingReminderFromJSON));
    }

    /**
     * Users can be reminded to track certain variables at a specified frequency with a default value.
     * Get repeating tracking reminder settings
     */
    async getTrackingReminders(requestParameters: GetTrackingRemindersRequest): Promise<Array<TrackingReminder>> {
        const response = await this.getTrackingRemindersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Snooze, skip, or track a tracking reminder notification
     * Snooze, skip, or track a tracking reminder notification
     */
    async postTrackingReminderNotificationsRaw(requestParameters: PostTrackingReminderNotificationsRequest): Promise<runtime.ApiResponse<CommonResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postTrackingReminderNotifications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/trackingReminderNotifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(TrackingReminderNotificationPostToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseFromJSON(jsonValue));
    }

    /**
     * Snooze, skip, or track a tracking reminder notification
     * Snooze, skip, or track a tracking reminder notification
     */
    async postTrackingReminderNotifications(requestParameters: PostTrackingReminderNotificationsRequest): Promise<CommonResponse> {
        const response = await this.postTrackingReminderNotificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * This is to enable users to create reminders to track a variable with a default value at a specified frequency
     * Store a Tracking Reminder
     */
    async postTrackingRemindersRaw(requestParameters: PostTrackingRemindersRequest): Promise<runtime.ApiResponse<PostTrackingRemindersResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postTrackingReminders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/trackingReminders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(TrackingReminderToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostTrackingRemindersResponseFromJSON(jsonValue));
    }

    /**
     * This is to enable users to create reminders to track a variable with a default value at a specified frequency
     * Store a Tracking Reminder
     */
    async postTrackingReminders(requestParameters: PostTrackingRemindersRequest): Promise<PostTrackingRemindersResponse> {
        const response = await this.postTrackingRemindersRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetTrackingReminderNotificationsVariableCategoryNameEnum {
    Activities = 'Activities',
    Books = 'Books',
    CausesOfIllness = 'Causes of Illness',
    CognitivePerformance = 'Cognitive Performance',
    Conditions = 'Conditions',
    Emotions = 'Emotions',
    Environment = 'Environment',
    Foods = 'Foods',
    Location = 'Location',
    Miscellaneous = 'Miscellaneous',
    MoviesAndTV = 'Movies and TV',
    Music = 'Music',
    Nutrients = 'Nutrients',
    Payments = 'Payments',
    PhysicalActivity = 'Physical Activity',
    Physique = 'Physique',
    Sleep = 'Sleep',
    SocialInteractions = 'Social Interactions',
    Software = 'Software',
    Symptoms = 'Symptoms',
    Treatments = 'Treatments',
    VitalSigns = 'Vital Signs',
    Goals = 'Goals'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTrackingReminderNotificationsPlatformEnum {
    Chrome = 'chrome',
    Android = 'android',
    Ios = 'ios',
    Web = 'web'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTrackingRemindersVariableCategoryNameEnum {
    Activities = 'Activities',
    Books = 'Books',
    CausesOfIllness = 'Causes of Illness',
    CognitivePerformance = 'Cognitive Performance',
    Conditions = 'Conditions',
    Emotions = 'Emotions',
    Environment = 'Environment',
    Foods = 'Foods',
    Location = 'Location',
    Miscellaneous = 'Miscellaneous',
    MoviesAndTV = 'Movies and TV',
    Music = 'Music',
    Nutrients = 'Nutrients',
    Payments = 'Payments',
    PhysicalActivity = 'Physical Activity',
    Physique = 'Physique',
    Sleep = 'Sleep',
    SocialInteractions = 'Social Interactions',
    Software = 'Software',
    Symptoms = 'Symptoms',
    Treatments = 'Treatments',
    VitalSigns = 'Vital Signs',
    Goals = 'Goals'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTrackingRemindersPlatformEnum {
    Chrome = 'chrome',
    Android = 'android',
    Ios = 'ios',
    Web = 'web'
}
/**
    * @export
    * @enum {string}
    */
export enum PostTrackingReminderNotificationsPlatformEnum {
    Chrome = 'chrome',
    Android = 'android',
    Ios = 'ios',
    Web = 'web'
}
