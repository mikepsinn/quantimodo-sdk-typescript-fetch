/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetUploadResponse,
    GetUploadResponseFromJSON,
    GetUploadResponseToJSON,
} from '../models';

export interface GetUploadRequest {
    userId?: number;
    format?: GetUploadFormatEnum;
    id?: number;
    clientId?: string;
    platform?: GetUploadPlatformEnum;
}

/**
 * 
 */
export class UploadApi extends runtime.BaseAPI {

    /**
     * Get Upload
     * Get whatever you uploaded
     */
    async getUploadRaw(requestParameters: GetUploadRequest): Promise<runtime.ApiResponse<GetUploadResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["readmeasurements"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/upload`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUploadResponseFromJSON(jsonValue));
    }

    /**
     * Get Upload
     * Get whatever you uploaded
     */
    async getUpload(requestParameters: GetUploadRequest): Promise<GetUploadResponse> {
        const response = await this.getUploadRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetUploadFormatEnum {
    Download = 'download',
    Display = 'display'
}
/**
    * @export
    * @enum {string}
    */
export enum GetUploadPlatformEnum {
    Chrome = 'chrome',
    Android = 'android',
    Ios = 'ios',
    Web = 'web'
}
