/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommonResponse,
    CommonResponseFromJSON,
    CommonResponseToJSON,
    UserTag,
    UserTagFromJSON,
    UserTagToJSON,
    UserVariableDelete,
    UserVariableDeleteFromJSON,
    UserVariableDeleteToJSON,
    Variable,
    VariableFromJSON,
    VariableToJSON,
    VariableCategory,
    VariableCategoryFromJSON,
    VariableCategoryToJSON,
} from '../models';

export interface DeleteUserTagRequest {
    taggedVariableId?: number;
    tagVariableId?: number;
}

export interface DeleteUserVariableRequest {
    variableId: UserVariableDelete;
}

export interface GetVariablesRequest {
    includeCharts?: boolean;
    numberOfRawMeasurements?: string;
    userId?: number;
    variableCategoryName?: GetVariablesVariableCategoryNameEnum;
    name?: string;
    variableName?: string;
    updatedAt?: string;
    sourceName?: string;
    earliestMeasurementTime?: string;
    latestMeasurementTime?: string;
    id?: number;
    lastSourceName?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    includePublic?: boolean;
    manualTracking?: boolean;
    clientId?: string;
    upc?: string;
    effectOrCause?: string;
    publicEffectOrCause?: string;
    exactMatch?: boolean;
    variableCategoryId?: number;
    includePrivate?: boolean;
    searchPhrase?: string;
    synonyms?: string;
    taggedVariableId?: number;
    tagVariableId?: number;
    joinVariableId?: number;
    parentUserTagVariableId?: number;
    childUserTagVariableId?: number;
    ingredientUserTagVariableId?: number;
    ingredientOfUserTagVariableId?: number;
    commonOnly?: boolean;
    userOnly?: boolean;
    platform?: GetVariablesPlatformEnum;
    includeTags?: boolean;
    recalculate?: boolean;
    variableId?: number;
    concise?: boolean;
    refresh?: boolean;
}

export interface PostUserTagsRequest {
    body: UserTag;
    userId?: number;
}

export interface PostUserVariablesRequest {
    userVariables: Array<Variable>;
    includePrivate?: boolean;
    clientId?: string;
    includePublic?: boolean;
    searchPhrase?: string;
    exactMatch?: boolean;
    manualTracking?: boolean;
    variableCategoryName?: PostUserVariablesVariableCategoryNameEnum;
    variableCategoryId?: number;
    synonyms?: string;
    platform?: PostUserVariablesPlatformEnum;
}

export interface ResetUserVariableSettingsRequest {
    variableId: UserVariableDelete;
}

/**
 * 
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * Delete previously created user tags or ingredients.
     * Delete user tag or ingredient
     */
    async deleteUserTagRaw(requestParameters: DeleteUserTagRequest): Promise<runtime.ApiResponse<CommonResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.taggedVariableId !== undefined) {
            queryParameters['taggedVariableId'] = requestParameters.taggedVariableId;
        }

        if (requestParameters.tagVariableId !== undefined) {
            queryParameters['tagVariableId'] = requestParameters.tagVariableId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/userTags/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseFromJSON(jsonValue));
    }

    /**
     * Delete previously created user tags or ingredients.
     * Delete user tag or ingredient
     */
    async deleteUserTag(requestParameters: DeleteUserTagRequest): Promise<CommonResponse> {
        const response = await this.deleteUserTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * Users can delete all of their measurements for a variable
     * Delete All Measurements For Variable
     */
    async deleteUserVariableRaw(requestParameters: DeleteUserVariableRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.variableId === null || requestParameters.variableId === undefined) {
            throw new runtime.RequiredError('variableId','Required parameter requestParameters.variableId was null or undefined when calling deleteUserVariable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/userVariables/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UserVariableDeleteToJSON(requestParameters.variableId),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Users can delete all of their measurements for a variable
     * Delete All Measurements For Variable
     */
    async deleteUserVariable(requestParameters: DeleteUserVariableRequest): Promise<void> {
        await this.deleteUserVariableRaw(requestParameters);
    }

    /**
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Goals.
     * Variable categories
     */
    async getVariableCategoriesRaw(): Promise<runtime.ApiResponse<Array<VariableCategory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/variableCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VariableCategoryFromJSON));
    }

    /**
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Goals.
     * Variable categories
     */
    async getVariableCategories(): Promise<Array<VariableCategory>> {
        const response = await this.getVariableCategoriesRaw();
        return await response.value();
    }

    /**
     * Get variables. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * Get variables along with related user-specific analysis settings and statistics
     */
    async getVariablesRaw(requestParameters: GetVariablesRequest): Promise<runtime.ApiResponse<Array<Variable>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeCharts !== undefined) {
            queryParameters['includeCharts'] = requestParameters.includeCharts;
        }

        if (requestParameters.numberOfRawMeasurements !== undefined) {
            queryParameters['numberOfRawMeasurements'] = requestParameters.numberOfRawMeasurements;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.variableCategoryName !== undefined) {
            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.variableName !== undefined) {
            queryParameters['variableName'] = requestParameters.variableName;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = requestParameters.updatedAt;
        }

        if (requestParameters.sourceName !== undefined) {
            queryParameters['sourceName'] = requestParameters.sourceName;
        }

        if (requestParameters.earliestMeasurementTime !== undefined) {
            queryParameters['earliestMeasurementTime'] = requestParameters.earliestMeasurementTime;
        }

        if (requestParameters.latestMeasurementTime !== undefined) {
            queryParameters['latestMeasurementTime'] = requestParameters.latestMeasurementTime;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.lastSourceName !== undefined) {
            queryParameters['lastSourceName'] = requestParameters.lastSourceName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.includePublic !== undefined) {
            queryParameters['includePublic'] = requestParameters.includePublic;
        }

        if (requestParameters.manualTracking !== undefined) {
            queryParameters['manualTracking'] = requestParameters.manualTracking;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.upc !== undefined) {
            queryParameters['upc'] = requestParameters.upc;
        }

        if (requestParameters.effectOrCause !== undefined) {
            queryParameters['effectOrCause'] = requestParameters.effectOrCause;
        }

        if (requestParameters.publicEffectOrCause !== undefined) {
            queryParameters['publicEffectOrCause'] = requestParameters.publicEffectOrCause;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exactMatch'] = requestParameters.exactMatch;
        }

        if (requestParameters.variableCategoryId !== undefined) {
            queryParameters['variableCategoryId'] = requestParameters.variableCategoryId;
        }

        if (requestParameters.includePrivate !== undefined) {
            queryParameters['includePrivate'] = requestParameters.includePrivate;
        }

        if (requestParameters.searchPhrase !== undefined) {
            queryParameters['searchPhrase'] = requestParameters.searchPhrase;
        }

        if (requestParameters.synonyms !== undefined) {
            queryParameters['synonyms'] = requestParameters.synonyms;
        }

        if (requestParameters.taggedVariableId !== undefined) {
            queryParameters['taggedVariableId'] = requestParameters.taggedVariableId;
        }

        if (requestParameters.tagVariableId !== undefined) {
            queryParameters['tagVariableId'] = requestParameters.tagVariableId;
        }

        if (requestParameters.joinVariableId !== undefined) {
            queryParameters['joinVariableId'] = requestParameters.joinVariableId;
        }

        if (requestParameters.parentUserTagVariableId !== undefined) {
            queryParameters['parentUserTagVariableId'] = requestParameters.parentUserTagVariableId;
        }

        if (requestParameters.childUserTagVariableId !== undefined) {
            queryParameters['childUserTagVariableId'] = requestParameters.childUserTagVariableId;
        }

        if (requestParameters.ingredientUserTagVariableId !== undefined) {
            queryParameters['ingredientUserTagVariableId'] = requestParameters.ingredientUserTagVariableId;
        }

        if (requestParameters.ingredientOfUserTagVariableId !== undefined) {
            queryParameters['ingredientOfUserTagVariableId'] = requestParameters.ingredientOfUserTagVariableId;
        }

        if (requestParameters.commonOnly !== undefined) {
            queryParameters['commonOnly'] = requestParameters.commonOnly;
        }

        if (requestParameters.userOnly !== undefined) {
            queryParameters['userOnly'] = requestParameters.userOnly;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        if (requestParameters.includeTags !== undefined) {
            queryParameters['includeTags'] = requestParameters.includeTags;
        }

        if (requestParameters.recalculate !== undefined) {
            queryParameters['recalculate'] = requestParameters.recalculate;
        }

        if (requestParameters.variableId !== undefined) {
            queryParameters['variableId'] = requestParameters.variableId;
        }

        if (requestParameters.concise !== undefined) {
            queryParameters['concise'] = requestParameters.concise;
        }

        if (requestParameters.refresh !== undefined) {
            queryParameters['refresh'] = requestParameters.refresh;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/variables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VariableFromJSON));
    }

    /**
     * Get variables. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * Get variables along with related user-specific analysis settings and statistics
     */
    async getVariables(requestParameters: GetVariablesRequest): Promise<Array<Variable>> {
        const response = await this.getVariablesRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Post or update user tags or ingredients
     */
    async postUserTagsRaw(requestParameters: PostUserTagsRequest): Promise<runtime.ApiResponse<CommonResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postUserTags.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/userTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserTagToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Post or update user tags or ingredients
     */
    async postUserTags(requestParameters: PostUserTagsRequest): Promise<CommonResponse> {
        const response = await this.postUserTagsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * Update User Settings for a Variable
     */
    async postUserVariablesRaw(requestParameters: PostUserVariablesRequest): Promise<runtime.ApiResponse<CommonResponse>> {
        if (requestParameters.userVariables === null || requestParameters.userVariables === undefined) {
            throw new runtime.RequiredError('userVariables','Required parameter requestParameters.userVariables was null or undefined when calling postUserVariables.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includePrivate !== undefined) {
            queryParameters['includePrivate'] = requestParameters.includePrivate;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.includePublic !== undefined) {
            queryParameters['includePublic'] = requestParameters.includePublic;
        }

        if (requestParameters.searchPhrase !== undefined) {
            queryParameters['searchPhrase'] = requestParameters.searchPhrase;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exactMatch'] = requestParameters.exactMatch;
        }

        if (requestParameters.manualTracking !== undefined) {
            queryParameters['manualTracking'] = requestParameters.manualTracking;
        }

        if (requestParameters.variableCategoryName !== undefined) {
            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
        }

        if (requestParameters.variableCategoryId !== undefined) {
            queryParameters['variableCategoryId'] = requestParameters.variableCategoryId;
        }

        if (requestParameters.synonyms !== undefined) {
            queryParameters['synonyms'] = requestParameters.synonyms;
        }

        if (requestParameters.platform !== undefined) {
            queryParameters['platform'] = requestParameters.platform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/variables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.userVariables.map(VariableToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseFromJSON(jsonValue));
    }

    /**
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * Update User Settings for a Variable
     */
    async postUserVariables(requestParameters: PostUserVariablesRequest): Promise<CommonResponse> {
        const response = await this.postUserVariablesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reset user settings for a variable to defaults
     * Reset user settings for a variable to defaults
     */
    async resetUserVariableSettingsRaw(requestParameters: ResetUserVariableSettingsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.variableId === null || requestParameters.variableId === undefined) {
            throw new runtime.RequiredError('variableId','Required parameter requestParameters.variableId was null or undefined when calling resetUserVariableSettings.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/userVariables/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserVariableDeleteToJSON(requestParameters.variableId),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset user settings for a variable to defaults
     * Reset user settings for a variable to defaults
     */
    async resetUserVariableSettings(requestParameters: ResetUserVariableSettingsRequest): Promise<void> {
        await this.resetUserVariableSettingsRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetVariablesVariableCategoryNameEnum {
    Activities = 'Activities',
    Books = 'Books',
    CausesOfIllness = 'Causes of Illness',
    CognitivePerformance = 'Cognitive Performance',
    Conditions = 'Conditions',
    Emotions = 'Emotions',
    Environment = 'Environment',
    Foods = 'Foods',
    Location = 'Location',
    Miscellaneous = 'Miscellaneous',
    MoviesAndTV = 'Movies and TV',
    Music = 'Music',
    Nutrients = 'Nutrients',
    Payments = 'Payments',
    PhysicalActivity = 'Physical Activity',
    Physique = 'Physique',
    Sleep = 'Sleep',
    SocialInteractions = 'Social Interactions',
    Software = 'Software',
    Symptoms = 'Symptoms',
    Treatments = 'Treatments',
    VitalSigns = 'Vital Signs',
    Goals = 'Goals'
}
/**
    * @export
    * @enum {string}
    */
export enum GetVariablesPlatformEnum {
    Chrome = 'chrome',
    Android = 'android',
    Ios = 'ios',
    Web = 'web'
}
/**
    * @export
    * @enum {string}
    */
export enum PostUserVariablesVariableCategoryNameEnum {
    Activities = 'Activities',
    Books = 'Books',
    CausesOfIllness = 'Causes of Illness',
    CognitivePerformance = 'Cognitive Performance',
    Conditions = 'Conditions',
    Emotions = 'Emotions',
    Environment = 'Environment',
    Foods = 'Foods',
    Location = 'Location',
    Miscellaneous = 'Miscellaneous',
    MoviesAndTV = 'Movies and TV',
    Music = 'Music',
    Nutrients = 'Nutrients',
    Payments = 'Payments',
    PhysicalActivity = 'Physical Activity',
    Physique = 'Physique',
    Sleep = 'Sleep',
    SocialInteractions = 'Social Interactions',
    Software = 'Software',
    Symptoms = 'Symptoms',
    Treatments = 'Treatments',
    VitalSigns = 'Vital Signs',
    Goals = 'Goals'
}
/**
    * @export
    * @enum {string}
    */
export enum PostUserVariablesPlatformEnum {
    Chrome = 'chrome',
    Android = 'android',
    Ios = 'ios',
    Web = 'web'
}
