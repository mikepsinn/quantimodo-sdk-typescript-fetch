/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CommonResponse, GetStudiesResponse, PostStudyCreateResponse, PostStudyPublishResponse, Study, StudyCreationBody, StudyJoinResponse, Vote, VoteDelete } from '../models';
export interface CreateStudyRequest {
    body: StudyCreationBody;
    clientId?: string;
    platform?: CreateStudyPlatformEnum;
}
export interface DeleteVoteRequest {
    body: VoteDelete;
    userId?: number;
}
export interface GetOpenStudiesRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    userId?: number;
    clientId?: string;
    includeCharts?: boolean;
    platform?: GetOpenStudiesPlatformEnum;
    recalculate?: boolean;
    studyId?: string;
}
export interface GetStudiesRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    userId?: number;
    clientId?: string;
    includeCharts?: boolean;
    platform?: GetStudiesPlatformEnum;
    recalculate?: boolean;
    studyId?: string;
    sort?: string;
    limit?: number;
    offset?: number;
    correlationCoefficient?: string;
    updatedAt?: string;
    outcomesOfInterest?: boolean;
    principalInvestigatorUserId?: number;
    open?: boolean;
    joined?: boolean;
    created?: boolean;
    population?: boolean;
    downvoted?: boolean;
}
export interface GetStudiesCreatedRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    sort?: string;
    limit?: number;
    offset?: number;
    userId?: number;
    updatedAt?: string;
    clientId?: string;
    platform?: GetStudiesCreatedPlatformEnum;
}
export interface GetStudiesJoinedRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    sort?: string;
    limit?: number;
    offset?: number;
    userId?: number;
    correlationCoefficient?: string;
    updatedAt?: string;
    outcomesOfInterest?: boolean;
    clientId?: string;
    platform?: GetStudiesJoinedPlatformEnum;
}
export interface GetStudyRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    userId?: number;
    clientId?: string;
    includeCharts?: boolean;
    platform?: GetStudyPlatformEnum;
    recalculate?: boolean;
    studyId?: string;
}
export interface JoinStudyRequest {
    studyId?: string;
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    userId?: number;
    clientId?: string;
    platform?: JoinStudyPlatformEnum;
}
export interface PostVoteRequest {
    body: Vote;
    userId?: number;
}
export interface PublishStudyRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    userId?: number;
    clientId?: string;
    includeCharts?: boolean;
    platform?: PublishStudyPlatformEnum;
    recalculate?: boolean;
    studyId?: string;
}
/**
 *
 */
export declare class StudiesApi extends runtime.BaseAPI {
    /**
     * Create an individual, group, or population study examining the relationship between a predictor and outcome variable. You will be given a study id which you can invite participants to join and share their measurements for the specified variables.
     * Create a Study
     */
    createStudyRaw(requestParameters: CreateStudyRequest): Promise<runtime.ApiResponse<PostStudyCreateResponse>>;
    /**
     * Create an individual, group, or population study examining the relationship between a predictor and outcome variable. You will be given a study id which you can invite participants to join and share their measurements for the specified variables.
     * Create a Study
     */
    createStudy(requestParameters: CreateStudyRequest): Promise<PostStudyCreateResponse>;
    /**
     * Delete previously posted vote
     * Delete vote
     */
    deleteVoteRaw(requestParameters: DeleteVoteRequest): Promise<runtime.ApiResponse<CommonResponse>>;
    /**
     * Delete previously posted vote
     * Delete vote
     */
    deleteVote(requestParameters: DeleteVoteRequest): Promise<CommonResponse>;
    /**
     * These are studies that anyone can join and share their data for the predictor and outcome variables of interest.
     * These are open studies that anyone can join
     */
    getOpenStudiesRaw(requestParameters: GetOpenStudiesRequest): Promise<runtime.ApiResponse<GetStudiesResponse>>;
    /**
     * These are studies that anyone can join and share their data for the predictor and outcome variables of interest.
     * These are open studies that anyone can join
     */
    getOpenStudies(requestParameters: GetOpenStudiesRequest): Promise<GetStudiesResponse>;
    /**
     * If you have enough data, this will be a list of your personal studies, otherwise it will consist of aggregated population studies.
     * Get Personal or Population Studies
     */
    getStudiesRaw(requestParameters: GetStudiesRequest): Promise<runtime.ApiResponse<GetStudiesResponse>>;
    /**
     * If you have enough data, this will be a list of your personal studies, otherwise it will consist of aggregated population studies.
     * Get Personal or Population Studies
     */
    getStudies(requestParameters: GetStudiesRequest): Promise<GetStudiesResponse>;
    /**
     * These are studies that you have created.
     * Get studies you have created
     */
    getStudiesCreatedRaw(requestParameters: GetStudiesCreatedRequest): Promise<runtime.ApiResponse<GetStudiesResponse>>;
    /**
     * These are studies that you have created.
     * Get studies you have created
     */
    getStudiesCreated(requestParameters: GetStudiesCreatedRequest): Promise<GetStudiesResponse>;
    /**
     * These are studies that you are currently sharing your data with.
     * Studies You Have Joined
     */
    getStudiesJoinedRaw(requestParameters: GetStudiesJoinedRequest): Promise<runtime.ApiResponse<GetStudiesResponse>>;
    /**
     * These are studies that you are currently sharing your data with.
     * Studies You Have Joined
     */
    getStudiesJoined(requestParameters: GetStudiesJoinedRequest): Promise<GetStudiesResponse>;
    /**
     * Get Study
     * Get Study
     */
    getStudyRaw(requestParameters: GetStudyRequest): Promise<runtime.ApiResponse<Study>>;
    /**
     * Get Study
     * Get Study
     */
    getStudy(requestParameters: GetStudyRequest): Promise<Study>;
    /**
     * Anonymously share measurements for specified variables
     * Join a Study
     */
    joinStudyRaw(requestParameters: JoinStudyRequest): Promise<runtime.ApiResponse<StudyJoinResponse>>;
    /**
     * Anonymously share measurements for specified variables
     * Join a Study
     */
    joinStudy(requestParameters: JoinStudyRequest): Promise<StudyJoinResponse>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Post or update vote
     */
    postVoteRaw(requestParameters: PostVoteRequest): Promise<runtime.ApiResponse<CommonResponse>>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Post or update vote
     */
    postVote(requestParameters: PostVoteRequest): Promise<CommonResponse>;
    /**
     * Make a study and all related measurements publicly visible by anyone
     * Publish Your Study
     */
    publishStudyRaw(requestParameters: PublishStudyRequest): Promise<runtime.ApiResponse<PostStudyPublishResponse>>;
    /**
     * Make a study and all related measurements publicly visible by anyone
     * Publish Your Study
     */
    publishStudy(requestParameters: PublishStudyRequest): Promise<PostStudyPublishResponse>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum CreateStudyPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetOpenStudiesPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetStudiesPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetStudiesCreatedPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetStudiesJoinedPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetStudyPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum JoinStudyPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum PublishStudyPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
