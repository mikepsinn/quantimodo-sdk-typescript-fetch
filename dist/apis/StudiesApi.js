"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class StudiesApi extends runtime.BaseAPI {
    /**
     * Create an individual, group, or population study examining the relationship between a predictor and outcome variable. You will be given a study id which you can invite participants to join and share their measurements for the specified variables.
     * Create a Study
     */
    createStudyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createStudy.');
            }
            const queryParameters = {};
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/study/create`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.StudyCreationBodyToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PostStudyCreateResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create an individual, group, or population study examining the relationship between a predictor and outcome variable. You will be given a study id which you can invite participants to join and share their measurements for the specified variables.
     * Create a Study
     */
    createStudy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createStudyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Delete previously posted vote
     * Delete vote
     */
    deleteVoteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling deleteVote.');
            }
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/votes/delete`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.VoteDeleteToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CommonResponseFromJSON(jsonValue));
        });
    }
    /**
     * Delete previously posted vote
     * Delete vote
     */
    deleteVote(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteVoteRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * These are studies that anyone can join and share their data for the predictor and outcome variables of interest.
     * These are open studies that anyone can join
     */
    getOpenStudiesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.includeCharts !== undefined) {
                queryParameters['includeCharts'] = requestParameters.includeCharts;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.recalculate !== undefined) {
                queryParameters['recalculate'] = requestParameters.recalculate;
            }
            if (requestParameters.studyId !== undefined) {
                queryParameters['studyId'] = requestParameters.studyId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/studies/open`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.GetStudiesResponseFromJSON(jsonValue));
        });
    }
    /**
     * These are studies that anyone can join and share their data for the predictor and outcome variables of interest.
     * These are open studies that anyone can join
     */
    getOpenStudies(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOpenStudiesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * If you have enough data, this will be a list of your personal studies, otherwise it will consist of aggregated population studies.
     * Get Personal or Population Studies
     */
    getStudiesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.includeCharts !== undefined) {
                queryParameters['includeCharts'] = requestParameters.includeCharts;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.recalculate !== undefined) {
                queryParameters['recalculate'] = requestParameters.recalculate;
            }
            if (requestParameters.studyId !== undefined) {
                queryParameters['studyId'] = requestParameters.studyId;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.correlationCoefficient !== undefined) {
                queryParameters['correlationCoefficient'] = requestParameters.correlationCoefficient;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.outcomesOfInterest !== undefined) {
                queryParameters['outcomesOfInterest'] = requestParameters.outcomesOfInterest;
            }
            if (requestParameters.principalInvestigatorUserId !== undefined) {
                queryParameters['principalInvestigatorUserId'] = requestParameters.principalInvestigatorUserId;
            }
            if (requestParameters.open !== undefined) {
                queryParameters['open'] = requestParameters.open;
            }
            if (requestParameters.joined !== undefined) {
                queryParameters['joined'] = requestParameters.joined;
            }
            if (requestParameters.created !== undefined) {
                queryParameters['created'] = requestParameters.created;
            }
            if (requestParameters.population !== undefined) {
                queryParameters['population'] = requestParameters.population;
            }
            if (requestParameters.downvoted !== undefined) {
                queryParameters['downvoted'] = requestParameters.downvoted;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/studies`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.GetStudiesResponseFromJSON(jsonValue));
        });
    }
    /**
     * If you have enough data, this will be a list of your personal studies, otherwise it will consist of aggregated population studies.
     * Get Personal or Population Studies
     */
    getStudies(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStudiesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * These are studies that you have created.
     * Get studies you have created
     */
    getStudiesCreatedRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/studies/created`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.GetStudiesResponseFromJSON(jsonValue));
        });
    }
    /**
     * These are studies that you have created.
     * Get studies you have created
     */
    getStudiesCreated(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStudiesCreatedRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * These are studies that you are currently sharing your data with.
     * Studies You Have Joined
     */
    getStudiesJoinedRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.correlationCoefficient !== undefined) {
                queryParameters['correlationCoefficient'] = requestParameters.correlationCoefficient;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.outcomesOfInterest !== undefined) {
                queryParameters['outcomesOfInterest'] = requestParameters.outcomesOfInterest;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/studies/joined`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.GetStudiesResponseFromJSON(jsonValue));
        });
    }
    /**
     * These are studies that you are currently sharing your data with.
     * Studies You Have Joined
     */
    getStudiesJoined(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStudiesJoinedRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Get Study
     * Get Study
     */
    getStudyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.includeCharts !== undefined) {
                queryParameters['includeCharts'] = requestParameters.includeCharts;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.recalculate !== undefined) {
                queryParameters['recalculate'] = requestParameters.recalculate;
            }
            if (requestParameters.studyId !== undefined) {
                queryParameters['studyId'] = requestParameters.studyId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v4/study`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StudyFromJSON(jsonValue));
        });
    }
    /**
     * Get Study
     * Get Study
     */
    getStudy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStudyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Anonymously share measurements for specified variables
     * Join a Study
     */
    joinStudyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.studyId !== undefined) {
                queryParameters['studyId'] = requestParameters.studyId;
            }
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/study/join`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.StudyJoinResponseFromJSON(jsonValue));
        });
    }
    /**
     * Anonymously share measurements for specified variables
     * Join a Study
     */
    joinStudy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.joinStudyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Post or update vote
     */
    postVoteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postVote.');
            }
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/votes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.VoteToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CommonResponseFromJSON(jsonValue));
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Post or update vote
     */
    postVote(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postVoteRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Make a study and all related measurements publicly visible by anyone
     * Publish Your Study
     */
    publishStudyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.includeCharts !== undefined) {
                queryParameters['includeCharts'] = requestParameters.includeCharts;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.recalculate !== undefined) {
                queryParameters['recalculate'] = requestParameters.recalculate;
            }
            if (requestParameters.studyId !== undefined) {
                queryParameters['studyId'] = requestParameters.studyId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/study/publish`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PostStudyPublishResponseFromJSON(jsonValue));
        });
    }
    /**
     * Make a study and all related measurements publicly visible by anyone
     * Publish Your Study
     */
    publishStudy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publishStudyRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.StudiesApi = StudiesApi;
/**
    * @export
    * @enum {string}
    */
var CreateStudyPlatformEnum;
(function (CreateStudyPlatformEnum) {
    CreateStudyPlatformEnum["Chrome"] = "chrome";
    CreateStudyPlatformEnum["Android"] = "android";
    CreateStudyPlatformEnum["Ios"] = "ios";
    CreateStudyPlatformEnum["Web"] = "web";
})(CreateStudyPlatformEnum = exports.CreateStudyPlatformEnum || (exports.CreateStudyPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetOpenStudiesPlatformEnum;
(function (GetOpenStudiesPlatformEnum) {
    GetOpenStudiesPlatformEnum["Chrome"] = "chrome";
    GetOpenStudiesPlatformEnum["Android"] = "android";
    GetOpenStudiesPlatformEnum["Ios"] = "ios";
    GetOpenStudiesPlatformEnum["Web"] = "web";
})(GetOpenStudiesPlatformEnum = exports.GetOpenStudiesPlatformEnum || (exports.GetOpenStudiesPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetStudiesPlatformEnum;
(function (GetStudiesPlatformEnum) {
    GetStudiesPlatformEnum["Chrome"] = "chrome";
    GetStudiesPlatformEnum["Android"] = "android";
    GetStudiesPlatformEnum["Ios"] = "ios";
    GetStudiesPlatformEnum["Web"] = "web";
})(GetStudiesPlatformEnum = exports.GetStudiesPlatformEnum || (exports.GetStudiesPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetStudiesCreatedPlatformEnum;
(function (GetStudiesCreatedPlatformEnum) {
    GetStudiesCreatedPlatformEnum["Chrome"] = "chrome";
    GetStudiesCreatedPlatformEnum["Android"] = "android";
    GetStudiesCreatedPlatformEnum["Ios"] = "ios";
    GetStudiesCreatedPlatformEnum["Web"] = "web";
})(GetStudiesCreatedPlatformEnum = exports.GetStudiesCreatedPlatformEnum || (exports.GetStudiesCreatedPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetStudiesJoinedPlatformEnum;
(function (GetStudiesJoinedPlatformEnum) {
    GetStudiesJoinedPlatformEnum["Chrome"] = "chrome";
    GetStudiesJoinedPlatformEnum["Android"] = "android";
    GetStudiesJoinedPlatformEnum["Ios"] = "ios";
    GetStudiesJoinedPlatformEnum["Web"] = "web";
})(GetStudiesJoinedPlatformEnum = exports.GetStudiesJoinedPlatformEnum || (exports.GetStudiesJoinedPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetStudyPlatformEnum;
(function (GetStudyPlatformEnum) {
    GetStudyPlatformEnum["Chrome"] = "chrome";
    GetStudyPlatformEnum["Android"] = "android";
    GetStudyPlatformEnum["Ios"] = "ios";
    GetStudyPlatformEnum["Web"] = "web";
})(GetStudyPlatformEnum = exports.GetStudyPlatformEnum || (exports.GetStudyPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var JoinStudyPlatformEnum;
(function (JoinStudyPlatformEnum) {
    JoinStudyPlatformEnum["Chrome"] = "chrome";
    JoinStudyPlatformEnum["Android"] = "android";
    JoinStudyPlatformEnum["Ios"] = "ios";
    JoinStudyPlatformEnum["Web"] = "web";
})(JoinStudyPlatformEnum = exports.JoinStudyPlatformEnum || (exports.JoinStudyPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PublishStudyPlatformEnum;
(function (PublishStudyPlatformEnum) {
    PublishStudyPlatformEnum["Chrome"] = "chrome";
    PublishStudyPlatformEnum["Android"] = "android";
    PublishStudyPlatformEnum["Ios"] = "ios";
    PublishStudyPlatformEnum["Web"] = "web";
})(PublishStudyPlatformEnum = exports.PublishStudyPlatformEnum || (exports.PublishStudyPlatformEnum = {}));
