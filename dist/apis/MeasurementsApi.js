"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class MeasurementsApi extends runtime.BaseAPI {
    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    deleteMeasurementRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling deleteMeasurement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["writemeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/measurements/delete`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.MeasurementDeleteToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CommonResponseFromJSON(jsonValue));
        });
    }
    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    deleteMeasurement(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMeasurementRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    getMeasurementsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.variableName !== undefined) {
                queryParameters['variableName'] = requestParameters.variableName;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.variableCategoryName !== undefined) {
                queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.sourceName !== undefined) {
                queryParameters['sourceName'] = requestParameters.sourceName;
            }
            if (requestParameters.connectorName !== undefined) {
                queryParameters['connectorName'] = requestParameters.connectorName;
            }
            if (requestParameters.value !== undefined) {
                queryParameters['value'] = requestParameters.value;
            }
            if (requestParameters.unitName !== undefined) {
                queryParameters['unitName'] = requestParameters.unitName;
            }
            if (requestParameters.earliestMeasurementTime !== undefined) {
                queryParameters['earliestMeasurementTime'] = requestParameters.earliestMeasurementTime;
            }
            if (requestParameters.latestMeasurementTime !== undefined) {
                queryParameters['latestMeasurementTime'] = requestParameters.latestMeasurementTime;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['createdAt'] = requestParameters.createdAt;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.groupingWidth !== undefined) {
                queryParameters['groupingWidth'] = requestParameters.groupingWidth;
            }
            if (requestParameters.groupingTimezone !== undefined) {
                queryParameters['groupingTimezone'] = requestParameters.groupingTimezone;
            }
            if (requestParameters.doNotProcess !== undefined) {
                queryParameters['doNotProcess'] = requestParameters.doNotProcess;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.doNotConvert !== undefined) {
                queryParameters['doNotConvert'] = requestParameters.doNotConvert;
            }
            if (requestParameters.minMaxFilter !== undefined) {
                queryParameters['minMaxFilter'] = requestParameters.minMaxFilter;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["readmeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/measurements`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.MeasurementFromJSON));
        });
    }
    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    getMeasurements(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMeasurementsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * Get pairs of measurements for correlational analysis
     */
    getPairsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.effectUnitName !== undefined) {
                queryParameters['effectUnitName'] = requestParameters.effectUnitName;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.causeUnitName !== undefined) {
                queryParameters['causeUnitName'] = requestParameters.causeUnitName;
            }
            if (requestParameters.onsetDelay !== undefined) {
                queryParameters['onsetDelay'] = requestParameters.onsetDelay;
            }
            if (requestParameters.durationOfAction !== undefined) {
                queryParameters['durationOfAction'] = requestParameters.durationOfAction;
            }
            if (requestParameters.earliestMeasurementTime !== undefined) {
                queryParameters['earliestMeasurementTime'] = requestParameters.earliestMeasurementTime;
            }
            if (requestParameters.latestMeasurementTime !== undefined) {
                queryParameters['latestMeasurementTime'] = requestParameters.latestMeasurementTime;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/pairs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.PairFromJSON));
        });
    }
    /**
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * Get pairs of measurements for correlational analysis
     */
    getPairs(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPairsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    measurementExportRequestRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v2/measurements/exportRequest`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    measurementExportRequest(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.measurementExportRequestRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    postMeasurementsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postMeasurements.');
            }
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["writemeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/measurements/post`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body.map(models_1.MeasurementSetToJSON),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PostMeasurementsResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    postMeasurements(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMeasurementsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    updateMeasurementRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updateMeasurement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/measurements/update`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.MeasurementUpdateToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CommonResponseFromJSON(jsonValue));
        });
    }
    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    updateMeasurement(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateMeasurementRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.MeasurementsApi = MeasurementsApi;
/**
    * @export
    * @enum {string}
    */
var GetMeasurementsVariableCategoryNameEnum;
(function (GetMeasurementsVariableCategoryNameEnum) {
    GetMeasurementsVariableCategoryNameEnum["Activities"] = "Activities";
    GetMeasurementsVariableCategoryNameEnum["Books"] = "Books";
    GetMeasurementsVariableCategoryNameEnum["CausesOfIllness"] = "Causes of Illness";
    GetMeasurementsVariableCategoryNameEnum["CognitivePerformance"] = "Cognitive Performance";
    GetMeasurementsVariableCategoryNameEnum["Conditions"] = "Conditions";
    GetMeasurementsVariableCategoryNameEnum["Emotions"] = "Emotions";
    GetMeasurementsVariableCategoryNameEnum["Environment"] = "Environment";
    GetMeasurementsVariableCategoryNameEnum["Foods"] = "Foods";
    GetMeasurementsVariableCategoryNameEnum["Location"] = "Location";
    GetMeasurementsVariableCategoryNameEnum["Miscellaneous"] = "Miscellaneous";
    GetMeasurementsVariableCategoryNameEnum["MoviesAndTV"] = "Movies and TV";
    GetMeasurementsVariableCategoryNameEnum["Music"] = "Music";
    GetMeasurementsVariableCategoryNameEnum["Nutrients"] = "Nutrients";
    GetMeasurementsVariableCategoryNameEnum["Payments"] = "Payments";
    GetMeasurementsVariableCategoryNameEnum["PhysicalActivity"] = "Physical Activity";
    GetMeasurementsVariableCategoryNameEnum["Physique"] = "Physique";
    GetMeasurementsVariableCategoryNameEnum["Sleep"] = "Sleep";
    GetMeasurementsVariableCategoryNameEnum["SocialInteractions"] = "Social Interactions";
    GetMeasurementsVariableCategoryNameEnum["Software"] = "Software";
    GetMeasurementsVariableCategoryNameEnum["Symptoms"] = "Symptoms";
    GetMeasurementsVariableCategoryNameEnum["Treatments"] = "Treatments";
    GetMeasurementsVariableCategoryNameEnum["VitalSigns"] = "Vital Signs";
    GetMeasurementsVariableCategoryNameEnum["Goals"] = "Goals";
})(GetMeasurementsVariableCategoryNameEnum = exports.GetMeasurementsVariableCategoryNameEnum || (exports.GetMeasurementsVariableCategoryNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetMeasurementsUnitNameEnum;
(function (GetMeasurementsUnitNameEnum) {
    GetMeasurementsUnitNameEnum["RecommendedDailyAllowance"] = "% Recommended Daily Allowance";
    GetMeasurementsUnitNameEnum["_4To4Rating"] = "-4 to 4 Rating";
    GetMeasurementsUnitNameEnum["_0To1Rating"] = "0 to 1 Rating";
    GetMeasurementsUnitNameEnum["_0To5Rating"] = "0 to 5 Rating";
    GetMeasurementsUnitNameEnum["_1To10Rating"] = "1 to 10 Rating";
    GetMeasurementsUnitNameEnum["_1To5Rating"] = "1 to 5 Rating";
    GetMeasurementsUnitNameEnum["Applications"] = "Applications";
    GetMeasurementsUnitNameEnum["BeatsPerMinute"] = "Beats per Minute";
    GetMeasurementsUnitNameEnum["Calories"] = "Calories";
    GetMeasurementsUnitNameEnum["Capsules"] = "Capsules";
    GetMeasurementsUnitNameEnum["Centimeters"] = "Centimeters";
    GetMeasurementsUnitNameEnum["Count"] = "Count";
    GetMeasurementsUnitNameEnum["DegreesCelsius"] = "Degrees Celsius";
    GetMeasurementsUnitNameEnum["DegreesEast"] = "Degrees East";
    GetMeasurementsUnitNameEnum["DegreesFahrenheit"] = "Degrees Fahrenheit";
    GetMeasurementsUnitNameEnum["DegreesNorth"] = "Degrees North";
    GetMeasurementsUnitNameEnum["Dollars"] = "Dollars";
    GetMeasurementsUnitNameEnum["Drops"] = "Drops";
    GetMeasurementsUnitNameEnum["Event"] = "Event";
    GetMeasurementsUnitNameEnum["Feet"] = "Feet";
    GetMeasurementsUnitNameEnum["Grams"] = "Grams";
    GetMeasurementsUnitNameEnum["Hours"] = "Hours";
    GetMeasurementsUnitNameEnum["Inches"] = "Inches";
    GetMeasurementsUnitNameEnum["Index"] = "Index";
    GetMeasurementsUnitNameEnum["Kilocalories"] = "Kilocalories";
    GetMeasurementsUnitNameEnum["Kilograms"] = "Kilograms";
    GetMeasurementsUnitNameEnum["Kilometers"] = "Kilometers";
    GetMeasurementsUnitNameEnum["Liters"] = "Liters";
    GetMeasurementsUnitNameEnum["Meters"] = "Meters";
    GetMeasurementsUnitNameEnum["Micrograms"] = "Micrograms";
    GetMeasurementsUnitNameEnum["MicrogramsPerDecilitre"] = "Micrograms per decilitre";
    GetMeasurementsUnitNameEnum["Miles"] = "Miles";
    GetMeasurementsUnitNameEnum["Milligrams"] = "Milligrams";
    GetMeasurementsUnitNameEnum["Milliliters"] = "Milliliters";
    GetMeasurementsUnitNameEnum["Millimeters"] = "Millimeters";
    GetMeasurementsUnitNameEnum["MillimetersMerc"] = "Millimeters Merc";
    GetMeasurementsUnitNameEnum["Milliseconds"] = "Milliseconds";
    GetMeasurementsUnitNameEnum["Minutes"] = "Minutes";
    GetMeasurementsUnitNameEnum["Pascal"] = "Pascal";
    GetMeasurementsUnitNameEnum["Percent"] = "Percent";
    GetMeasurementsUnitNameEnum["Pieces"] = "Pieces";
    GetMeasurementsUnitNameEnum["Pills"] = "Pills";
    GetMeasurementsUnitNameEnum["Pounds"] = "Pounds";
    GetMeasurementsUnitNameEnum["Puffs"] = "Puffs";
    GetMeasurementsUnitNameEnum["Seconds"] = "Seconds";
    GetMeasurementsUnitNameEnum["Serving"] = "Serving";
    GetMeasurementsUnitNameEnum["Sprays"] = "Sprays";
    GetMeasurementsUnitNameEnum["Tablets"] = "Tablets";
    GetMeasurementsUnitNameEnum["Torr"] = "Torr";
    GetMeasurementsUnitNameEnum["Units"] = "Units";
    GetMeasurementsUnitNameEnum["YesNo"] = "Yes/No";
    GetMeasurementsUnitNameEnum["PerMinute"] = "per Minute";
    GetMeasurementsUnitNameEnum["Doses"] = "Doses";
    GetMeasurementsUnitNameEnum["Quarts"] = "Quarts";
    GetMeasurementsUnitNameEnum["Ounces"] = "Ounces";
    GetMeasurementsUnitNameEnum["InternationalUnits"] = "International Units";
    GetMeasurementsUnitNameEnum["MetersPerSecond"] = "Meters per Second";
})(GetMeasurementsUnitNameEnum = exports.GetMeasurementsUnitNameEnum || (exports.GetMeasurementsUnitNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetMeasurementsPlatformEnum;
(function (GetMeasurementsPlatformEnum) {
    GetMeasurementsPlatformEnum["Chrome"] = "chrome";
    GetMeasurementsPlatformEnum["Android"] = "android";
    GetMeasurementsPlatformEnum["Ios"] = "ios";
    GetMeasurementsPlatformEnum["Web"] = "web";
})(GetMeasurementsPlatformEnum = exports.GetMeasurementsPlatformEnum || (exports.GetMeasurementsPlatformEnum = {}));
