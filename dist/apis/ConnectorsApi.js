"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class ConnectorsApi extends runtime.BaseAPI {
    /**
     * Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     * Obtain a token from 3rd party data source
     */
    connectConnectorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectorName === null || requestParameters.connectorName === undefined) {
                throw new runtime.RequiredError('connectorName', 'Required parameter requestParameters.connectorName was null or undefined when calling connectConnector.');
            }
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/connectors/{connectorName}/connect`.replace(`{${"connectorName"}}`, encodeURIComponent(String(requestParameters.connectorName))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     * Obtain a token from 3rd party data source
     */
    connectConnector(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connectConnectorRaw(requestParameters);
        });
    }
    /**
     * The disconnect method deletes any stored tokens or connection information from the connectors database.
     * Delete stored connection info
     */
    disconnectConnectorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectorName === null || requestParameters.connectorName === undefined) {
                throw new runtime.RequiredError('connectorName', 'Required parameter requestParameters.connectorName was null or undefined when calling disconnectConnector.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/connectors/{connectorName}/disconnect`.replace(`{${"connectorName"}}`, encodeURIComponent(String(requestParameters.connectorName))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * The disconnect method deletes any stored tokens or connection information from the connectors database.
     * Delete stored connection info
     */
    disconnectConnector(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.disconnectConnectorRaw(requestParameters);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List of Connectors
     */
    getConnectorsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/connectors/list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.GetConnectorsResponseFromJSON(jsonValue));
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List of Connectors
     */
    getConnectors(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConnectorsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use `qmSetupInPopup` function after connecting `connect.js`.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use `qmSetupOnPage` function after connecting `connect.js`.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use `qmSetupOnMobile` function after connecting `connect.js`.     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
     * Get embeddable connect javascript
     */
    getIntegrationJsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v3/integration.js`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use `qmSetupInPopup` function after connecting `connect.js`.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use `qmSetupOnPage` function after connecting `connect.js`.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use `qmSetupOnMobile` function after connecting `connect.js`.     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
     * Get embeddable connect javascript
     */
    getIntegrationJs(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getIntegrationJsRaw(requestParameters);
        });
    }
    /**
     * This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user\'s access_token as a URL parameter like https://app.quantimo.do/api/v3/connect/mobile?access_token=123
     * Mobile connect page
     */
    getMobileConnectPageRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v3/connect/mobile`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user\'s access_token as a URL parameter like https://app.quantimo.do/api/v3/connect/mobile?access_token=123
     * Mobile connect page
     */
    getMobileConnectPage(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getMobileConnectPageRaw(requestParameters);
        });
    }
    /**
     * The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     * Sync with data source
     */
    updateConnectorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectorName === null || requestParameters.connectorName === undefined) {
                throw new runtime.RequiredError('connectorName', 'Required parameter requestParameters.connectorName was null or undefined when calling updateConnector.');
            }
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/connectors/{connectorName}/update`.replace(`{${"connectorName"}}`, encodeURIComponent(String(requestParameters.connectorName))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     * Sync with data source
     */
    updateConnector(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateConnectorRaw(requestParameters);
        });
    }
}
exports.ConnectorsApi = ConnectorsApi;
/**
    * @export
    * @enum {string}
    */
var ConnectConnectorConnectorNameEnum;
(function (ConnectConnectorConnectorNameEnum) {
    ConnectConnectorConnectorNameEnum["Facebook"] = "facebook";
    ConnectConnectorConnectorNameEnum["Fitbit"] = "fitbit";
    ConnectConnectorConnectorNameEnum["Github"] = "github";
    ConnectConnectorConnectorNameEnum["Googlecalendar"] = "googlecalendar";
    ConnectConnectorConnectorNameEnum["Googlefit"] = "googlefit";
    ConnectConnectorConnectorNameEnum["Medhelper"] = "medhelper";
    ConnectConnectorConnectorNameEnum["Mint"] = "mint";
    ConnectConnectorConnectorNameEnum["Moodpanda"] = "moodpanda";
    ConnectConnectorConnectorNameEnum["Moodscope"] = "moodscope";
    ConnectConnectorConnectorNameEnum["Myfitnesspal"] = "myfitnesspal";
    ConnectConnectorConnectorNameEnum["Mynetdiary"] = "mynetdiary";
    ConnectConnectorConnectorNameEnum["Netatmo"] = "netatmo";
    ConnectConnectorConnectorNameEnum["Rescuetime"] = "rescuetime";
    ConnectConnectorConnectorNameEnum["Runkeeper"] = "runkeeper";
    ConnectConnectorConnectorNameEnum["Slack"] = "slack";
    ConnectConnectorConnectorNameEnum["Sleepcloud"] = "sleepcloud";
    ConnectConnectorConnectorNameEnum["Slice"] = "slice";
    ConnectConnectorConnectorNameEnum["Up"] = "up";
    ConnectConnectorConnectorNameEnum["Whatpulse"] = "whatpulse";
    ConnectConnectorConnectorNameEnum["Withings"] = "withings";
    ConnectConnectorConnectorNameEnum["Worldweatheronline"] = "worldweatheronline";
    ConnectConnectorConnectorNameEnum["Foursquare"] = "foursquare";
    ConnectConnectorConnectorNameEnum["Strava"] = "strava";
    ConnectConnectorConnectorNameEnum["Gmail"] = "gmail";
})(ConnectConnectorConnectorNameEnum = exports.ConnectConnectorConnectorNameEnum || (exports.ConnectConnectorConnectorNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DisconnectConnectorConnectorNameEnum;
(function (DisconnectConnectorConnectorNameEnum) {
    DisconnectConnectorConnectorNameEnum["Facebook"] = "facebook";
    DisconnectConnectorConnectorNameEnum["Fitbit"] = "fitbit";
    DisconnectConnectorConnectorNameEnum["Github"] = "github";
    DisconnectConnectorConnectorNameEnum["Googlecalendar"] = "googlecalendar";
    DisconnectConnectorConnectorNameEnum["Googlefit"] = "googlefit";
    DisconnectConnectorConnectorNameEnum["Medhelper"] = "medhelper";
    DisconnectConnectorConnectorNameEnum["Mint"] = "mint";
    DisconnectConnectorConnectorNameEnum["Moodpanda"] = "moodpanda";
    DisconnectConnectorConnectorNameEnum["Moodscope"] = "moodscope";
    DisconnectConnectorConnectorNameEnum["Myfitnesspal"] = "myfitnesspal";
    DisconnectConnectorConnectorNameEnum["Mynetdiary"] = "mynetdiary";
    DisconnectConnectorConnectorNameEnum["Netatmo"] = "netatmo";
    DisconnectConnectorConnectorNameEnum["Rescuetime"] = "rescuetime";
    DisconnectConnectorConnectorNameEnum["Runkeeper"] = "runkeeper";
    DisconnectConnectorConnectorNameEnum["Slack"] = "slack";
    DisconnectConnectorConnectorNameEnum["Sleepcloud"] = "sleepcloud";
    DisconnectConnectorConnectorNameEnum["Slice"] = "slice";
    DisconnectConnectorConnectorNameEnum["Up"] = "up";
    DisconnectConnectorConnectorNameEnum["Whatpulse"] = "whatpulse";
    DisconnectConnectorConnectorNameEnum["Withings"] = "withings";
    DisconnectConnectorConnectorNameEnum["Worldweatheronline"] = "worldweatheronline";
    DisconnectConnectorConnectorNameEnum["Foursquare"] = "foursquare";
    DisconnectConnectorConnectorNameEnum["Strava"] = "strava";
    DisconnectConnectorConnectorNameEnum["Gmail"] = "gmail";
})(DisconnectConnectorConnectorNameEnum = exports.DisconnectConnectorConnectorNameEnum || (exports.DisconnectConnectorConnectorNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetConnectorsPlatformEnum;
(function (GetConnectorsPlatformEnum) {
    GetConnectorsPlatformEnum["Chrome"] = "chrome";
    GetConnectorsPlatformEnum["Android"] = "android";
    GetConnectorsPlatformEnum["Ios"] = "ios";
    GetConnectorsPlatformEnum["Web"] = "web";
})(GetConnectorsPlatformEnum = exports.GetConnectorsPlatformEnum || (exports.GetConnectorsPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetIntegrationJsPlatformEnum;
(function (GetIntegrationJsPlatformEnum) {
    GetIntegrationJsPlatformEnum["Chrome"] = "chrome";
    GetIntegrationJsPlatformEnum["Android"] = "android";
    GetIntegrationJsPlatformEnum["Ios"] = "ios";
    GetIntegrationJsPlatformEnum["Web"] = "web";
})(GetIntegrationJsPlatformEnum = exports.GetIntegrationJsPlatformEnum || (exports.GetIntegrationJsPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateConnectorConnectorNameEnum;
(function (UpdateConnectorConnectorNameEnum) {
    UpdateConnectorConnectorNameEnum["Facebook"] = "facebook";
    UpdateConnectorConnectorNameEnum["Fitbit"] = "fitbit";
    UpdateConnectorConnectorNameEnum["Github"] = "github";
    UpdateConnectorConnectorNameEnum["Googlecalendar"] = "googlecalendar";
    UpdateConnectorConnectorNameEnum["Googlefit"] = "googlefit";
    UpdateConnectorConnectorNameEnum["Medhelper"] = "medhelper";
    UpdateConnectorConnectorNameEnum["Mint"] = "mint";
    UpdateConnectorConnectorNameEnum["Moodpanda"] = "moodpanda";
    UpdateConnectorConnectorNameEnum["Moodscope"] = "moodscope";
    UpdateConnectorConnectorNameEnum["Myfitnesspal"] = "myfitnesspal";
    UpdateConnectorConnectorNameEnum["Mynetdiary"] = "mynetdiary";
    UpdateConnectorConnectorNameEnum["Netatmo"] = "netatmo";
    UpdateConnectorConnectorNameEnum["Rescuetime"] = "rescuetime";
    UpdateConnectorConnectorNameEnum["Runkeeper"] = "runkeeper";
    UpdateConnectorConnectorNameEnum["Slack"] = "slack";
    UpdateConnectorConnectorNameEnum["Sleepcloud"] = "sleepcloud";
    UpdateConnectorConnectorNameEnum["Slice"] = "slice";
    UpdateConnectorConnectorNameEnum["Up"] = "up";
    UpdateConnectorConnectorNameEnum["Whatpulse"] = "whatpulse";
    UpdateConnectorConnectorNameEnum["Withings"] = "withings";
    UpdateConnectorConnectorNameEnum["Worldweatheronline"] = "worldweatheronline";
    UpdateConnectorConnectorNameEnum["Foursquare"] = "foursquare";
    UpdateConnectorConnectorNameEnum["Strava"] = "strava";
    UpdateConnectorConnectorNameEnum["Gmail"] = "gmail";
})(UpdateConnectorConnectorNameEnum = exports.UpdateConnectorConnectorNameEnum || (exports.UpdateConnectorConnectorNameEnum = {}));
