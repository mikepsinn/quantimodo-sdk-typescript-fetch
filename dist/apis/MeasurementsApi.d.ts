/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CommonResponse, Measurement, MeasurementDelete, MeasurementSet, MeasurementUpdate, Pair, PostMeasurementsResponse } from '../models';
export interface DeleteMeasurementRequest {
    body: MeasurementDelete;
}
export interface GetMeasurementsRequest {
    variableName?: string;
    sort?: string;
    limit?: number;
    offset?: number;
    variableCategoryName?: GetMeasurementsVariableCategoryNameEnum;
    updatedAt?: string;
    userId?: number;
    sourceName?: string;
    connectorName?: string;
    value?: string;
    unitName?: GetMeasurementsUnitNameEnum;
    earliestMeasurementTime?: string;
    latestMeasurementTime?: string;
    createdAt?: string;
    id?: number;
    groupingWidth?: number;
    groupingTimezone?: string;
    doNotProcess?: boolean;
    clientId?: string;
    doNotConvert?: boolean;
    minMaxFilter?: boolean;
    platform?: GetMeasurementsPlatformEnum;
}
export interface GetPairsRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    effectUnitName?: string;
    userId?: number;
    causeUnitName?: string;
    onsetDelay?: string;
    durationOfAction?: string;
    earliestMeasurementTime?: string;
    latestMeasurementTime?: string;
    limit?: number;
    offset?: number;
    sort?: string;
}
export interface MeasurementExportRequestRequest {
    userId?: number;
}
export interface PostMeasurementsRequest {
    body: Array<MeasurementSet>;
    userId?: number;
}
export interface UpdateMeasurementRequest {
    body: MeasurementUpdate;
}
/**
 *
 */
export declare class MeasurementsApi extends runtime.BaseAPI {
    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    deleteMeasurementRaw(requestParameters: DeleteMeasurementRequest): Promise<runtime.ApiResponse<CommonResponse>>;
    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    deleteMeasurement(requestParameters: DeleteMeasurementRequest): Promise<CommonResponse>;
    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    getMeasurementsRaw(requestParameters: GetMeasurementsRequest): Promise<runtime.ApiResponse<Array<Measurement>>>;
    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    getMeasurements(requestParameters: GetMeasurementsRequest): Promise<Array<Measurement>>;
    /**
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * Get pairs of measurements for correlational analysis
     */
    getPairsRaw(requestParameters: GetPairsRequest): Promise<runtime.ApiResponse<Array<Pair>>>;
    /**
     * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
     * Get pairs of measurements for correlational analysis
     */
    getPairs(requestParameters: GetPairsRequest): Promise<Array<Pair>>;
    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    measurementExportRequestRaw(requestParameters: MeasurementExportRequestRequest): Promise<runtime.ApiResponse<number>>;
    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    measurementExportRequest(requestParameters: MeasurementExportRequestRequest): Promise<number>;
    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    postMeasurementsRaw(requestParameters: PostMeasurementsRequest): Promise<runtime.ApiResponse<PostMeasurementsResponse>>;
    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    postMeasurements(requestParameters: PostMeasurementsRequest): Promise<PostMeasurementsResponse>;
    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    updateMeasurementRaw(requestParameters: UpdateMeasurementRequest): Promise<runtime.ApiResponse<CommonResponse>>;
    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    updateMeasurement(requestParameters: UpdateMeasurementRequest): Promise<CommonResponse>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetMeasurementsVariableCategoryNameEnum {
    Activities = "Activities",
    Books = "Books",
    CausesOfIllness = "Causes of Illness",
    CognitivePerformance = "Cognitive Performance",
    Conditions = "Conditions",
    Emotions = "Emotions",
    Environment = "Environment",
    Foods = "Foods",
    Location = "Location",
    Miscellaneous = "Miscellaneous",
    MoviesAndTV = "Movies and TV",
    Music = "Music",
    Nutrients = "Nutrients",
    Payments = "Payments",
    PhysicalActivity = "Physical Activity",
    Physique = "Physique",
    Sleep = "Sleep",
    SocialInteractions = "Social Interactions",
    Software = "Software",
    Symptoms = "Symptoms",
    Treatments = "Treatments",
    VitalSigns = "Vital Signs",
    Goals = "Goals"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetMeasurementsUnitNameEnum {
    RecommendedDailyAllowance = "% Recommended Daily Allowance",
    _4To4Rating = "-4 to 4 Rating",
    _0To1Rating = "0 to 1 Rating",
    _0To5Rating = "0 to 5 Rating",
    _1To10Rating = "1 to 10 Rating",
    _1To5Rating = "1 to 5 Rating",
    Applications = "Applications",
    BeatsPerMinute = "Beats per Minute",
    Calories = "Calories",
    Capsules = "Capsules",
    Centimeters = "Centimeters",
    Count = "Count",
    DegreesCelsius = "Degrees Celsius",
    DegreesEast = "Degrees East",
    DegreesFahrenheit = "Degrees Fahrenheit",
    DegreesNorth = "Degrees North",
    Dollars = "Dollars",
    Drops = "Drops",
    Event = "Event",
    Feet = "Feet",
    Grams = "Grams",
    Hours = "Hours",
    Inches = "Inches",
    Index = "Index",
    Kilocalories = "Kilocalories",
    Kilograms = "Kilograms",
    Kilometers = "Kilometers",
    Liters = "Liters",
    Meters = "Meters",
    Micrograms = "Micrograms",
    MicrogramsPerDecilitre = "Micrograms per decilitre",
    Miles = "Miles",
    Milligrams = "Milligrams",
    Milliliters = "Milliliters",
    Millimeters = "Millimeters",
    MillimetersMerc = "Millimeters Merc",
    Milliseconds = "Milliseconds",
    Minutes = "Minutes",
    Pascal = "Pascal",
    Percent = "Percent",
    Pieces = "Pieces",
    Pills = "Pills",
    Pounds = "Pounds",
    Puffs = "Puffs",
    Seconds = "Seconds",
    Serving = "Serving",
    Sprays = "Sprays",
    Tablets = "Tablets",
    Torr = "Torr",
    Units = "Units",
    YesNo = "Yes/No",
    PerMinute = "per Minute",
    Doses = "Doses",
    Quarts = "Quarts",
    Ounces = "Ounces",
    InternationalUnits = "International Units",
    MetersPerSecond = "Meters per Second"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetMeasurementsPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
