"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class AnalyticsApi extends runtime.BaseAPI {
    /**
     * Get explanations of  correlations based on data from a single user.
     * Get correlation explanations
     */
    getCorrelationExplanationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/correlations/explanations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.CorrelationFromJSON));
        });
    }
    /**
     * Get explanations of  correlations based on data from a single user.
     * Get correlation explanations
     */
    getCorrelationExplanations(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCorrelationExplanationsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Get a list of correlations that can be used to display top predictors of a given outcome like mood, for instance.
     * Get correlations
     */
    getCorrelationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.causeVariableName !== undefined) {
                queryParameters['causeVariableName'] = requestParameters.causeVariableName;
            }
            if (requestParameters.effectVariableName !== undefined) {
                queryParameters['effectVariableName'] = requestParameters.effectVariableName;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['causeVariableId'] = requestParameters.causeVariableId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effectVariableId'] = requestParameters.effectVariableId;
            }
            if (requestParameters.predictorVariableName !== undefined) {
                queryParameters['predictorVariableName'] = requestParameters.predictorVariableName;
            }
            if (requestParameters.outcomeVariableName !== undefined) {
                queryParameters['outcomeVariableName'] = requestParameters.outcomeVariableName;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.correlationCoefficient !== undefined) {
                queryParameters['correlationCoefficient'] = requestParameters.correlationCoefficient;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.outcomesOfInterest !== undefined) {
                queryParameters['outcomesOfInterest'] = requestParameters.outcomesOfInterest;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.commonOnly !== undefined) {
                queryParameters['commonOnly'] = requestParameters.commonOnly;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/correlations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.GetCorrelationsResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of correlations that can be used to display top predictors of a given outcome like mood, for instance.
     * Get correlations
     */
    getCorrelations(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCorrelationsRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.AnalyticsApi = AnalyticsApi;
/**
    * @export
    * @enum {string}
    */
var GetCorrelationsPlatformEnum;
(function (GetCorrelationsPlatformEnum) {
    GetCorrelationsPlatformEnum["Chrome"] = "chrome";
    GetCorrelationsPlatformEnum["Android"] = "android";
    GetCorrelationsPlatformEnum["Ios"] = "ios";
    GetCorrelationsPlatformEnum["Web"] = "web";
})(GetCorrelationsPlatformEnum = exports.GetCorrelationsPlatformEnum || (exports.GetCorrelationsPlatformEnum = {}));
