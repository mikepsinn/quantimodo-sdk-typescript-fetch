"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class UserApi extends runtime.BaseAPI {
    /**
     * Delete user account. Only the client app that created a user can delete that user.
     * Delete user
     */
    deleteUserRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reason === null || requestParameters.reason === undefined) {
                throw new runtime.RequiredError('reason', 'Required parameter requestParameters.reason was null or undefined when calling deleteUser.');
            }
            const queryParameters = {};
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.reason !== undefined) {
                queryParameters['reason'] = requestParameters.reason;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["writemeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/user/delete`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CommonResponseFromJSON(jsonValue));
        });
    }
    /**
     * Delete user account. Only the client app that created a user can delete that user.
     * Delete user
     */
    deleteUser(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteUserRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Returns user info.  If no userId is specified, returns info for currently authenticated user
     * Get user info
     */
    getUserRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['createdAt'] = requestParameters.createdAt;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.appVersion !== undefined) {
                queryParameters['appVersion'] = requestParameters.appVersion;
            }
            if (requestParameters.clientUserId !== undefined) {
                queryParameters['clientUserId'] = requestParameters.clientUserId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.log !== undefined) {
                queryParameters['log'] = requestParameters.log;
            }
            if (requestParameters.pwd !== undefined) {
                queryParameters['pwd'] = requestParameters.pwd;
            }
            if (requestParameters.includeAuthorizedClients !== undefined) {
                queryParameters['includeAuthorizedClients'] = requestParameters.includeAuthorizedClients;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/user`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.UserFromJSON(jsonValue));
        });
    }
    /**
     * Returns user info.  If no userId is specified, returns info for currently authenticated user
     * Get user info
     */
    getUser(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Get UserBlogs
     * Get UserBlogs
     */
    getUserBlogsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['createdAt'] = requestParameters.createdAt;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["readmeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/userBlogs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.UserBlogsResponseFromJSON));
        });
    }
    /**
     * Get UserBlogs
     * Get UserBlogs
     */
    getUserBlogs(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserBlogsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Returns users who have granted access to their data
     * Get users who shared data
     */
    getUsersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['createdAt'] = requestParameters.createdAt;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.appVersion !== undefined) {
                queryParameters['appVersion'] = requestParameters.appVersion;
            }
            if (requestParameters.clientUserId !== undefined) {
                queryParameters['clientUserId'] = requestParameters.clientUserId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.log !== undefined) {
                queryParameters['log'] = requestParameters.log;
            }
            if (requestParameters.pwd !== undefined) {
                queryParameters['pwd'] = requestParameters.pwd;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["basic"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/users`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.UsersResponseFromJSON(jsonValue));
        });
    }
    /**
     * Returns users who have granted access to their data
     * Get users who shared data
     */
    getUsers(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUsersRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Post UserBlogs
     * Post UserBlogs
     */
    postUserBlogsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['createdAt'] = requestParameters.createdAt;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["readmeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/userBlogs`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.UserBlogsResponseFromJSON));
        });
    }
    /**
     * Post UserBlogs
     * Post UserBlogs
     */
    postUserBlogs(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postUserBlogsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Post UserSettings
     * Post UserSettings
     */
    postUserSettingsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postUserSettings.');
            }
            const queryParameters = {};
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v3/userSettings`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.UserToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PostUserSettingsResponseFromJSON(jsonValue));
        });
    }
    /**
     * Post UserSettings
     * Post UserSettings
     */
    postUserSettings(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postUserSettingsRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.UserApi = UserApi;
/**
    * @export
    * @enum {string}
    */
var DeleteUserPlatformEnum;
(function (DeleteUserPlatformEnum) {
    DeleteUserPlatformEnum["Chrome"] = "chrome";
    DeleteUserPlatformEnum["Android"] = "android";
    DeleteUserPlatformEnum["Ios"] = "ios";
    DeleteUserPlatformEnum["Web"] = "web";
})(DeleteUserPlatformEnum = exports.DeleteUserPlatformEnum || (exports.DeleteUserPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetUserPlatformEnum;
(function (GetUserPlatformEnum) {
    GetUserPlatformEnum["Chrome"] = "chrome";
    GetUserPlatformEnum["Android"] = "android";
    GetUserPlatformEnum["Ios"] = "ios";
    GetUserPlatformEnum["Web"] = "web";
})(GetUserPlatformEnum = exports.GetUserPlatformEnum || (exports.GetUserPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetUserBlogsPlatformEnum;
(function (GetUserBlogsPlatformEnum) {
    GetUserBlogsPlatformEnum["Chrome"] = "chrome";
    GetUserBlogsPlatformEnum["Android"] = "android";
    GetUserBlogsPlatformEnum["Ios"] = "ios";
    GetUserBlogsPlatformEnum["Web"] = "web";
})(GetUserBlogsPlatformEnum = exports.GetUserBlogsPlatformEnum || (exports.GetUserBlogsPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetUsersPlatformEnum;
(function (GetUsersPlatformEnum) {
    GetUsersPlatformEnum["Chrome"] = "chrome";
    GetUsersPlatformEnum["Android"] = "android";
    GetUsersPlatformEnum["Ios"] = "ios";
    GetUsersPlatformEnum["Web"] = "web";
})(GetUsersPlatformEnum = exports.GetUsersPlatformEnum || (exports.GetUsersPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PostUserBlogsPlatformEnum;
(function (PostUserBlogsPlatformEnum) {
    PostUserBlogsPlatformEnum["Chrome"] = "chrome";
    PostUserBlogsPlatformEnum["Android"] = "android";
    PostUserBlogsPlatformEnum["Ios"] = "ios";
    PostUserBlogsPlatformEnum["Web"] = "web";
})(PostUserBlogsPlatformEnum = exports.PostUserBlogsPlatformEnum || (exports.PostUserBlogsPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PostUserSettingsPlatformEnum;
(function (PostUserSettingsPlatformEnum) {
    PostUserSettingsPlatformEnum["Chrome"] = "chrome";
    PostUserSettingsPlatformEnum["Android"] = "android";
    PostUserSettingsPlatformEnum["Ios"] = "ios";
    PostUserSettingsPlatformEnum["Web"] = "web";
})(PostUserSettingsPlatformEnum = exports.PostUserSettingsPlatformEnum || (exports.PostUserSettingsPlatformEnum = {}));
