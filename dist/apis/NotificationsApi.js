"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class NotificationsApi extends runtime.BaseAPI {
    /**
     * Get NotificationPreferences
     * Get NotificationPreferences
     */
    getNotificationPreferencesRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v3/notificationPreferences`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get NotificationPreferences
     * Get NotificationPreferences
     */
    getNotificationPreferences() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getNotificationPreferencesRaw();
        });
    }
    /**
     * Get Notifications
     * Get Notifications
     */
    getNotificationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['createdAt'] = requestParameters.createdAt;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["readmeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/notifications`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.NotificationsResponseFromJSON));
        });
    }
    /**
     * Get Notifications
     * Get Notifications
     */
    getNotifications(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNotificationsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Post user token for Android, iOS, or web push notifications
     * Post DeviceTokens
     */
    postDeviceTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postDeviceToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v3/deviceTokens`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.DeviceTokenToJSON(requestParameters.body),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Post user token for Android, iOS, or web push notifications
     * Post DeviceTokens
     */
    postDeviceToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.postDeviceTokenRaw(requestParameters);
        });
    }
    /**
     * Post Notifications
     * Post Notifications
     */
    postNotificationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updatedAt'] = requestParameters.updatedAt;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['createdAt'] = requestParameters.createdAt;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['clientId'] = requestParameters.clientId;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                queryParameters["access_token"] = this.configuration.apiKey("access_token"); // access_token authentication
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                if (typeof this.configuration.accessToken === 'function') {
                    headerParameters["Authorization"] = this.configuration.accessToken("quantimodo_oauth2", ["readmeasurements"]);
                }
                else {
                    headerParameters["Authorization"] = this.configuration.accessToken;
                }
            }
            const response = yield this.request({
                path: `/v3/notifications`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.NotificationsResponseFromJSON));
        });
    }
    /**
     * Post Notifications
     * Post Notifications
     */
    postNotifications(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postNotificationsRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.NotificationsApi = NotificationsApi;
/**
    * @export
    * @enum {string}
    */
var GetNotificationsPlatformEnum;
(function (GetNotificationsPlatformEnum) {
    GetNotificationsPlatformEnum["Chrome"] = "chrome";
    GetNotificationsPlatformEnum["Android"] = "android";
    GetNotificationsPlatformEnum["Ios"] = "ios";
    GetNotificationsPlatformEnum["Web"] = "web";
})(GetNotificationsPlatformEnum = exports.GetNotificationsPlatformEnum || (exports.GetNotificationsPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PostNotificationsPlatformEnum;
(function (PostNotificationsPlatformEnum) {
    PostNotificationsPlatformEnum["Chrome"] = "chrome";
    PostNotificationsPlatformEnum["Android"] = "android";
    PostNotificationsPlatformEnum["Ios"] = "ios";
    PostNotificationsPlatformEnum["Web"] = "web";
})(PostNotificationsPlatformEnum = exports.PostNotificationsPlatformEnum || (exports.PostNotificationsPlatformEnum = {}));
