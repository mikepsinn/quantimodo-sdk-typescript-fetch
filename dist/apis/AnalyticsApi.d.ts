/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Correlation, GetCorrelationsResponse } from '../models';
export interface GetCorrelationExplanationsRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
}
export interface GetCorrelationsRequest {
    causeVariableName?: string;
    effectVariableName?: string;
    causeVariableId?: number;
    effectVariableId?: number;
    predictorVariableName?: string;
    outcomeVariableName?: string;
    sort?: string;
    limit?: number;
    offset?: number;
    userId?: number;
    correlationCoefficient?: string;
    updatedAt?: string;
    outcomesOfInterest?: boolean;
    clientId?: string;
    commonOnly?: boolean;
    platform?: GetCorrelationsPlatformEnum;
}
/**
 *
 */
export declare class AnalyticsApi extends runtime.BaseAPI {
    /**
     * Get explanations of  correlations based on data from a single user.
     * Get correlation explanations
     */
    getCorrelationExplanationsRaw(requestParameters: GetCorrelationExplanationsRequest): Promise<runtime.ApiResponse<Array<Correlation>>>;
    /**
     * Get explanations of  correlations based on data from a single user.
     * Get correlation explanations
     */
    getCorrelationExplanations(requestParameters: GetCorrelationExplanationsRequest): Promise<Array<Correlation>>;
    /**
     * Get a list of correlations that can be used to display top predictors of a given outcome like mood, for instance.
     * Get correlations
     */
    getCorrelationsRaw(requestParameters: GetCorrelationsRequest): Promise<runtime.ApiResponse<GetCorrelationsResponse>>;
    /**
     * Get a list of correlations that can be used to display top predictors of a given outcome like mood, for instance.
     * Get correlations
     */
    getCorrelations(requestParameters: GetCorrelationsRequest): Promise<GetCorrelationsResponse>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetCorrelationsPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
