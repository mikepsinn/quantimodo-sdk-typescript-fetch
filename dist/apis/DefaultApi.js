"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * QuantiModo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
/**
 *
 */
class DefaultApi extends runtime.BaseAPI {
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Delete a Aggregate Correlation
     */
    deleteAggregateCorrelationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteAggregateCorrelation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/aggregate_correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Delete a Aggregate Correlation
     */
    deleteAggregateCorrelation(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteAggregateCorrelationRaw(requestParameters);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Delete a Application
     */
    deleteApplicationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteApplication.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Delete a Application
     */
    deleteApplication(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteApplicationRaw(requestParameters);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Delete a Collaborator
     */
    deleteCollaboratorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteCollaborator.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/collaborators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Delete a Collaborator
     */
    deleteCollaborator(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCollaboratorRaw(requestParameters);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a Common Tag
     */
    deleteCommonTagRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteCommonTag.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/common_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a Common Tag
     */
    deleteCommonTag(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCommonTagRaw(requestParameters);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Delete a Connection
     */
    deleteConnectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteConnection.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Delete a Connection
     */
    deleteConnection(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteConnectionRaw(requestParameters);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Delete a Connector
     */
    deleteConnectorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteConnector.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Delete a Connector
     */
    deleteConnector(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteConnectorRaw(requestParameters);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Delete a Connector Import
     */
    deleteConnectorImportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteConnectorImport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Delete a Connector Import
     */
    deleteConnectorImport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteConnectorImportRaw(requestParameters);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Delete a Connector Request
     */
    deleteConnectorRequestRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteConnectorRequest.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_requests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Delete a Connector Request
     */
    deleteConnectorRequest(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteConnectorRequestRaw(requestParameters);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Delete a Correlation
     */
    deleteCorrelationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteCorrelation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Delete a Correlation
     */
    deleteCorrelation(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCorrelationRaw(requestParameters);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Delete a Device Token
     */
    deleteDeviceTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteDeviceToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/device_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Delete a Device Token
     */
    deleteDeviceToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteDeviceTokenRaw(requestParameters);
        });
    }
    /**
     * Measurement
     * Delete a Measurement
     */
    deleteMeasurementRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteMeasurement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Measurement
     * Delete a Measurement
     */
    deleteMeasurement(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteMeasurementRaw(requestParameters);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Delete a Measurement Export
     */
    deleteMeasurementExportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteMeasurementExport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Delete a Measurement Export
     */
    deleteMeasurementExport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteMeasurementExportRaw(requestParameters);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Delete a Measurement Import
     */
    deleteMeasurementImportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteMeasurementImport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Delete a Measurement Import
     */
    deleteMeasurementImport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteMeasurementImportRaw(requestParameters);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Delete a Notification
     */
    deleteNotificationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteNotification.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Delete a Notification
     */
    deleteNotification(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteNotificationRaw(requestParameters);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Delete a OAuth Access Token
     */
    deleteOAuthAccessTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteOAuthAccessToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_access_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Delete a OAuth Access Token
     */
    deleteOAuthAccessToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteOAuthAccessTokenRaw(requestParameters);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Delete a OAuth Client
     */
    deleteOAuthClientRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteOAuthClient.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Delete a OAuth Client
     */
    deleteOAuthClient(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteOAuthClientRaw(requestParameters);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Delete a Post
     */
    deletePostRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deletePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/wp_posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Delete a Post
     */
    deletePost(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deletePostRaw(requestParameters);
        });
    }
    /**
     * A sent email
     * Delete a Sent Email
     */
    deleteSentEmailRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteSentEmail.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/sent_emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A sent email
     * Delete a Sent Email
     */
    deleteSentEmail(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteSentEmailRaw(requestParameters);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Delete a Study
     */
    deleteStudyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteStudy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Delete a Study
     */
    deleteStudy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteStudyRaw(requestParameters);
        });
    }
    /**
     * Favorite
     * Delete a Tracking Reminder
     */
    deleteTrackingReminderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteTrackingReminder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Favorite
     * Delete a Tracking Reminder
     */
    deleteTrackingReminder(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTrackingReminderRaw(requestParameters);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Delete a Tracking Reminder Notification
     */
    deleteTrackingReminderNotificationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteTrackingReminderNotification.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminder_notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Delete a Tracking Reminder Notification
     */
    deleteTrackingReminderNotification(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTrackingReminderNotificationRaw(requestParameters);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Delete a User
     */
    deleteUserRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteUser.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Delete a User
     */
    deleteUser(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteUserRaw(requestParameters);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a User Tag
     */
    deleteUserTagRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteUserTag.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a User Tag
     */
    deleteUserTag(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteUserTagRaw(requestParameters);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Delete a User Variable
     */
    deleteUserVariableRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteUserVariable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Delete a User Variable
     */
    deleteUserVariable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteUserVariableRaw(requestParameters);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Delete a Variable
     */
    deleteVariableRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteVariable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Delete a Variable
     */
    deleteVariable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteVariableRaw(requestParameters);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Delete a Variable Category
     */
    deleteVariableCategoryRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteVariableCategory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Delete a Variable Category
     */
    deleteVariableCategory(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteVariableCategoryRaw(requestParameters);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Delete a Variable User Source
     */
    deleteVariableUserSourceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteVariableUserSource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_user_sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Delete a Variable User Source
     */
    deleteVariableUserSource(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteVariableUserSourceRaw(requestParameters);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Delete a Vote
     */
    deleteVoteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteVote.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/votes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Delete a Vote
     */
    deleteVote(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteVoteRaw(requestParameters);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Get a Aggregate Correlation
     */
    getAggregateCorrelationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getAggregateCorrelation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/aggregate_correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Get a Aggregate Correlation
     */
    getAggregateCorrelation(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getAggregateCorrelationRaw(requestParameters);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Get a Application
     */
    getApplicationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getApplication.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Get a Application
     */
    getApplication(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getApplicationRaw(requestParameters);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Get a Collaborator
     */
    getCollaboratorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getCollaborator.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/collaborators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Get a Collaborator
     */
    getCollaborator(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getCollaboratorRaw(requestParameters);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a Common Tag
     */
    getCommonTagRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getCommonTag.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/common_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a Common Tag
     */
    getCommonTag(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getCommonTagRaw(requestParameters);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Get a Connection
     */
    getConnectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getConnection.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Get a Connection
     */
    getConnection(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getConnectionRaw(requestParameters);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Get a Connector
     */
    getConnectorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getConnector.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Get a Connector
     */
    getConnector(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getConnectorRaw(requestParameters);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Get a Connector Import
     */
    getConnectorImportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getConnectorImport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Get a Connector Import
     */
    getConnectorImport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getConnectorImportRaw(requestParameters);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Get a Connector Request
     */
    getConnectorRequestRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getConnectorRequest.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_requests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Get a Connector Request
     */
    getConnectorRequest(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getConnectorRequestRaw(requestParameters);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Get a Correlation
     */
    getCorrelationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getCorrelation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Get a Correlation
     */
    getCorrelation(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getCorrelationRaw(requestParameters);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Get a Device Token
     */
    getDeviceTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getDeviceToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/device_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Get a Device Token
     */
    getDeviceToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getDeviceTokenRaw(requestParameters);
        });
    }
    /**
     * Measurement
     * Get a Measurement
     */
    getMeasurementRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getMeasurement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Measurement
     * Get a Measurement
     */
    getMeasurement(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getMeasurementRaw(requestParameters);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Get a Measurement Export
     */
    getMeasurementExportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getMeasurementExport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Get a Measurement Export
     */
    getMeasurementExport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getMeasurementExportRaw(requestParameters);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Get a Measurement Import
     */
    getMeasurementImportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getMeasurementImport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Get a Measurement Import
     */
    getMeasurementImport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getMeasurementImportRaw(requestParameters);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Get a Notification
     */
    getNotificationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getNotification.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Get a Notification
     */
    getNotification(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getNotificationRaw(requestParameters);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Get a OAuth Access Token
     */
    getOAuthAccessTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getOAuthAccessToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_access_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Get a OAuth Access Token
     */
    getOAuthAccessToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getOAuthAccessTokenRaw(requestParameters);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Get a OAuth Client
     */
    getOAuthClientRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getOAuthClient.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Get a OAuth Client
     */
    getOAuthClient(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getOAuthClientRaw(requestParameters);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Get a Post
     */
    getPostRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/wp_posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Get a Post
     */
    getPost(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getPostRaw(requestParameters);
        });
    }
    /**
     * A sent email
     * Get a Sent Email
     */
    getSentEmailRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getSentEmail.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/sent_emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A sent email
     * Get a Sent Email
     */
    getSentEmail(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getSentEmailRaw(requestParameters);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Get a Study
     */
    getStudyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getStudy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Get a Study
     */
    getStudy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getStudyRaw(requestParameters);
        });
    }
    /**
     * Favorite
     * Get a Tracking Reminder
     */
    getTrackingReminderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getTrackingReminder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Favorite
     * Get a Tracking Reminder
     */
    getTrackingReminder(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getTrackingReminderRaw(requestParameters);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Get a Tracking Reminder Notification
     */
    getTrackingReminderNotificationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getTrackingReminderNotification.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminder_notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Get a Tracking Reminder Notification
     */
    getTrackingReminderNotification(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getTrackingReminderNotificationRaw(requestParameters);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Get a User
     */
    getUserRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUser.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Get a User
     */
    getUser(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getUserRaw(requestParameters);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a User Tag
     */
    getUserTagRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUserTag.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a User Tag
     */
    getUserTag(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getUserTagRaw(requestParameters);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Get a User Variable
     */
    getUserVariableRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getUserVariable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Get a User Variable
     */
    getUserVariable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getUserVariableRaw(requestParameters);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Get a Variable
     */
    getVariableRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getVariable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Get a Variable
     */
    getVariable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getVariableRaw(requestParameters);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Get a Variable Category
     */
    getVariableCategoryRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getVariableCategory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Get a Variable Category
     */
    getVariableCategory(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getVariableCategoryRaw(requestParameters);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Get a Variable User Source
     */
    getVariableUserSourceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getVariableUserSource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_user_sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Get a Variable User Source
     */
    getVariableUserSource(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getVariableUserSourceRaw(requestParameters);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Get a Vote
     */
    getVoteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getVote.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/votes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Get a Vote
     */
    getVote(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getVoteRaw(requestParameters);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * List Aggregate Correlations
     */
    listAggregateCorrelationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.aggregateQmScore !== undefined) {
                queryParameters['aggregate_qm_score'] = requestParameters.aggregateQmScore;
            }
            if (requestParameters.analysisEndedAt !== undefined) {
                queryParameters['analysis_ended_at'] = requestParameters.analysisEndedAt.toISOString();
            }
            if (requestParameters.analysisRequestedAt !== undefined) {
                queryParameters['analysis_requested_at'] = requestParameters.analysisRequestedAt.toISOString();
            }
            if (requestParameters.analysisStartedAt !== undefined) {
                queryParameters['analysis_started_at'] = requestParameters.analysisStartedAt.toISOString();
            }
            if (requestParameters.averageDailyHighCause !== undefined) {
                queryParameters['average_daily_high_cause'] = requestParameters.averageDailyHighCause;
            }
            if (requestParameters.averageDailyLowCause !== undefined) {
                queryParameters['average_daily_low_cause'] = requestParameters.averageDailyLowCause;
            }
            if (requestParameters.averageEffect !== undefined) {
                queryParameters['average_effect'] = requestParameters.averageEffect;
            }
            if (requestParameters.averageEffectFollowingHighCause !== undefined) {
                queryParameters['average_effect_following_high_cause'] = requestParameters.averageEffectFollowingHighCause;
            }
            if (requestParameters.averageEffectFollowingLowCause !== undefined) {
                queryParameters['average_effect_following_low_cause'] = requestParameters.averageEffectFollowingLowCause;
            }
            if (requestParameters.averageVote !== undefined) {
                queryParameters['average_vote'] = requestParameters.averageVote;
            }
            if (requestParameters.causeBaselineAveragePerDay !== undefined) {
                queryParameters['cause_baseline_average_per_day'] = requestParameters.causeBaselineAveragePerDay;
            }
            if (requestParameters.causeBaselineAveragePerDurationOfAction !== undefined) {
                queryParameters['cause_baseline_average_per_duration_of_action'] = requestParameters.causeBaselineAveragePerDurationOfAction;
            }
            if (requestParameters.causeChanges !== undefined) {
                queryParameters['cause_changes'] = requestParameters.causeChanges;
            }
            if (requestParameters.causeTreatmentAveragePerDay !== undefined) {
                queryParameters['cause_treatment_average_per_day'] = requestParameters.causeTreatmentAveragePerDay;
            }
            if (requestParameters.causeTreatmentAveragePerDurationOfAction !== undefined) {
                queryParameters['cause_treatment_average_per_duration_of_action'] = requestParameters.causeTreatmentAveragePerDurationOfAction;
            }
            if (requestParameters.causeUnitId !== undefined) {
                queryParameters['cause_unit_id'] = requestParameters.causeUnitId;
            }
            if (requestParameters.causeVariableCategoryId !== undefined) {
                queryParameters['cause_variable_category_id'] = requestParameters.causeVariableCategoryId;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.confidenceInterval !== undefined) {
                queryParameters['confidence_interval'] = requestParameters.confidenceInterval;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.criticalTValue !== undefined) {
                queryParameters['critical_t_value'] = requestParameters.criticalTValue;
            }
            if (requestParameters.dataSourceName !== undefined) {
                queryParameters['data_source_name'] = requestParameters.dataSourceName;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.durationOfAction !== undefined) {
                queryParameters['duration_of_action'] = requestParameters.durationOfAction;
            }
            if (requestParameters.effectBaselineAverage !== undefined) {
                queryParameters['effect_baseline_average'] = requestParameters.effectBaselineAverage;
            }
            if (requestParameters.effectBaselineRelativeStandardDeviation !== undefined) {
                queryParameters['effect_baseline_relative_standard_deviation'] = requestParameters.effectBaselineRelativeStandardDeviation;
            }
            if (requestParameters.effectBaselineStandardDeviation !== undefined) {
                queryParameters['effect_baseline_standard_deviation'] = requestParameters.effectBaselineStandardDeviation;
            }
            if (requestParameters.effectChanges !== undefined) {
                queryParameters['effect_changes'] = requestParameters.effectChanges;
            }
            if (requestParameters.effectFollowUpAverage !== undefined) {
                queryParameters['effect_follow_up_average'] = requestParameters.effectFollowUpAverage;
            }
            if (requestParameters.effectFollowUpPercentChangeFromBaseline !== undefined) {
                queryParameters['effect_follow_up_percent_change_from_baseline'] = requestParameters.effectFollowUpPercentChangeFromBaseline;
            }
            if (requestParameters.effectVariableCategoryId !== undefined) {
                queryParameters['effect_variable_category_id'] = requestParameters.effectVariableCategoryId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
            }
            if (requestParameters.forwardPearsonCorrelationCoefficient !== undefined) {
                queryParameters['forward_pearson_correlation_coefficient'] = requestParameters.forwardPearsonCorrelationCoefficient;
            }
            if (requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome !== undefined) {
                queryParameters['grouped_cause_value_closest_to_value_predicting_high_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome;
            }
            if (requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome !== undefined) {
                queryParameters['grouped_cause_value_closest_to_value_predicting_low_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.interestingVariableCategoryPair !== undefined) {
                queryParameters['interesting_variable_category_pair'] = requestParameters.interestingVariableCategoryPair;
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.newestDataAt !== undefined) {
                queryParameters['newest_data_at'] = requestParameters.newestDataAt.toISOString();
            }
            if (requestParameters.numberOfCorrelations !== undefined) {
                queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
            }
            if (requestParameters.numberOfPairs !== undefined) {
                queryParameters['number_of_pairs'] = requestParameters.numberOfPairs;
            }
            if (requestParameters.numberOfUsers !== undefined) {
                queryParameters['number_of_users'] = requestParameters.numberOfUsers;
            }
            if (requestParameters.onsetDelay !== undefined) {
                queryParameters['onset_delay'] = requestParameters.onsetDelay;
            }
            if (requestParameters.optimalPearsonProduct !== undefined) {
                queryParameters['optimal_pearson_product'] = requestParameters.optimalPearsonProduct;
            }
            if (requestParameters.pValue !== undefined) {
                queryParameters['p_value'] = requestParameters.pValue;
            }
            if (requestParameters.populationTraitPearsonCorrelationCoefficient !== undefined) {
                queryParameters['population_trait_pearson_correlation_coefficient'] = requestParameters.populationTraitPearsonCorrelationCoefficient;
            }
            if (requestParameters.predictivePearsonCorrelationCoefficient !== undefined) {
                queryParameters['predictive_pearson_correlation_coefficient'] = requestParameters.predictivePearsonCorrelationCoefficient;
            }
            if (requestParameters.predictsHighEffectChange !== undefined) {
                queryParameters['predicts_high_effect_change'] = requestParameters.predictsHighEffectChange;
            }
            if (requestParameters.predictsLowEffectChange !== undefined) {
                queryParameters['predicts_low_effect_change'] = requestParameters.predictsLowEffectChange;
            }
            if (requestParameters.publishedAt !== undefined) {
                queryParameters['published_at'] = requestParameters.publishedAt.toISOString();
            }
            if (requestParameters.reasonForAnalysis !== undefined) {
                queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
            }
            if (requestParameters.reversePearsonCorrelationCoefficient !== undefined) {
                queryParameters['reverse_pearson_correlation_coefficient'] = requestParameters.reversePearsonCorrelationCoefficient;
            }
            if (requestParameters.statisticalSignificance !== undefined) {
                queryParameters['statistical_significance'] = requestParameters.statisticalSignificance;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.tValue !== undefined) {
                queryParameters['t_value'] = requestParameters.tValue;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.valuePredictingHighOutcome !== undefined) {
                queryParameters['value_predicting_high_outcome'] = requestParameters.valuePredictingHighOutcome;
            }
            if (requestParameters.valuePredictingLowOutcome !== undefined) {
                queryParameters['value_predicting_low_outcome'] = requestParameters.valuePredictingLowOutcome;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            if (requestParameters.zScore !== undefined) {
                queryParameters['z_score'] = requestParameters.zScore;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/aggregate_correlations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * List Aggregate Correlations
     */
    listAggregateCorrelations(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listAggregateCorrelationsRaw(requestParameters);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * List Applications
     */
    listApplicationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.additionalSettings !== undefined) {
                queryParameters['additional_settings'] = requestParameters.additionalSettings;
            }
            if (requestParameters.address !== undefined) {
                queryParameters['address'] = requestParameters.address;
            }
            if (requestParameters.appDescription !== undefined) {
                queryParameters['app_description'] = requestParameters.appDescription;
            }
            if (requestParameters.appDesign !== undefined) {
                queryParameters['app_design'] = requestParameters.appDesign;
            }
            if (requestParameters.appDisplayName !== undefined) {
                queryParameters['app_display_name'] = requestParameters.appDisplayName;
            }
            if (requestParameters.appStatus !== undefined) {
                queryParameters['app_status'] = requestParameters.appStatus;
            }
            if (requestParameters.appType !== undefined) {
                queryParameters['app_type'] = requestParameters.appType;
            }
            if (requestParameters.billingEnabled !== undefined) {
                queryParameters['billing_enabled'] = requestParameters.billingEnabled;
            }
            if (requestParameters.buildEnabled !== undefined) {
                queryParameters['build_enabled'] = requestParameters.buildEnabled;
            }
            if (requestParameters.city !== undefined) {
                queryParameters['city'] = requestParameters.city;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.companyName !== undefined) {
                queryParameters['company_name'] = requestParameters.companyName;
            }
            if (requestParameters.country !== undefined) {
                queryParameters['country'] = requestParameters.country;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.enabled !== undefined) {
                queryParameters['enabled'] = requestParameters.enabled;
            }
            if (requestParameters.exceedingCallCharge !== undefined) {
                queryParameters['exceeding_call_charge'] = requestParameters.exceedingCallCharge;
            }
            if (requestParameters.exceedingCallCount !== undefined) {
                queryParameters['exceeding_call_count'] = requestParameters.exceedingCallCount;
            }
            if (requestParameters.homepageUrl !== undefined) {
                queryParameters['homepage_url'] = requestParameters.homepageUrl;
            }
            if (requestParameters.iconUrl !== undefined) {
                queryParameters['icon_url'] = requestParameters.iconUrl;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.lastFour !== undefined) {
                queryParameters['last_four'] = requestParameters.lastFour;
            }
            if (requestParameters.longDescription !== undefined) {
                queryParameters['long_description'] = requestParameters.longDescription;
            }
            if (requestParameters.numberOfCollaboratorsWhereApp !== undefined) {
                queryParameters['number_of_collaborators_where_app'] = requestParameters.numberOfCollaboratorsWhereApp;
            }
            if (requestParameters.organizationId !== undefined) {
                queryParameters['organization_id'] = requestParameters.organizationId;
            }
            if (requestParameters.outcomeVariableId !== undefined) {
                queryParameters['outcome_variable_id'] = requestParameters.outcomeVariableId;
            }
            if (requestParameters.physician !== undefined) {
                queryParameters['physician'] = requestParameters.physician;
            }
            if (requestParameters.planId !== undefined) {
                queryParameters['plan_id'] = requestParameters.planId;
            }
            if (requestParameters.predictorVariableId !== undefined) {
                queryParameters['predictor_variable_id'] = requestParameters.predictorVariableId;
            }
            if (requestParameters.splashScreen !== undefined) {
                queryParameters['splash_screen'] = requestParameters.splashScreen;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.stripeActive !== undefined) {
                queryParameters['stripe_active'] = requestParameters.stripeActive;
            }
            if (requestParameters.stripeId !== undefined) {
                queryParameters['stripe_id'] = requestParameters.stripeId;
            }
            if (requestParameters.stripePlan !== undefined) {
                queryParameters['stripe_plan'] = requestParameters.stripePlan;
            }
            if (requestParameters.stripeSubscription !== undefined) {
                queryParameters['stripe_subscription'] = requestParameters.stripeSubscription;
            }
            if (requestParameters.study !== undefined) {
                queryParameters['study'] = requestParameters.study;
            }
            if (requestParameters.subscriptionEndsAt !== undefined) {
                queryParameters['subscription_ends_at'] = requestParameters.subscriptionEndsAt.toISOString();
            }
            if (requestParameters.textLogo !== undefined) {
                queryParameters['text_logo'] = requestParameters.textLogo;
            }
            if (requestParameters.trialEndsAt !== undefined) {
                queryParameters['trial_ends_at'] = requestParameters.trialEndsAt.toISOString();
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            if (requestParameters.zip !== undefined) {
                queryParameters['zip'] = requestParameters.zip;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/applications`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * List Applications
     */
    listApplications(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listApplicationsRaw(requestParameters);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * List Collaborators
     */
    listCollaboratorsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.appId !== undefined) {
                queryParameters['app_id'] = requestParameters.appId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/collaborators`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * List Collaborators
     */
    listCollaborators(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listCollaboratorsRaw(requestParameters);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List Common Tags
     */
    listCommonTagsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.conversionFactor !== undefined) {
                queryParameters['conversion_factor'] = requestParameters.conversionFactor;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.numberOfDataPoints !== undefined) {
                queryParameters['number_of_data_points'] = requestParameters.numberOfDataPoints;
            }
            if (requestParameters.standardError !== undefined) {
                queryParameters['standard_error'] = requestParameters.standardError;
            }
            if (requestParameters.tagVariableId !== undefined) {
                queryParameters['tag_variable_id'] = requestParameters.tagVariableId;
            }
            if (requestParameters.tagVariableUnitId !== undefined) {
                queryParameters['tag_variable_unit_id'] = requestParameters.tagVariableUnitId;
            }
            if (requestParameters.taggedVariableId !== undefined) {
                queryParameters['tagged_variable_id'] = requestParameters.taggedVariableId;
            }
            if (requestParameters.taggedVariableUnitId !== undefined) {
                queryParameters['tagged_variable_unit_id'] = requestParameters.taggedVariableUnitId;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/common_tags`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List Common Tags
     */
    listCommonTags(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listCommonTagsRaw(requestParameters);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * List Connections
     */
    listConnectionsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.connectError !== undefined) {
                queryParameters['connect_error'] = requestParameters.connectError;
            }
            if (requestParameters.connectStatus !== undefined) {
                queryParameters['connect_status'] = requestParameters.connectStatus;
            }
            if (requestParameters.connectorId !== undefined) {
                queryParameters['connector_id'] = requestParameters.connectorId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.credentials !== undefined) {
                queryParameters['credentials'] = requestParameters.credentials;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.importEndedAt !== undefined) {
                queryParameters['import_ended_at'] = requestParameters.importEndedAt.toISOString();
            }
            if (requestParameters.importStartedAt !== undefined) {
                queryParameters['import_started_at'] = requestParameters.importStartedAt.toISOString();
            }
            if (requestParameters.importedDataEndAt !== undefined) {
                queryParameters['imported_data_end_at'] = requestParameters.importedDataEndAt.toISOString();
            }
            if (requestParameters.importedDataFromAt !== undefined) {
                queryParameters['imported_data_from_at'] = requestParameters.importedDataFromAt.toISOString();
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.lastSuccessfulUpdatedAt !== undefined) {
                queryParameters['last_successful_updated_at'] = requestParameters.lastSuccessfulUpdatedAt.toISOString();
            }
            if (requestParameters.latestMeasurementAt !== undefined) {
                queryParameters['latest_measurement_at'] = requestParameters.latestMeasurementAt.toISOString();
            }
            if (requestParameters.numberOfConnectorImports !== undefined) {
                queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
            }
            if (requestParameters.numberOfConnectorRequests !== undefined) {
                queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
            }
            if (requestParameters.reasonForImport !== undefined) {
                queryParameters['reason_for_import'] = requestParameters.reasonForImport;
            }
            if (requestParameters.totalMeasurementsInLastUpdate !== undefined) {
                queryParameters['total_measurements_in_last_update'] = requestParameters.totalMeasurementsInLastUpdate;
            }
            if (requestParameters.updateError !== undefined) {
                queryParameters['update_error'] = requestParameters.updateError;
            }
            if (requestParameters.updateRequestedAt !== undefined) {
                queryParameters['update_requested_at'] = requestParameters.updateRequestedAt.toISOString();
            }
            if (requestParameters.updateStatus !== undefined) {
                queryParameters['update_status'] = requestParameters.updateStatus;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.userMessage !== undefined) {
                queryParameters['user_message'] = requestParameters.userMessage;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connections`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * List Connections
     */
    listConnections(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listConnectionsRaw(requestParameters);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * List Connector Imports
     */
    listConnectorImportsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.connectionId !== undefined) {
                queryParameters['connection_id'] = requestParameters.connectionId;
            }
            if (requestParameters.connectorId !== undefined) {
                queryParameters['connector_id'] = requestParameters.connectorId;
            }
            if (requestParameters.connectorRequests !== undefined) {
                queryParameters['connector_requests'] = requestParameters.connectorRequests.toISOString();
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.credentials !== undefined) {
                queryParameters['credentials'] = requestParameters.credentials;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.earliestMeasurementAt !== undefined) {
                queryParameters['earliest_measurement_at'] = requestParameters.earliestMeasurementAt.toISOString();
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.importEndedAt !== undefined) {
                queryParameters['import_ended_at'] = requestParameters.importEndedAt.toISOString();
            }
            if (requestParameters.importStartedAt !== undefined) {
                queryParameters['import_started_at'] = requestParameters.importStartedAt.toISOString();
            }
            if (requestParameters.importedDataEndAt !== undefined) {
                queryParameters['imported_data_end_at'] = requestParameters.importedDataEndAt.toISOString();
            }
            if (requestParameters.importedDataFromAt !== undefined) {
                queryParameters['imported_data_from_at'] = requestParameters.importedDataFromAt.toISOString();
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.latestMeasurementAt !== undefined) {
                queryParameters['latest_measurement_at'] = requestParameters.latestMeasurementAt.toISOString();
            }
            if (requestParameters.numberOfConnectorRequests !== undefined) {
                queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
            }
            if (requestParameters.numberOfMeasurements !== undefined) {
                queryParameters['number_of_measurements'] = requestParameters.numberOfMeasurements;
            }
            if (requestParameters.reasonForImport !== undefined) {
                queryParameters['reason_for_import'] = requestParameters.reasonForImport;
            }
            if (requestParameters.success !== undefined) {
                queryParameters['success'] = requestParameters.success;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_imports`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * List Connector Imports
     */
    listConnectorImports(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listConnectorImportsRaw(requestParameters);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * List Connector Requests
     */
    listConnectorRequestsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.connectionId !== undefined) {
                queryParameters['connection_id'] = requestParameters.connectionId;
            }
            if (requestParameters.connectorId !== undefined) {
                queryParameters['connector_id'] = requestParameters.connectorId;
            }
            if (requestParameters.connectorImportId !== undefined) {
                queryParameters['connector_import_id'] = requestParameters.connectorImportId;
            }
            if (requestParameters.contentType !== undefined) {
                queryParameters['content_type'] = requestParameters.contentType;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.importedDataFromAt !== undefined) {
                queryParameters['imported_data_from_at'] = requestParameters.importedDataFromAt.toISOString();
            }
            if (requestParameters.method !== undefined) {
                queryParameters['method'] = requestParameters.method;
            }
            if (requestParameters.requestBody !== undefined) {
                queryParameters['request_body'] = requestParameters.requestBody;
            }
            if (requestParameters.responseBody !== undefined) {
                queryParameters['response_body'] = requestParameters.responseBody;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.uri !== undefined) {
                queryParameters['uri'] = requestParameters.uri;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_requests`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * List Connector Requests
     */
    listConnectorRequests(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listConnectorRequestsRaw(requestParameters);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List Connectors
     */
    listConnectorsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.displayName !== undefined) {
                queryParameters['display_name'] = requestParameters.displayName;
            }
            if (requestParameters.enabled !== undefined) {
                queryParameters['enabled'] = requestParameters.enabled;
            }
            if (requestParameters.getItUrl !== undefined) {
                queryParameters['get_it_url'] = requestParameters.getItUrl;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.image !== undefined) {
                queryParameters['image'] = requestParameters.image;
            }
            if (requestParameters.isParent !== undefined) {
                queryParameters['is_parent'] = requestParameters.isParent;
            }
            if (requestParameters.longDescription !== undefined) {
                queryParameters['long_description'] = requestParameters.longDescription;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.numberOfConnections !== undefined) {
                queryParameters['number_of_connections'] = requestParameters.numberOfConnections;
            }
            if (requestParameters.numberOfConnectorImports !== undefined) {
                queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
            }
            if (requestParameters.numberOfConnectorRequests !== undefined) {
                queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
            }
            if (requestParameters.oauth !== undefined) {
                queryParameters['oauth'] = requestParameters.oauth;
            }
            if (requestParameters.qmClient !== undefined) {
                queryParameters['qm_client'] = requestParameters.qmClient;
            }
            if (requestParameters.shortDescription !== undefined) {
                queryParameters['short_description'] = requestParameters.shortDescription;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connectors`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List Connectors
     */
    listConnectors(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listConnectorsRaw(requestParameters);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * List Correlations
     */
    listCorrelationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.aggregateCorrelationId !== undefined) {
                queryParameters['aggregate_correlation_id'] = requestParameters.aggregateCorrelationId;
            }
            if (requestParameters.aggregatedAt !== undefined) {
                queryParameters['aggregated_at'] = requestParameters.aggregatedAt.toISOString();
            }
            if (requestParameters.analysisEndedAt !== undefined) {
                queryParameters['analysis_ended_at'] = requestParameters.analysisEndedAt.toISOString();
            }
            if (requestParameters.analysisRequestedAt !== undefined) {
                queryParameters['analysis_requested_at'] = requestParameters.analysisRequestedAt.toISOString();
            }
            if (requestParameters.analysisStartedAt !== undefined) {
                queryParameters['analysis_started_at'] = requestParameters.analysisStartedAt.toISOString();
            }
            if (requestParameters.averageDailyHighCause !== undefined) {
                queryParameters['average_daily_high_cause'] = requestParameters.averageDailyHighCause;
            }
            if (requestParameters.averageDailyLowCause !== undefined) {
                queryParameters['average_daily_low_cause'] = requestParameters.averageDailyLowCause;
            }
            if (requestParameters.averageEffect !== undefined) {
                queryParameters['average_effect'] = requestParameters.averageEffect;
            }
            if (requestParameters.averageEffectFollowingHighCause !== undefined) {
                queryParameters['average_effect_following_high_cause'] = requestParameters.averageEffectFollowingHighCause;
            }
            if (requestParameters.averageEffectFollowingLowCause !== undefined) {
                queryParameters['average_effect_following_low_cause'] = requestParameters.averageEffectFollowingLowCause;
            }
            if (requestParameters.averageForwardPearsonCorrelationOverOnsetDelays !== undefined) {
                queryParameters['average_forward_pearson_correlation_over_onset_delays'] = requestParameters.averageForwardPearsonCorrelationOverOnsetDelays;
            }
            if (requestParameters.averageReversePearsonCorrelationOverOnsetDelays !== undefined) {
                queryParameters['average_reverse_pearson_correlation_over_onset_delays'] = requestParameters.averageReversePearsonCorrelationOverOnsetDelays;
            }
            if (requestParameters.causalityVote !== undefined) {
                queryParameters['causality_vote'] = requestParameters.causalityVote;
            }
            if (requestParameters.causeBaselineAveragePerDay !== undefined) {
                queryParameters['cause_baseline_average_per_day'] = requestParameters.causeBaselineAveragePerDay;
            }
            if (requestParameters.causeBaselineAveragePerDurationOfAction !== undefined) {
                queryParameters['cause_baseline_average_per_duration_of_action'] = requestParameters.causeBaselineAveragePerDurationOfAction;
            }
            if (requestParameters.causeChanges !== undefined) {
                queryParameters['cause_changes'] = requestParameters.causeChanges;
            }
            if (requestParameters.causeFillingValue !== undefined) {
                queryParameters['cause_filling_value'] = requestParameters.causeFillingValue;
            }
            if (requestParameters.causeNumberOfProcessedDailyMeasurements !== undefined) {
                queryParameters['cause_number_of_processed_daily_measurements'] = requestParameters.causeNumberOfProcessedDailyMeasurements;
            }
            if (requestParameters.causeNumberOfRawMeasurements !== undefined) {
                queryParameters['cause_number_of_raw_measurements'] = requestParameters.causeNumberOfRawMeasurements;
            }
            if (requestParameters.causeTreatmentAveragePerDay !== undefined) {
                queryParameters['cause_treatment_average_per_day'] = requestParameters.causeTreatmentAveragePerDay;
            }
            if (requestParameters.causeTreatmentAveragePerDurationOfAction !== undefined) {
                queryParameters['cause_treatment_average_per_duration_of_action'] = requestParameters.causeTreatmentAveragePerDurationOfAction;
            }
            if (requestParameters.causeUnitId !== undefined) {
                queryParameters['cause_unit_id'] = requestParameters.causeUnitId;
            }
            if (requestParameters.causeUserVariableId !== undefined) {
                queryParameters['cause_user_variable_id'] = requestParameters.causeUserVariableId;
            }
            if (requestParameters.causeVariableCategoryId !== undefined) {
                queryParameters['cause_variable_category_id'] = requestParameters.causeVariableCategoryId;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.confidenceInterval !== undefined) {
                queryParameters['confidence_interval'] = requestParameters.confidenceInterval;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.criticalTValue !== undefined) {
                queryParameters['critical_t_value'] = requestParameters.criticalTValue;
            }
            if (requestParameters.dataSourceName !== undefined) {
                queryParameters['data_source_name'] = requestParameters.dataSourceName;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.durationOfAction !== undefined) {
                queryParameters['duration_of_action'] = requestParameters.durationOfAction;
            }
            if (requestParameters.earliestMeasurementStartAt !== undefined) {
                queryParameters['earliest_measurement_start_at'] = requestParameters.earliestMeasurementStartAt.toISOString();
            }
            if (requestParameters.effectBaselineAverage !== undefined) {
                queryParameters['effect_baseline_average'] = requestParameters.effectBaselineAverage;
            }
            if (requestParameters.effectBaselineRelativeStandardDeviation !== undefined) {
                queryParameters['effect_baseline_relative_standard_deviation'] = requestParameters.effectBaselineRelativeStandardDeviation;
            }
            if (requestParameters.effectBaselineStandardDeviation !== undefined) {
                queryParameters['effect_baseline_standard_deviation'] = requestParameters.effectBaselineStandardDeviation;
            }
            if (requestParameters.effectChanges !== undefined) {
                queryParameters['effect_changes'] = requestParameters.effectChanges;
            }
            if (requestParameters.effectFillingValue !== undefined) {
                queryParameters['effect_filling_value'] = requestParameters.effectFillingValue;
            }
            if (requestParameters.effectFollowUpAverage !== undefined) {
                queryParameters['effect_follow_up_average'] = requestParameters.effectFollowUpAverage;
            }
            if (requestParameters.effectFollowUpPercentChangeFromBaseline !== undefined) {
                queryParameters['effect_follow_up_percent_change_from_baseline'] = requestParameters.effectFollowUpPercentChangeFromBaseline;
            }
            if (requestParameters.effectNumberOfProcessedDailyMeasurements !== undefined) {
                queryParameters['effect_number_of_processed_daily_measurements'] = requestParameters.effectNumberOfProcessedDailyMeasurements;
            }
            if (requestParameters.effectNumberOfRawMeasurements !== undefined) {
                queryParameters['effect_number_of_raw_measurements'] = requestParameters.effectNumberOfRawMeasurements;
            }
            if (requestParameters.effectUserVariableId !== undefined) {
                queryParameters['effect_user_variable_id'] = requestParameters.effectUserVariableId;
            }
            if (requestParameters.effectVariableCategoryId !== undefined) {
                queryParameters['effect_variable_category_id'] = requestParameters.effectVariableCategoryId;
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
            }
            if (requestParameters.experimentEndAt !== undefined) {
                queryParameters['experiment_end_at'] = requestParameters.experimentEndAt.toISOString();
            }
            if (requestParameters.experimentEndTime !== undefined) {
                queryParameters['experiment_end_time'] = requestParameters.experimentEndTime.toISOString();
            }
            if (requestParameters.experimentStartAt !== undefined) {
                queryParameters['experiment_start_at'] = requestParameters.experimentStartAt.toISOString();
            }
            if (requestParameters.experimentStartTime !== undefined) {
                queryParameters['experiment_start_time'] = requestParameters.experimentStartTime.toISOString();
            }
            if (requestParameters.forwardPearsonCorrelationCoefficient !== undefined) {
                queryParameters['forward_pearson_correlation_coefficient'] = requestParameters.forwardPearsonCorrelationCoefficient;
            }
            if (requestParameters.forwardSpearmanCorrelationCoefficient !== undefined) {
                queryParameters['forward_spearman_correlation_coefficient'] = requestParameters.forwardSpearmanCorrelationCoefficient;
            }
            if (requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome !== undefined) {
                queryParameters['grouped_cause_value_closest_to_value_predicting_high_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingHighOutcome;
            }
            if (requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome !== undefined) {
                queryParameters['grouped_cause_value_closest_to_value_predicting_low_outcome'] = requestParameters.groupedCauseValueClosestToValuePredictingLowOutcome;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.interestingVariableCategoryPair !== undefined) {
                queryParameters['interesting_variable_category_pair'] = requestParameters.interestingVariableCategoryPair;
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.latestMeasurementStartAt !== undefined) {
                queryParameters['latest_measurement_start_at'] = requestParameters.latestMeasurementStartAt.toISOString();
            }
            if (requestParameters.newestDataAt !== undefined) {
                queryParameters['newest_data_at'] = requestParameters.newestDataAt.toISOString();
            }
            if (requestParameters.numberOfDays !== undefined) {
                queryParameters['number_of_days'] = requestParameters.numberOfDays;
            }
            if (requestParameters.numberOfPairs !== undefined) {
                queryParameters['number_of_pairs'] = requestParameters.numberOfPairs;
            }
            if (requestParameters.onsetDelay !== undefined) {
                queryParameters['onset_delay'] = requestParameters.onsetDelay;
            }
            if (requestParameters.onsetDelayWithStrongestPearsonCorrelation !== undefined) {
                queryParameters['onset_delay_with_strongest_pearson_correlation'] = requestParameters.onsetDelayWithStrongestPearsonCorrelation;
            }
            if (requestParameters.optimalPearsonProduct !== undefined) {
                queryParameters['optimal_pearson_product'] = requestParameters.optimalPearsonProduct;
            }
            if (requestParameters.pValue !== undefined) {
                queryParameters['p_value'] = requestParameters.pValue;
            }
            if (requestParameters.pearsonCorrelationWithNoOnsetDelay !== undefined) {
                queryParameters['pearson_correlation_with_no_onset_delay'] = requestParameters.pearsonCorrelationWithNoOnsetDelay;
            }
            if (requestParameters.predictivePearsonCorrelationCoefficient !== undefined) {
                queryParameters['predictive_pearson_correlation_coefficient'] = requestParameters.predictivePearsonCorrelationCoefficient;
            }
            if (requestParameters.predictsHighEffectChange !== undefined) {
                queryParameters['predicts_high_effect_change'] = requestParameters.predictsHighEffectChange;
            }
            if (requestParameters.predictsLowEffectChange !== undefined) {
                queryParameters['predicts_low_effect_change'] = requestParameters.predictsLowEffectChange;
            }
            if (requestParameters.publishedAt !== undefined) {
                queryParameters['published_at'] = requestParameters.publishedAt.toISOString();
            }
            if (requestParameters.qmScore !== undefined) {
                queryParameters['qm_score'] = requestParameters.qmScore;
            }
            if (requestParameters.reasonForAnalysis !== undefined) {
                queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
            }
            if (requestParameters.reversePearsonCorrelationCoefficient !== undefined) {
                queryParameters['reverse_pearson_correlation_coefficient'] = requestParameters.reversePearsonCorrelationCoefficient;
            }
            if (requestParameters.statisticalSignificance !== undefined) {
                queryParameters['statistical_significance'] = requestParameters.statisticalSignificance;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.strongestPearsonCorrelationCoefficient !== undefined) {
                queryParameters['strongest_pearson_correlation_coefficient'] = requestParameters.strongestPearsonCorrelationCoefficient;
            }
            if (requestParameters.tValue !== undefined) {
                queryParameters['t_value'] = requestParameters.tValue;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.usefulnessVote !== undefined) {
                queryParameters['usefulness_vote'] = requestParameters.usefulnessVote;
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.valuePredictingHighOutcome !== undefined) {
                queryParameters['value_predicting_high_outcome'] = requestParameters.valuePredictingHighOutcome;
            }
            if (requestParameters.valuePredictingLowOutcome !== undefined) {
                queryParameters['value_predicting_low_outcome'] = requestParameters.valuePredictingLowOutcome;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            if (requestParameters.zScore !== undefined) {
                queryParameters['z_score'] = requestParameters.zScore;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/correlations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * List Correlations
     */
    listCorrelations(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listCorrelationsRaw(requestParameters);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * List Device Tokens
     */
    listDeviceTokensRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.bshafferOauthClientsId !== undefined) {
                queryParameters['bshaffer_oauth_clients_id'] = requestParameters.bshafferOauthClientsId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.deviceToken !== undefined) {
                queryParameters['device_token'] = requestParameters.deviceToken;
            }
            if (requestParameters.errorMessage !== undefined) {
                queryParameters['error_message'] = requestParameters.errorMessage;
            }
            if (requestParameters.lastCheckedAt !== undefined) {
                queryParameters['last_checked_at'] = requestParameters.lastCheckedAt.toISOString();
            }
            if (requestParameters.lastNotifiedAt !== undefined) {
                queryParameters['last_notified_at'] = requestParameters.lastNotifiedAt.toISOString();
            }
            if (requestParameters.numberOfNewTrackingReminderNotifications !== undefined) {
                queryParameters['number_of_new_tracking_reminder_notifications'] = requestParameters.numberOfNewTrackingReminderNotifications;
            }
            if (requestParameters.numberOfNotificationsLastSent !== undefined) {
                queryParameters['number_of_notifications_last_sent'] = requestParameters.numberOfNotificationsLastSent;
            }
            if (requestParameters.numberOfWaitingTrackingReminderNotifications !== undefined) {
                queryParameters['number_of_waiting_tracking_reminder_notifications'] = requestParameters.numberOfWaitingTrackingReminderNotifications;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.receivedAt !== undefined) {
                queryParameters['received_at'] = requestParameters.receivedAt.toISOString();
            }
            if (requestParameters.serverHostname !== undefined) {
                queryParameters['server_hostname'] = requestParameters.serverHostname;
            }
            if (requestParameters.serverIp !== undefined) {
                queryParameters['server_ip'] = requestParameters.serverIp;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/device_tokens`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * List Device Tokens
     */
    listDeviceTokens(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listDeviceTokensRaw(requestParameters);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * List Measurement Exports
     */
    listMeasurementExportsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.errorMessage !== undefined) {
                queryParameters['error_message'] = requestParameters.errorMessage;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.outputType !== undefined) {
                queryParameters['output_type'] = requestParameters.outputType;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_exports`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * List Measurement Exports
     */
    listMeasurementExports(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listMeasurementExportsRaw(requestParameters);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * List Measurement Imports
     */
    listMeasurementImportsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.errorMessage !== undefined) {
                queryParameters['error_message'] = requestParameters.errorMessage;
            }
            if (requestParameters.file !== undefined) {
                queryParameters['file'] = requestParameters.file;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.sourceId !== undefined) {
                queryParameters['source_id'] = requestParameters.sourceId;
            }
            if (requestParameters.sourceName !== undefined) {
                queryParameters['source_name'] = requestParameters.sourceName;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_imports`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * List Measurement Imports
     */
    listMeasurementImports(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listMeasurementImportsRaw(requestParameters);
        });
    }
    /**
     * Measurement
     * List Measurements
     */
    listMeasurementsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.connectionId !== undefined) {
                queryParameters['connection_id'] = requestParameters.connectionId;
            }
            if (requestParameters.connectorId !== undefined) {
                queryParameters['connector_id'] = requestParameters.connectorId;
            }
            if (requestParameters.connectorImportId !== undefined) {
                queryParameters['connector_import_id'] = requestParameters.connectorImportId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.error !== undefined) {
                queryParameters['error'] = requestParameters.error;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.latitude !== undefined) {
                queryParameters['latitude'] = requestParameters.latitude;
            }
            if (requestParameters.location !== undefined) {
                queryParameters['location'] = requestParameters.location;
            }
            if (requestParameters.longitude !== undefined) {
                queryParameters['longitude'] = requestParameters.longitude;
            }
            if (requestParameters.originalUnitId !== undefined) {
                queryParameters['original_unit_id'] = requestParameters.originalUnitId;
            }
            if (requestParameters.originalValue !== undefined) {
                queryParameters['original_value'] = requestParameters.originalValue;
            }
            if (requestParameters.sourceId !== undefined) {
                queryParameters['source_id'] = requestParameters.sourceId;
            }
            if (requestParameters.sourceName !== undefined) {
                queryParameters['source_name'] = requestParameters.sourceName;
            }
            if (requestParameters.startAt !== undefined) {
                queryParameters['start_at'] = requestParameters.startAt.toISOString();
            }
            if (requestParameters.startTime !== undefined) {
                queryParameters['start_time'] = requestParameters.startTime;
            }
            if (requestParameters.unitId !== undefined) {
                queryParameters['unit_id'] = requestParameters.unitId;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.userVariableId !== undefined) {
                queryParameters['user_variable_id'] = requestParameters.userVariableId;
            }
            if (requestParameters.value !== undefined) {
                queryParameters['value'] = requestParameters.value;
            }
            if (requestParameters.variableCategoryId !== undefined) {
                queryParameters['variable_category_id'] = requestParameters.variableCategoryId;
            }
            if (requestParameters.variableId !== undefined) {
                queryParameters['variable_id'] = requestParameters.variableId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurements`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Measurement
     * List Measurements
     */
    listMeasurements(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listMeasurementsRaw(requestParameters);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * List Notifications
     */
    listNotificationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.data !== undefined) {
                queryParameters['data'] = requestParameters.data;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.notifiableId !== undefined) {
                queryParameters['notifiable_id'] = requestParameters.notifiableId;
            }
            if (requestParameters.notifiableType !== undefined) {
                queryParameters['notifiable_type'] = requestParameters.notifiableType;
            }
            if (requestParameters.readAt !== undefined) {
                queryParameters['read_at'] = requestParameters.readAt.toISOString();
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/notifications`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * List Notifications
     */
    listNotifications(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listNotificationsRaw(requestParameters);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * List OAuth Access Tokens
     */
    listOAuthAccessTokensRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.accessToken !== undefined) {
                queryParameters['access_token'] = requestParameters.accessToken;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.expires !== undefined) {
                queryParameters['expires'] = requestParameters.expires.toISOString();
            }
            if (requestParameters.scope !== undefined) {
                queryParameters['scope'] = requestParameters.scope;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_access_tokens`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * List OAuth Access Tokens
     */
    listOAuthAccessTokens(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listOAuthAccessTokensRaw(requestParameters);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * List OAuth Clients
     */
    listOAuthClientsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.appIdentifier !== undefined) {
                queryParameters['app_identifier'] = requestParameters.appIdentifier;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.clientSecret !== undefined) {
                queryParameters['client_secret'] = requestParameters.clientSecret;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.earliestMeasurementStartAt !== undefined) {
                queryParameters['earliest_measurement_start_at'] = requestParameters.earliestMeasurementStartAt.toISOString();
            }
            if (requestParameters.grantTypes !== undefined) {
                queryParameters['grant_types'] = requestParameters.grantTypes;
            }
            if (requestParameters.iconUrl !== undefined) {
                queryParameters['icon_url'] = requestParameters.iconUrl;
            }
            if (requestParameters.latestMeasurementStartAt !== undefined) {
                queryParameters['latest_measurement_start_at'] = requestParameters.latestMeasurementStartAt.toISOString();
            }
            if (requestParameters.numberOfAggregateCorrelations !== undefined) {
                queryParameters['number_of_aggregate_correlations'] = requestParameters.numberOfAggregateCorrelations;
            }
            if (requestParameters.numberOfApplications !== undefined) {
                queryParameters['number_of_applications'] = requestParameters.numberOfApplications;
            }
            if (requestParameters.numberOfButtonClicks !== undefined) {
                queryParameters['number_of_button_clicks'] = requestParameters.numberOfButtonClicks;
            }
            if (requestParameters.numberOfCollaborators !== undefined) {
                queryParameters['number_of_collaborators'] = requestParameters.numberOfCollaborators;
            }
            if (requestParameters.numberOfCommonTags !== undefined) {
                queryParameters['number_of_common_tags'] = requestParameters.numberOfCommonTags;
            }
            if (requestParameters.numberOfConnections !== undefined) {
                queryParameters['number_of_connections'] = requestParameters.numberOfConnections;
            }
            if (requestParameters.numberOfConnectorImports !== undefined) {
                queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
            }
            if (requestParameters.numberOfConnectors !== undefined) {
                queryParameters['number_of_connectors'] = requestParameters.numberOfConnectors;
            }
            if (requestParameters.numberOfCorrelations !== undefined) {
                queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
            }
            if (requestParameters.numberOfOauthAccessTokens !== undefined) {
                queryParameters['number_of_oauth_access_tokens'] = requestParameters.numberOfOauthAccessTokens;
            }
            if (requestParameters.numberOfOauthAuthorizationCodes !== undefined) {
                queryParameters['number_of_oauth_authorization_codes'] = requestParameters.numberOfOauthAuthorizationCodes;
            }
            if (requestParameters.numberOfOauthRefreshTokens !== undefined) {
                queryParameters['number_of_oauth_refresh_tokens'] = requestParameters.numberOfOauthRefreshTokens;
            }
            if (requestParameters.redirectUri !== undefined) {
                queryParameters['redirect_uri'] = requestParameters.redirectUri;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_clients`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * List OAuth Clients
     */
    listOAuthClients(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listOAuthClientsRaw(requestParameters);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * List Posts
     */
    listPostsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.iD !== undefined) {
                queryParameters['ID'] = requestParameters.iD;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.commentCount !== undefined) {
                queryParameters['comment_count'] = requestParameters.commentCount;
            }
            if (requestParameters.commentStatus !== undefined) {
                queryParameters['comment_status'] = requestParameters.commentStatus;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.guid !== undefined) {
                queryParameters['guid'] = requestParameters.guid;
            }
            if (requestParameters.menuOrder !== undefined) {
                queryParameters['menu_order'] = requestParameters.menuOrder;
            }
            if (requestParameters.pingStatus !== undefined) {
                queryParameters['ping_status'] = requestParameters.pingStatus;
            }
            if (requestParameters.pinged !== undefined) {
                queryParameters['pinged'] = requestParameters.pinged;
            }
            if (requestParameters.postAuthor !== undefined) {
                queryParameters['post_author'] = requestParameters.postAuthor;
            }
            if (requestParameters.postContent !== undefined) {
                queryParameters['post_content'] = requestParameters.postContent;
            }
            if (requestParameters.postContentFiltered !== undefined) {
                queryParameters['post_content_filtered'] = requestParameters.postContentFiltered;
            }
            if (requestParameters.postDate !== undefined) {
                queryParameters['post_date'] = requestParameters.postDate.toISOString();
            }
            if (requestParameters.postDateGmt !== undefined) {
                queryParameters['post_date_gmt'] = requestParameters.postDateGmt.toISOString();
            }
            if (requestParameters.postExcerpt !== undefined) {
                queryParameters['post_excerpt'] = requestParameters.postExcerpt;
            }
            if (requestParameters.postMimeType !== undefined) {
                queryParameters['post_mime_type'] = requestParameters.postMimeType;
            }
            if (requestParameters.postModified !== undefined) {
                queryParameters['post_modified'] = requestParameters.postModified.toISOString();
            }
            if (requestParameters.postModifiedGmt !== undefined) {
                queryParameters['post_modified_gmt'] = requestParameters.postModifiedGmt.toISOString();
            }
            if (requestParameters.postName !== undefined) {
                queryParameters['post_name'] = requestParameters.postName;
            }
            if (requestParameters.postParent !== undefined) {
                queryParameters['post_parent'] = requestParameters.postParent;
            }
            if (requestParameters.postPassword !== undefined) {
                queryParameters['post_password'] = requestParameters.postPassword;
            }
            if (requestParameters.postStatus !== undefined) {
                queryParameters['post_status'] = requestParameters.postStatus;
            }
            if (requestParameters.postTitle !== undefined) {
                queryParameters['post_title'] = requestParameters.postTitle;
            }
            if (requestParameters.postType !== undefined) {
                queryParameters['post_type'] = requestParameters.postType;
            }
            if (requestParameters.toPing !== undefined) {
                queryParameters['to_ping'] = requestParameters.toPing;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/wp_posts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * List Posts
     */
    listPosts(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listPostsRaw(requestParameters);
        });
    }
    /**
     * A sent email
     * List Sent Emails
     */
    listSentEmailsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.content !== undefined) {
                queryParameters['content'] = requestParameters.content;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.emailAddress !== undefined) {
                queryParameters['email_address'] = requestParameters.emailAddress;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.response !== undefined) {
                queryParameters['response'] = requestParameters.response;
            }
            if (requestParameters.slug !== undefined) {
                queryParameters['slug'] = requestParameters.slug;
            }
            if (requestParameters.subject !== undefined) {
                queryParameters['subject'] = requestParameters.subject;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/sent_emails`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A sent email
     * List Sent Emails
     */
    listSentEmails(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listSentEmailsRaw(requestParameters);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * List Studies
     */
    listStudiesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.analysisEndedAt !== undefined) {
                queryParameters['analysis_ended_at'] = requestParameters.analysisEndedAt.toISOString();
            }
            if (requestParameters.analysisRequestedAt !== undefined) {
                queryParameters['analysis_requested_at'] = requestParameters.analysisRequestedAt.toISOString();
            }
            if (requestParameters.analysisSettingsModifiedAt !== undefined) {
                queryParameters['analysis_settings_modified_at'] = requestParameters.analysisSettingsModifiedAt.toISOString();
            }
            if (requestParameters.analysisStartedAt !== undefined) {
                queryParameters['analysis_started_at'] = requestParameters.analysisStartedAt.toISOString();
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.commentStatus !== undefined) {
                queryParameters['comment_status'] = requestParameters.commentStatus;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.newestDataAt !== undefined) {
                queryParameters['newest_data_at'] = requestParameters.newestDataAt.toISOString();
            }
            if (requestParameters.publishedAt !== undefined) {
                queryParameters['published_at'] = requestParameters.publishedAt.toISOString();
            }
            if (requestParameters.reasonForAnalysis !== undefined) {
                queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
            }
            if (requestParameters.statistics !== undefined) {
                queryParameters['statistics'] = requestParameters.statistics;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.studyPassword !== undefined) {
                queryParameters['study_password'] = requestParameters.studyPassword;
            }
            if (requestParameters.studyStatus !== undefined) {
                queryParameters['study_status'] = requestParameters.studyStatus;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.userStudyText !== undefined) {
                queryParameters['user_study_text'] = requestParameters.userStudyText;
            }
            if (requestParameters.userTitle !== undefined) {
                queryParameters['user_title'] = requestParameters.userTitle;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/studies`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * List Studies
     */
    listStudies(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listStudiesRaw(requestParameters);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * List Tracking Reminder Notifications
     */
    listTrackingReminderNotificationsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.notifiedAt !== undefined) {
                queryParameters['notified_at'] = requestParameters.notifiedAt.toISOString();
            }
            if (requestParameters.notifyAt !== undefined) {
                queryParameters['notify_at'] = requestParameters.notifyAt.toISOString();
            }
            if (requestParameters.receivedAt !== undefined) {
                queryParameters['received_at'] = requestParameters.receivedAt.toISOString();
            }
            if (requestParameters.trackingReminderId !== undefined) {
                queryParameters['tracking_reminder_id'] = requestParameters.trackingReminderId;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.userVariableId !== undefined) {
                queryParameters['user_variable_id'] = requestParameters.userVariableId;
            }
            if (requestParameters.variableId !== undefined) {
                queryParameters['variable_id'] = requestParameters.variableId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminder_notifications`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * List Tracking Reminder Notifications
     */
    listTrackingReminderNotifications(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listTrackingReminderNotificationsRaw(requestParameters);
        });
    }
    /**
     * Favorite
     * List Tracking Reminders
     */
    listTrackingRemindersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.defaultValue !== undefined) {
                queryParameters['default_value'] = requestParameters.defaultValue;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.email !== undefined) {
                queryParameters['email'] = requestParameters.email;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.imageUrl !== undefined) {
                queryParameters['image_url'] = requestParameters.imageUrl;
            }
            if (requestParameters.instructions !== undefined) {
                queryParameters['instructions'] = requestParameters.instructions;
            }
            if (requestParameters.lastTracked !== undefined) {
                queryParameters['last_tracked'] = requestParameters.lastTracked.toISOString();
            }
            if (requestParameters.latestTrackingReminderNotificationNotifyAt !== undefined) {
                queryParameters['latest_tracking_reminder_notification_notify_at'] = requestParameters.latestTrackingReminderNotificationNotifyAt.toISOString();
            }
            if (requestParameters.notificationBar !== undefined) {
                queryParameters['notification_bar'] = requestParameters.notificationBar;
            }
            if (requestParameters.popUp !== undefined) {
                queryParameters['pop_up'] = requestParameters.popUp;
            }
            if (requestParameters.reminderEndTime !== undefined) {
                queryParameters['reminder_end_time'] = requestParameters.reminderEndTime;
            }
            if (requestParameters.reminderFrequency !== undefined) {
                queryParameters['reminder_frequency'] = requestParameters.reminderFrequency;
            }
            if (requestParameters.reminderSound !== undefined) {
                queryParameters['reminder_sound'] = requestParameters.reminderSound;
            }
            if (requestParameters.reminderStartTime !== undefined) {
                queryParameters['reminder_start_time'] = requestParameters.reminderStartTime;
            }
            if (requestParameters.sms !== undefined) {
                queryParameters['sms'] = requestParameters.sms;
            }
            if (requestParameters.startTrackingDate !== undefined) {
                queryParameters['start_tracking_date'] = requestParameters.startTrackingDate;
            }
            if (requestParameters.stopTrackingDate !== undefined) {
                queryParameters['stop_tracking_date'] = requestParameters.stopTrackingDate;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.userVariableId !== undefined) {
                queryParameters['user_variable_id'] = requestParameters.userVariableId;
            }
            if (requestParameters.variableId !== undefined) {
                queryParameters['variable_id'] = requestParameters.variableId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminders`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Favorite
     * List Tracking Reminders
     */
    listTrackingReminders(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listTrackingRemindersRaw(requestParameters);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List User Tags
     */
    listUserTagsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.conversionFactor !== undefined) {
                queryParameters['conversion_factor'] = requestParameters.conversionFactor;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.tagVariableId !== undefined) {
                queryParameters['tag_variable_id'] = requestParameters.tagVariableId;
            }
            if (requestParameters.taggedVariableId !== undefined) {
                queryParameters['tagged_variable_id'] = requestParameters.taggedVariableId;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_tags`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List User Tags
     */
    listUserTags(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listUserTagsRaw(requestParameters);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * List User Variables
     */
    listUserVariablesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.alias !== undefined) {
                queryParameters['alias'] = requestParameters.alias;
            }
            if (requestParameters.analysisEndedAt !== undefined) {
                queryParameters['analysis_ended_at'] = requestParameters.analysisEndedAt.toISOString();
            }
            if (requestParameters.analysisRequestedAt !== undefined) {
                queryParameters['analysis_requested_at'] = requestParameters.analysisRequestedAt.toISOString();
            }
            if (requestParameters.analysisSettingsModifiedAt !== undefined) {
                queryParameters['analysis_settings_modified_at'] = requestParameters.analysisSettingsModifiedAt.toISOString();
            }
            if (requestParameters.analysisStartedAt !== undefined) {
                queryParameters['analysis_started_at'] = requestParameters.analysisStartedAt.toISOString();
            }
            if (requestParameters.averageSecondsBetweenMeasurements !== undefined) {
                queryParameters['average_seconds_between_measurements'] = requestParameters.averageSecondsBetweenMeasurements;
            }
            if (requestParameters.bestCauseVariableId !== undefined) {
                queryParameters['best_cause_variable_id'] = requestParameters.bestCauseVariableId;
            }
            if (requestParameters.bestEffectVariableId !== undefined) {
                queryParameters['best_effect_variable_id'] = requestParameters.bestEffectVariableId;
            }
            if (requestParameters.bestUserCorrelationId !== undefined) {
                queryParameters['best_user_correlation_id'] = requestParameters.bestUserCorrelationId;
            }
            if (requestParameters.causeOnly !== undefined) {
                queryParameters['cause_only'] = requestParameters.causeOnly;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.combinationOperation !== undefined) {
                queryParameters['combination_operation'] = requestParameters.combinationOperation;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.defaultUnitId !== undefined) {
                queryParameters['default_unit_id'] = requestParameters.defaultUnitId;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.durationOfAction !== undefined) {
                queryParameters['duration_of_action'] = requestParameters.durationOfAction;
            }
            if (requestParameters.earliestFillingTime !== undefined) {
                queryParameters['earliest_filling_time'] = requestParameters.earliestFillingTime;
            }
            if (requestParameters.earliestMeasurementTime !== undefined) {
                queryParameters['earliest_measurement_time'] = requestParameters.earliestMeasurementTime;
            }
            if (requestParameters.earliestNonTaggedMeasurementStartAt !== undefined) {
                queryParameters['earliest_non_tagged_measurement_start_at'] = requestParameters.earliestNonTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.earliestNonTaggedMeasurementTime !== undefined) {
                queryParameters['earliest_non_tagged_measurement_time'] = requestParameters.earliestNonTaggedMeasurementTime;
            }
            if (requestParameters.earliestSourceMeasurementStartAt !== undefined) {
                queryParameters['earliest_source_measurement_start_at'] = requestParameters.earliestSourceMeasurementStartAt.toISOString();
            }
            if (requestParameters.earliestSourceTime !== undefined) {
                queryParameters['earliest_source_time'] = requestParameters.earliestSourceTime;
            }
            if (requestParameters.earliestTaggedMeasurementStartAt !== undefined) {
                queryParameters['earliest_tagged_measurement_start_at'] = requestParameters.earliestTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.earliestTaggedMeasurementTime !== undefined) {
                queryParameters['earliest_tagged_measurement_time'] = requestParameters.earliestTaggedMeasurementTime;
            }
            if (requestParameters.experimentEndTime !== undefined) {
                queryParameters['experiment_end_time'] = requestParameters.experimentEndTime.toISOString();
            }
            if (requestParameters.experimentStartTime !== undefined) {
                queryParameters['experiment_start_time'] = requestParameters.experimentStartTime.toISOString();
            }
            if (requestParameters.fillingType !== undefined) {
                queryParameters['filling_type'] = requestParameters.fillingType;
            }
            if (requestParameters.fillingValue !== undefined) {
                queryParameters['filling_value'] = requestParameters.fillingValue;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.informationalUrl !== undefined) {
                queryParameters['informational_url'] = requestParameters.informationalUrl;
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.joinWith !== undefined) {
                queryParameters['join_with'] = requestParameters.joinWith;
            }
            if (requestParameters.kurtosis !== undefined) {
                queryParameters['kurtosis'] = requestParameters.kurtosis;
            }
            if (requestParameters.lastCorrelatedAt !== undefined) {
                queryParameters['last_correlated_at'] = requestParameters.lastCorrelatedAt.toISOString();
            }
            if (requestParameters.lastOriginalUnitId !== undefined) {
                queryParameters['last_original_unit_id'] = requestParameters.lastOriginalUnitId;
            }
            if (requestParameters.lastOriginalValue !== undefined) {
                queryParameters['last_original_value'] = requestParameters.lastOriginalValue;
            }
            if (requestParameters.lastProcessedDailyValue !== undefined) {
                queryParameters['last_processed_daily_value'] = requestParameters.lastProcessedDailyValue;
            }
            if (requestParameters.lastSourceId !== undefined) {
                queryParameters['last_source_id'] = requestParameters.lastSourceId;
            }
            if (requestParameters.lastSuccessfulUpdateTime !== undefined) {
                queryParameters['last_successful_update_time'] = requestParameters.lastSuccessfulUpdateTime.toISOString();
            }
            if (requestParameters.lastUnitId !== undefined) {
                queryParameters['last_unit_id'] = requestParameters.lastUnitId;
            }
            if (requestParameters.lastValue !== undefined) {
                queryParameters['last_value'] = requestParameters.lastValue;
            }
            if (requestParameters.latestFillingTime !== undefined) {
                queryParameters['latest_filling_time'] = requestParameters.latestFillingTime;
            }
            if (requestParameters.latestMeasurementTime !== undefined) {
                queryParameters['latest_measurement_time'] = requestParameters.latestMeasurementTime;
            }
            if (requestParameters.latestNonTaggedMeasurementStartAt !== undefined) {
                queryParameters['latest_non_tagged_measurement_start_at'] = requestParameters.latestNonTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.latestNonTaggedMeasurementTime !== undefined) {
                queryParameters['latest_non_tagged_measurement_time'] = requestParameters.latestNonTaggedMeasurementTime;
            }
            if (requestParameters.latestSourceMeasurementStartAt !== undefined) {
                queryParameters['latest_source_measurement_start_at'] = requestParameters.latestSourceMeasurementStartAt.toISOString();
            }
            if (requestParameters.latestSourceTime !== undefined) {
                queryParameters['latest_source_time'] = requestParameters.latestSourceTime;
            }
            if (requestParameters.latestTaggedMeasurementStartAt !== undefined) {
                queryParameters['latest_tagged_measurement_start_at'] = requestParameters.latestTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.latestTaggedMeasurementTime !== undefined) {
                queryParameters['latest_tagged_measurement_time'] = requestParameters.latestTaggedMeasurementTime;
            }
            if (requestParameters.latitude !== undefined) {
                queryParameters['latitude'] = requestParameters.latitude;
            }
            if (requestParameters.location !== undefined) {
                queryParameters['location'] = requestParameters.location;
            }
            if (requestParameters.longitude !== undefined) {
                queryParameters['longitude'] = requestParameters.longitude;
            }
            if (requestParameters.maximumAllowedValue !== undefined) {
                queryParameters['maximum_allowed_value'] = requestParameters.maximumAllowedValue;
            }
            if (requestParameters.maximumRecordedValue !== undefined) {
                queryParameters['maximum_recorded_value'] = requestParameters.maximumRecordedValue;
            }
            if (requestParameters.mean !== undefined) {
                queryParameters['mean'] = requestParameters.mean;
            }
            if (requestParameters.measurementsAtLastAnalysis !== undefined) {
                queryParameters['measurements_at_last_analysis'] = requestParameters.measurementsAtLastAnalysis;
            }
            if (requestParameters.median !== undefined) {
                queryParameters['median'] = requestParameters.median;
            }
            if (requestParameters.medianSecondsBetweenMeasurements !== undefined) {
                queryParameters['median_seconds_between_measurements'] = requestParameters.medianSecondsBetweenMeasurements;
            }
            if (requestParameters.minimumAllowedSecondsBetweenMeasurements !== undefined) {
                queryParameters['minimum_allowed_seconds_between_measurements'] = requestParameters.minimumAllowedSecondsBetweenMeasurements;
            }
            if (requestParameters.minimumAllowedValue !== undefined) {
                queryParameters['minimum_allowed_value'] = requestParameters.minimumAllowedValue;
            }
            if (requestParameters.minimumRecordedValue !== undefined) {
                queryParameters['minimum_recorded_value'] = requestParameters.minimumRecordedValue;
            }
            if (requestParameters.mostCommonConnectorId !== undefined) {
                queryParameters['most_common_connector_id'] = requestParameters.mostCommonConnectorId;
            }
            if (requestParameters.mostCommonOriginalUnitId !== undefined) {
                queryParameters['most_common_original_unit_id'] = requestParameters.mostCommonOriginalUnitId;
            }
            if (requestParameters.mostCommonSourceName !== undefined) {
                queryParameters['most_common_source_name'] = requestParameters.mostCommonSourceName;
            }
            if (requestParameters.mostCommonValue !== undefined) {
                queryParameters['most_common_value'] = requestParameters.mostCommonValue;
            }
            if (requestParameters.newestDataAt !== undefined) {
                queryParameters['newest_data_at'] = requestParameters.newestDataAt.toISOString();
            }
            if (requestParameters.numberOfChanges !== undefined) {
                queryParameters['number_of_changes'] = requestParameters.numberOfChanges;
            }
            if (requestParameters.numberOfCorrelations !== undefined) {
                queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
            }
            if (requestParameters.numberOfMeasurementsWithTagsAtLastCorrelation !== undefined) {
                queryParameters['number_of_measurements_with_tags_at_last_correlation'] = requestParameters.numberOfMeasurementsWithTagsAtLastCorrelation;
            }
            if (requestParameters.numberOfProcessedDailyMeasurements !== undefined) {
                queryParameters['number_of_processed_daily_measurements'] = requestParameters.numberOfProcessedDailyMeasurements;
            }
            if (requestParameters.numberOfRawMeasurements !== undefined) {
                queryParameters['number_of_raw_measurements'] = requestParameters.numberOfRawMeasurements;
            }
            if (requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren !== undefined) {
                queryParameters['number_of_raw_measurements_with_tags_joins_children'] = requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren;
            }
            if (requestParameters.numberOfSoftDeletedMeasurements !== undefined) {
                queryParameters['number_of_soft_deleted_measurements'] = requestParameters.numberOfSoftDeletedMeasurements;
            }
            if (requestParameters.numberOfTrackingReminders !== undefined) {
                queryParameters['number_of_tracking_reminders'] = requestParameters.numberOfTrackingReminders;
            }
            if (requestParameters.numberOfUniqueDailyValues !== undefined) {
                queryParameters['number_of_unique_daily_values'] = requestParameters.numberOfUniqueDailyValues;
            }
            if (requestParameters.numberOfUniqueValues !== undefined) {
                queryParameters['number_of_unique_values'] = requestParameters.numberOfUniqueValues;
            }
            if (requestParameters.numberOfUserCorrelationsAsCause !== undefined) {
                queryParameters['number_of_user_correlations_as_cause'] = requestParameters.numberOfUserCorrelationsAsCause;
            }
            if (requestParameters.numberOfUserCorrelationsAsEffect !== undefined) {
                queryParameters['number_of_user_correlations_as_effect'] = requestParameters.numberOfUserCorrelationsAsEffect;
            }
            if (requestParameters.onsetDelay !== undefined) {
                queryParameters['onset_delay'] = requestParameters.onsetDelay;
            }
            if (requestParameters.optimalValueMessage !== undefined) {
                queryParameters['optimal_value_message'] = requestParameters.optimalValueMessage;
            }
            if (requestParameters.outcome !== undefined) {
                queryParameters['outcome'] = requestParameters.outcome;
            }
            if (requestParameters.outcomeOfInterest !== undefined) {
                queryParameters['outcome_of_interest'] = requestParameters.outcomeOfInterest;
            }
            if (requestParameters.parentId !== undefined) {
                queryParameters['parent_id'] = requestParameters.parentId;
            }
            if (requestParameters.predictorOfInterest !== undefined) {
                queryParameters['predictor_of_interest'] = requestParameters.predictorOfInterest;
            }
            if (requestParameters._public !== undefined) {
                queryParameters['public'] = requestParameters._public;
            }
            if (requestParameters.reasonForAnalysis !== undefined) {
                queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
            }
            if (requestParameters.secondToLastValue !== undefined) {
                queryParameters['second_to_last_value'] = requestParameters.secondToLastValue;
            }
            if (requestParameters.shareUserMeasurements !== undefined) {
                queryParameters['share_user_measurements'] = requestParameters.shareUserMeasurements;
            }
            if (requestParameters.skewness !== undefined) {
                queryParameters['skewness'] = requestParameters.skewness;
            }
            if (requestParameters.standardDeviation !== undefined) {
                queryParameters['standard_deviation'] = requestParameters.standardDeviation;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.thirdToLastValue !== undefined) {
                queryParameters['third_to_last_value'] = requestParameters.thirdToLastValue;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.userMaximumAllowedDailyValue !== undefined) {
                queryParameters['user_maximum_allowed_daily_value'] = requestParameters.userMaximumAllowedDailyValue;
            }
            if (requestParameters.userMinimumAllowedDailyValue !== undefined) {
                queryParameters['user_minimum_allowed_daily_value'] = requestParameters.userMinimumAllowedDailyValue;
            }
            if (requestParameters.userMinimumAllowedNonZeroValue !== undefined) {
                queryParameters['user_minimum_allowed_non_zero_value'] = requestParameters.userMinimumAllowedNonZeroValue;
            }
            if (requestParameters.valence !== undefined) {
                queryParameters['valence'] = requestParameters.valence;
            }
            if (requestParameters.variableCategoryId !== undefined) {
                queryParameters['variable_category_id'] = requestParameters.variableCategoryId;
            }
            if (requestParameters.variableId !== undefined) {
                queryParameters['variable_id'] = requestParameters.variableId;
            }
            if (requestParameters.variance !== undefined) {
                queryParameters['variance'] = requestParameters.variance;
            }
            if (requestParameters.wikipediaTitle !== undefined) {
                queryParameters['wikipedia_title'] = requestParameters.wikipediaTitle;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_variables`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * List User Variables
     */
    listUserVariables(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listUserVariablesRaw(requestParameters);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * List Users
     */
    listUsersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.iD !== undefined) {
                queryParameters['ID'] = requestParameters.iD;
            }
            if (requestParameters.address !== undefined) {
                queryParameters['address'] = requestParameters.address;
            }
            if (requestParameters.analysisEndedAt !== undefined) {
                queryParameters['analysis_ended_at'] = requestParameters.analysisEndedAt.toISOString();
            }
            if (requestParameters.analysisRequestedAt !== undefined) {
                queryParameters['analysis_requested_at'] = requestParameters.analysisRequestedAt.toISOString();
            }
            if (requestParameters.analysisSettingsModifiedAt !== undefined) {
                queryParameters['analysis_settings_modified_at'] = requestParameters.analysisSettingsModifiedAt.toISOString();
            }
            if (requestParameters.analysisStartedAt !== undefined) {
                queryParameters['analysis_started_at'] = requestParameters.analysisStartedAt.toISOString();
            }
            if (requestParameters.avatarImage !== undefined) {
                queryParameters['avatar_image'] = requestParameters.avatarImage;
            }
            if (requestParameters.birthday !== undefined) {
                queryParameters['birthday'] = requestParameters.birthday;
            }
            if (requestParameters.cardBrand !== undefined) {
                queryParameters['card_brand'] = requestParameters.cardBrand;
            }
            if (requestParameters.cardLastFour !== undefined) {
                queryParameters['card_last_four'] = requestParameters.cardLastFour;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.combineNotifications !== undefined) {
                queryParameters['combine_notifications'] = requestParameters.combineNotifications;
            }
            if (requestParameters.country !== undefined) {
                queryParameters['country'] = requestParameters.country;
            }
            if (requestParameters.coverPhoto !== undefined) {
                queryParameters['cover_photo'] = requestParameters.coverPhoto;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.currency !== undefined) {
                queryParameters['currency'] = requestParameters.currency;
            }
            if (requestParameters.deleted !== undefined) {
                queryParameters['deleted'] = requestParameters.deleted;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.displayName !== undefined) {
                queryParameters['display_name'] = requestParameters.displayName;
            }
            if (requestParameters.earliestReminderTime !== undefined) {
                queryParameters['earliest_reminder_time'] = requestParameters.earliestReminderTime;
            }
            if (requestParameters.firstName !== undefined) {
                queryParameters['first_name'] = requestParameters.firstName;
            }
            if (requestParameters.gender !== undefined) {
                queryParameters['gender'] = requestParameters.gender;
            }
            if (requestParameters.getPreviewBuilds !== undefined) {
                queryParameters['get_preview_builds'] = requestParameters.getPreviewBuilds;
            }
            if (requestParameters.hasAndroidApp !== undefined) {
                queryParameters['has_android_app'] = requestParameters.hasAndroidApp;
            }
            if (requestParameters.hasChromeExtension !== undefined) {
                queryParameters['has_chrome_extension'] = requestParameters.hasChromeExtension;
            }
            if (requestParameters.hasIosApp !== undefined) {
                queryParameters['has_ios_app'] = requestParameters.hasIosApp;
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.lastCorrelationAt !== undefined) {
                queryParameters['last_correlation_at'] = requestParameters.lastCorrelationAt.toISOString();
            }
            if (requestParameters.lastEmailAt !== undefined) {
                queryParameters['last_email_at'] = requestParameters.lastEmailAt.toISOString();
            }
            if (requestParameters.lastFour !== undefined) {
                queryParameters['last_four'] = requestParameters.lastFour;
            }
            if (requestParameters.lastLoginAt !== undefined) {
                queryParameters['last_login_at'] = requestParameters.lastLoginAt.toISOString();
            }
            if (requestParameters.lastName !== undefined) {
                queryParameters['last_name'] = requestParameters.lastName;
            }
            if (requestParameters.lastPushAt !== undefined) {
                queryParameters['last_push_at'] = requestParameters.lastPushAt.toISOString();
            }
            if (requestParameters.lastSmsTrackingReminderNotificationId !== undefined) {
                queryParameters['last_sms_tracking_reminder_notification_id'] = requestParameters.lastSmsTrackingReminderNotificationId;
            }
            if (requestParameters.latestReminderTime !== undefined) {
                queryParameters['latest_reminder_time'] = requestParameters.latestReminderTime;
            }
            if (requestParameters.newestDataAt !== undefined) {
                queryParameters['newest_data_at'] = requestParameters.newestDataAt.toISOString();
            }
            if (requestParameters.numberOfApplications !== undefined) {
                queryParameters['number_of_applications'] = requestParameters.numberOfApplications;
            }
            if (requestParameters.numberOfButtonClicks !== undefined) {
                queryParameters['number_of_button_clicks'] = requestParameters.numberOfButtonClicks;
            }
            if (requestParameters.numberOfCollaborators !== undefined) {
                queryParameters['number_of_collaborators'] = requestParameters.numberOfCollaborators;
            }
            if (requestParameters.numberOfConnections !== undefined) {
                queryParameters['number_of_connections'] = requestParameters.numberOfConnections;
            }
            if (requestParameters.numberOfConnectorImports !== undefined) {
                queryParameters['number_of_connector_imports'] = requestParameters.numberOfConnectorImports;
            }
            if (requestParameters.numberOfConnectorRequests !== undefined) {
                queryParameters['number_of_connector_requests'] = requestParameters.numberOfConnectorRequests;
            }
            if (requestParameters.numberOfCorrelations !== undefined) {
                queryParameters['number_of_correlations'] = requestParameters.numberOfCorrelations;
            }
            if (requestParameters.numberOfOauthAccessTokens !== undefined) {
                queryParameters['number_of_oauth_access_tokens'] = requestParameters.numberOfOauthAccessTokens;
            }
            if (requestParameters.numberOfOauthAuthorizationCodes !== undefined) {
                queryParameters['number_of_oauth_authorization_codes'] = requestParameters.numberOfOauthAuthorizationCodes;
            }
            if (requestParameters.numberOfOauthClients !== undefined) {
                queryParameters['number_of_oauth_clients'] = requestParameters.numberOfOauthClients;
            }
            if (requestParameters.numberOfOauthRefreshTokens !== undefined) {
                queryParameters['number_of_oauth_refresh_tokens'] = requestParameters.numberOfOauthRefreshTokens;
            }
            if (requestParameters.numberOfRawMeasurementsWithTags !== undefined) {
                queryParameters['number_of_raw_measurements_with_tags'] = requestParameters.numberOfRawMeasurementsWithTags;
            }
            if (requestParameters.numberOfRawMeasurementsWithTagsAtLastCorrelation !== undefined) {
                queryParameters['number_of_raw_measurements_with_tags_at_last_correlation'] = requestParameters.numberOfRawMeasurementsWithTagsAtLastCorrelation;
            }
            if (requestParameters.numberOfStudies !== undefined) {
                queryParameters['number_of_studies'] = requestParameters.numberOfStudies;
            }
            if (requestParameters.numberOfTrackingReminders !== undefined) {
                queryParameters['number_of_tracking_reminders'] = requestParameters.numberOfTrackingReminders;
            }
            if (requestParameters.numberOfUserVariables !== undefined) {
                queryParameters['number_of_user_variables'] = requestParameters.numberOfUserVariables;
            }
            if (requestParameters.numberOfVotes !== undefined) {
                queryParameters['number_of_votes'] = requestParameters.numberOfVotes;
            }
            if (requestParameters.oldUser !== undefined) {
                queryParameters['old_user'] = requestParameters.oldUser;
            }
            if (requestParameters.phoneNumber !== undefined) {
                queryParameters['phone_number'] = requestParameters.phoneNumber;
            }
            if (requestParameters.phoneVerificationCode !== undefined) {
                queryParameters['phone_verification_code'] = requestParameters.phoneVerificationCode;
            }
            if (requestParameters.primaryOutcomeVariableId !== undefined) {
                queryParameters['primary_outcome_variable_id'] = requestParameters.primaryOutcomeVariableId;
            }
            if (requestParameters.providerId !== undefined) {
                queryParameters['provider_id'] = requestParameters.providerId;
            }
            if (requestParameters.providerToken !== undefined) {
                queryParameters['provider_token'] = requestParameters.providerToken;
            }
            if (requestParameters.pushNotificationsEnabled !== undefined) {
                queryParameters['push_notifications_enabled'] = requestParameters.pushNotificationsEnabled;
            }
            if (requestParameters.reasonForAnalysis !== undefined) {
                queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
            }
            if (requestParameters.referrerUserId !== undefined) {
                queryParameters['referrer_user_id'] = requestParameters.referrerUserId;
            }
            if (requestParameters.refreshToken !== undefined) {
                queryParameters['refresh_token'] = requestParameters.refreshToken;
            }
            if (requestParameters.regProvider !== undefined) {
                queryParameters['reg_provider'] = requestParameters.regProvider;
            }
            if (requestParameters.rememberToken !== undefined) {
                queryParameters['remember_token'] = requestParameters.rememberToken;
            }
            if (requestParameters.sendPredictorEmails !== undefined) {
                queryParameters['send_predictor_emails'] = requestParameters.sendPredictorEmails;
            }
            if (requestParameters.sendReminderNotificationEmails !== undefined) {
                queryParameters['send_reminder_notification_emails'] = requestParameters.sendReminderNotificationEmails;
            }
            if (requestParameters.smsNotificationsEnabled !== undefined) {
                queryParameters['sms_notifications_enabled'] = requestParameters.smsNotificationsEnabled;
            }
            if (requestParameters.spam !== undefined) {
                queryParameters['spam'] = requestParameters.spam;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.stripeActive !== undefined) {
                queryParameters['stripe_active'] = requestParameters.stripeActive;
            }
            if (requestParameters.stripeId !== undefined) {
                queryParameters['stripe_id'] = requestParameters.stripeId;
            }
            if (requestParameters.stripePlan !== undefined) {
                queryParameters['stripe_plan'] = requestParameters.stripePlan;
            }
            if (requestParameters.stripeSubscription !== undefined) {
                queryParameters['stripe_subscription'] = requestParameters.stripeSubscription;
            }
            if (requestParameters.subscriptionEndsAt !== undefined) {
                queryParameters['subscription_ends_at'] = requestParameters.subscriptionEndsAt.toISOString();
            }
            if (requestParameters.subscriptionProvider !== undefined) {
                queryParameters['subscription_provider'] = requestParameters.subscriptionProvider;
            }
            if (requestParameters.tagLine !== undefined) {
                queryParameters['tag_line'] = requestParameters.tagLine;
            }
            if (requestParameters.timeZoneOffset !== undefined) {
                queryParameters['time_zone_offset'] = requestParameters.timeZoneOffset;
            }
            if (requestParameters.timezone !== undefined) {
                queryParameters['timezone'] = requestParameters.timezone;
            }
            if (requestParameters.trackLocation !== undefined) {
                queryParameters['track_location'] = requestParameters.trackLocation;
            }
            if (requestParameters.trialEndsAt !== undefined) {
                queryParameters['trial_ends_at'] = requestParameters.trialEndsAt.toISOString();
            }
            if (requestParameters.unsubscribed !== undefined) {
                queryParameters['unsubscribed'] = requestParameters.unsubscribed;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userActivationKey !== undefined) {
                queryParameters['user_activation_key'] = requestParameters.userActivationKey;
            }
            if (requestParameters.userEmail !== undefined) {
                queryParameters['user_email'] = requestParameters.userEmail;
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.userLogin !== undefined) {
                queryParameters['user_login'] = requestParameters.userLogin;
            }
            if (requestParameters.userNicename !== undefined) {
                queryParameters['user_nicename'] = requestParameters.userNicename;
            }
            if (requestParameters.userPass !== undefined) {
                queryParameters['user_pass'] = requestParameters.userPass;
            }
            if (requestParameters.userRegistered !== undefined) {
                queryParameters['user_registered'] = requestParameters.userRegistered.toISOString();
            }
            if (requestParameters.userStatus !== undefined) {
                queryParameters['user_status'] = requestParameters.userStatus;
            }
            if (requestParameters.userUrl !== undefined) {
                queryParameters['user_url'] = requestParameters.userUrl;
            }
            if (requestParameters.verified !== undefined) {
                queryParameters['verified'] = requestParameters.verified;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            if (requestParameters.zipCode !== undefined) {
                queryParameters['zip_code'] = requestParameters.zipCode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/users`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * List Users
     */
    listUsers(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listUsersRaw(requestParameters);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * List Variable Categories
     */
    listVariableCategoriesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.averageSecondsBetweenMeasurements !== undefined) {
                queryParameters['average_seconds_between_measurements'] = requestParameters.averageSecondsBetweenMeasurements;
            }
            if (requestParameters.causeOnly !== undefined) {
                queryParameters['cause_only'] = requestParameters.causeOnly;
            }
            if (requestParameters.combinationOperation !== undefined) {
                queryParameters['combination_operation'] = requestParameters.combinationOperation;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.defaultUnitId !== undefined) {
                queryParameters['default_unit_id'] = requestParameters.defaultUnitId;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.durationOfAction !== undefined) {
                queryParameters['duration_of_action'] = requestParameters.durationOfAction;
            }
            if (requestParameters.fillingType !== undefined) {
                queryParameters['filling_type'] = requestParameters.fillingType;
            }
            if (requestParameters.fillingValue !== undefined) {
                queryParameters['filling_value'] = requestParameters.fillingValue;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.imageUrl !== undefined) {
                queryParameters['image_url'] = requestParameters.imageUrl;
            }
            if (requestParameters.manualTracking !== undefined) {
                queryParameters['manual_tracking'] = requestParameters.manualTracking;
            }
            if (requestParameters.maximumAllowedValue !== undefined) {
                queryParameters['maximum_allowed_value'] = requestParameters.maximumAllowedValue;
            }
            if (requestParameters.medianSecondsBetweenMeasurements !== undefined) {
                queryParameters['median_seconds_between_measurements'] = requestParameters.medianSecondsBetweenMeasurements;
            }
            if (requestParameters.minimumAllowedSecondsBetweenMeasurements !== undefined) {
                queryParameters['minimum_allowed_seconds_between_measurements'] = requestParameters.minimumAllowedSecondsBetweenMeasurements;
            }
            if (requestParameters.minimumAllowedValue !== undefined) {
                queryParameters['minimum_allowed_value'] = requestParameters.minimumAllowedValue;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.numberOfOutcomeCaseStudies !== undefined) {
                queryParameters['number_of_outcome_case_studies'] = requestParameters.numberOfOutcomeCaseStudies;
            }
            if (requestParameters.numberOfOutcomePopulationStudies !== undefined) {
                queryParameters['number_of_outcome_population_studies'] = requestParameters.numberOfOutcomePopulationStudies;
            }
            if (requestParameters.numberOfPredictorCaseStudies !== undefined) {
                queryParameters['number_of_predictor_case_studies'] = requestParameters.numberOfPredictorCaseStudies;
            }
            if (requestParameters.numberOfPredictorPopulationStudies !== undefined) {
                queryParameters['number_of_predictor_population_studies'] = requestParameters.numberOfPredictorPopulationStudies;
            }
            if (requestParameters.onsetDelay !== undefined) {
                queryParameters['onset_delay'] = requestParameters.onsetDelay;
            }
            if (requestParameters.outcome !== undefined) {
                queryParameters['outcome'] = requestParameters.outcome;
            }
            if (requestParameters._public !== undefined) {
                queryParameters['public'] = requestParameters._public;
            }
            if (requestParameters.updated !== undefined) {
                queryParameters['updated'] = requestParameters.updated;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_categories`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * List Variable Categories
     */
    listVariableCategories(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listVariableCategoriesRaw(requestParameters);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * List Variable User Sources
     */
    listVariableUserSourcesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.dataSourceName !== undefined) {
                queryParameters['data_source_name'] = requestParameters.dataSourceName;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.earliestMeasurementStartAt !== undefined) {
                queryParameters['earliest_measurement_start_at'] = requestParameters.earliestMeasurementStartAt.toISOString();
            }
            if (requestParameters.earliestMeasurementTime !== undefined) {
                queryParameters['earliest_measurement_time'] = requestParameters.earliestMeasurementTime;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.latestMeasurementStartAt !== undefined) {
                queryParameters['latest_measurement_start_at'] = requestParameters.latestMeasurementStartAt.toISOString();
            }
            if (requestParameters.latestMeasurementTime !== undefined) {
                queryParameters['latest_measurement_time'] = requestParameters.latestMeasurementTime;
            }
            if (requestParameters.numberOfRawMeasurements !== undefined) {
                queryParameters['number_of_raw_measurements'] = requestParameters.numberOfRawMeasurements;
            }
            if (requestParameters.sourceId !== undefined) {
                queryParameters['source_id'] = requestParameters.sourceId;
            }
            if (requestParameters.timestamp !== undefined) {
                queryParameters['timestamp'] = requestParameters.timestamp;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.userVariableId !== undefined) {
                queryParameters['user_variable_id'] = requestParameters.userVariableId;
            }
            if (requestParameters.variableId !== undefined) {
                queryParameters['variable_id'] = requestParameters.variableId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_user_sources`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * List Variable User Sources
     */
    listVariableUserSources(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listVariableUserSourcesRaw(requestParameters);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * List Variables
     */
    listVariablesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.analysisEndedAt !== undefined) {
                queryParameters['analysis_ended_at'] = requestParameters.analysisEndedAt.toISOString();
            }
            if (requestParameters.analysisRequestedAt !== undefined) {
                queryParameters['analysis_requested_at'] = requestParameters.analysisRequestedAt.toISOString();
            }
            if (requestParameters.analysisSettingsModifiedAt !== undefined) {
                queryParameters['analysis_settings_modified_at'] = requestParameters.analysisSettingsModifiedAt.toISOString();
            }
            if (requestParameters.analysisStartedAt !== undefined) {
                queryParameters['analysis_started_at'] = requestParameters.analysisStartedAt.toISOString();
            }
            if (requestParameters.averageSecondsBetweenMeasurements !== undefined) {
                queryParameters['average_seconds_between_measurements'] = requestParameters.averageSecondsBetweenMeasurements;
            }
            if (requestParameters.bestAggregateCorrelationId !== undefined) {
                queryParameters['best_aggregate_correlation_id'] = requestParameters.bestAggregateCorrelationId;
            }
            if (requestParameters.bestCauseVariableId !== undefined) {
                queryParameters['best_cause_variable_id'] = requestParameters.bestCauseVariableId;
            }
            if (requestParameters.bestEffectVariableId !== undefined) {
                queryParameters['best_effect_variable_id'] = requestParameters.bestEffectVariableId;
            }
            if (requestParameters.brandName !== undefined) {
                queryParameters['brand_name'] = requestParameters.brandName;
            }
            if (requestParameters.causeOnly !== undefined) {
                queryParameters['cause_only'] = requestParameters.causeOnly;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.combinationOperation !== undefined) {
                queryParameters['combination_operation'] = requestParameters.combinationOperation;
            }
            if (requestParameters.commonAlias !== undefined) {
                queryParameters['common_alias'] = requestParameters.commonAlias;
            }
            if (requestParameters.commonMaximumAllowedDailyValue !== undefined) {
                queryParameters['common_maximum_allowed_daily_value'] = requestParameters.commonMaximumAllowedDailyValue;
            }
            if (requestParameters.commonMinimumAllowedDailyValue !== undefined) {
                queryParameters['common_minimum_allowed_daily_value'] = requestParameters.commonMinimumAllowedDailyValue;
            }
            if (requestParameters.commonMinimumAllowedNonZeroValue !== undefined) {
                queryParameters['common_minimum_allowed_non_zero_value'] = requestParameters.commonMinimumAllowedNonZeroValue;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.creatorUserId !== undefined) {
                queryParameters['creator_user_id'] = requestParameters.creatorUserId;
            }
            if (requestParameters.defaultUnitId !== undefined) {
                queryParameters['default_unit_id'] = requestParameters.defaultUnitId;
            }
            if (requestParameters.defaultValue !== undefined) {
                queryParameters['default_value'] = requestParameters.defaultValue;
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.durationOfAction !== undefined) {
                queryParameters['duration_of_action'] = requestParameters.durationOfAction;
            }
            if (requestParameters.earliestMeasurementTime !== undefined) {
                queryParameters['earliest_measurement_time'] = requestParameters.earliestMeasurementTime;
            }
            if (requestParameters.earliestNonTaggedMeasurementStartAt !== undefined) {
                queryParameters['earliest_non_tagged_measurement_start_at'] = requestParameters.earliestNonTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.earliestNonTaggedMeasurementTime !== undefined) {
                queryParameters['earliest_non_tagged_measurement_time'] = requestParameters.earliestNonTaggedMeasurementTime;
            }
            if (requestParameters.earliestTaggedMeasurementStartAt !== undefined) {
                queryParameters['earliest_tagged_measurement_start_at'] = requestParameters.earliestTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.earliestTaggedMeasurementTime !== undefined) {
                queryParameters['earliest_tagged_measurement_time'] = requestParameters.earliestTaggedMeasurementTime;
            }
            if (requestParameters.fillingType !== undefined) {
                queryParameters['filling_type'] = requestParameters.fillingType;
            }
            if (requestParameters.fillingValue !== undefined) {
                queryParameters['filling_value'] = requestParameters.fillingValue;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.imageUrl !== undefined) {
                queryParameters['image_url'] = requestParameters.imageUrl;
            }
            if (requestParameters.informationalUrl !== undefined) {
                queryParameters['informational_url'] = requestParameters.informationalUrl;
            }
            if (requestParameters.internalErrorMessage !== undefined) {
                queryParameters['internal_error_message'] = requestParameters.internalErrorMessage;
            }
            if (requestParameters.ionIcon !== undefined) {
                queryParameters['ion_icon'] = requestParameters.ionIcon;
            }
            if (requestParameters.kurtosis !== undefined) {
                queryParameters['kurtosis'] = requestParameters.kurtosis;
            }
            if (requestParameters.lastSuccessfulUpdateTime !== undefined) {
                queryParameters['last_successful_update_time'] = requestParameters.lastSuccessfulUpdateTime.toISOString();
            }
            if (requestParameters.latestMeasurementTime !== undefined) {
                queryParameters['latest_measurement_time'] = requestParameters.latestMeasurementTime;
            }
            if (requestParameters.latestNonTaggedMeasurementStartAt !== undefined) {
                queryParameters['latest_non_tagged_measurement_start_at'] = requestParameters.latestNonTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.latestNonTaggedMeasurementTime !== undefined) {
                queryParameters['latest_non_tagged_measurement_time'] = requestParameters.latestNonTaggedMeasurementTime;
            }
            if (requestParameters.latestTaggedMeasurementStartAt !== undefined) {
                queryParameters['latest_tagged_measurement_start_at'] = requestParameters.latestTaggedMeasurementStartAt.toISOString();
            }
            if (requestParameters.latestTaggedMeasurementTime !== undefined) {
                queryParameters['latest_tagged_measurement_time'] = requestParameters.latestTaggedMeasurementTime;
            }
            if (requestParameters.manualTracking !== undefined) {
                queryParameters['manual_tracking'] = requestParameters.manualTracking;
            }
            if (requestParameters.maximumAllowedValue !== undefined) {
                queryParameters['maximum_allowed_value'] = requestParameters.maximumAllowedValue;
            }
            if (requestParameters.maximumRecordedValue !== undefined) {
                queryParameters['maximum_recorded_value'] = requestParameters.maximumRecordedValue;
            }
            if (requestParameters.mean !== undefined) {
                queryParameters['mean'] = requestParameters.mean;
            }
            if (requestParameters.median !== undefined) {
                queryParameters['median'] = requestParameters.median;
            }
            if (requestParameters.medianSecondsBetweenMeasurements !== undefined) {
                queryParameters['median_seconds_between_measurements'] = requestParameters.medianSecondsBetweenMeasurements;
            }
            if (requestParameters.minimumAllowedSecondsBetweenMeasurements !== undefined) {
                queryParameters['minimum_allowed_seconds_between_measurements'] = requestParameters.minimumAllowedSecondsBetweenMeasurements;
            }
            if (requestParameters.minimumAllowedValue !== undefined) {
                queryParameters['minimum_allowed_value'] = requestParameters.minimumAllowedValue;
            }
            if (requestParameters.minimumRecordedValue !== undefined) {
                queryParameters['minimum_recorded_value'] = requestParameters.minimumRecordedValue;
            }
            if (requestParameters.mostCommonConnectorId !== undefined) {
                queryParameters['most_common_connector_id'] = requestParameters.mostCommonConnectorId;
            }
            if (requestParameters.mostCommonOriginalUnitId !== undefined) {
                queryParameters['most_common_original_unit_id'] = requestParameters.mostCommonOriginalUnitId;
            }
            if (requestParameters.mostCommonSourceName !== undefined) {
                queryParameters['most_common_source_name'] = requestParameters.mostCommonSourceName;
            }
            if (requestParameters.mostCommonValue !== undefined) {
                queryParameters['most_common_value'] = requestParameters.mostCommonValue;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.newestDataAt !== undefined) {
                queryParameters['newest_data_at'] = requestParameters.newestDataAt.toISOString();
            }
            if (requestParameters.numberCommonTaggedBy !== undefined) {
                queryParameters['number_common_tagged_by'] = requestParameters.numberCommonTaggedBy;
            }
            if (requestParameters.numberOfAggregateCorrelationsAsCause !== undefined) {
                queryParameters['number_of_aggregate_correlations_as_cause'] = requestParameters.numberOfAggregateCorrelationsAsCause;
            }
            if (requestParameters.numberOfAggregateCorrelationsAsEffect !== undefined) {
                queryParameters['number_of_aggregate_correlations_as_effect'] = requestParameters.numberOfAggregateCorrelationsAsEffect;
            }
            if (requestParameters.numberOfApplicationsWhereOutcomeVariable !== undefined) {
                queryParameters['number_of_applications_where_outcome_variable'] = requestParameters.numberOfApplicationsWhereOutcomeVariable;
            }
            if (requestParameters.numberOfApplicationsWherePredictorVariable !== undefined) {
                queryParameters['number_of_applications_where_predictor_variable'] = requestParameters.numberOfApplicationsWherePredictorVariable;
            }
            if (requestParameters.numberOfCommonTags !== undefined) {
                queryParameters['number_of_common_tags'] = requestParameters.numberOfCommonTags;
            }
            if (requestParameters.numberOfCommonTagsWhereTagVariable !== undefined) {
                queryParameters['number_of_common_tags_where_tag_variable'] = requestParameters.numberOfCommonTagsWhereTagVariable;
            }
            if (requestParameters.numberOfCommonTagsWhereTaggedVariable !== undefined) {
                queryParameters['number_of_common_tags_where_tagged_variable'] = requestParameters.numberOfCommonTagsWhereTaggedVariable;
            }
            if (requestParameters.numberOfOutcomeCaseStudies !== undefined) {
                queryParameters['number_of_outcome_case_studies'] = requestParameters.numberOfOutcomeCaseStudies;
            }
            if (requestParameters.numberOfOutcomePopulationStudies !== undefined) {
                queryParameters['number_of_outcome_population_studies'] = requestParameters.numberOfOutcomePopulationStudies;
            }
            if (requestParameters.numberOfPredictorPopulationStudies !== undefined) {
                queryParameters['number_of_predictor_population_studies'] = requestParameters.numberOfPredictorPopulationStudies;
            }
            if (requestParameters.numberOfRawMeasurements !== undefined) {
                queryParameters['number_of_raw_measurements'] = requestParameters.numberOfRawMeasurements;
            }
            if (requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren !== undefined) {
                queryParameters['number_of_raw_measurements_with_tags_joins_children'] = requestParameters.numberOfRawMeasurementsWithTagsJoinsChildren;
            }
            if (requestParameters.numberOfSoftDeletedMeasurements !== undefined) {
                queryParameters['number_of_soft_deleted_measurements'] = requestParameters.numberOfSoftDeletedMeasurements;
            }
            if (requestParameters.numberOfTrackingReminders !== undefined) {
                queryParameters['number_of_tracking_reminders'] = requestParameters.numberOfTrackingReminders;
            }
            if (requestParameters.numberOfUniqueValues !== undefined) {
                queryParameters['number_of_unique_values'] = requestParameters.numberOfUniqueValues;
            }
            if (requestParameters.numberOfUserVariables !== undefined) {
                queryParameters['number_of_user_variables'] = requestParameters.numberOfUserVariables;
            }
            if (requestParameters.onsetDelay !== undefined) {
                queryParameters['onset_delay'] = requestParameters.onsetDelay;
            }
            if (requestParameters.optimalValueMessage !== undefined) {
                queryParameters['optimal_value_message'] = requestParameters.optimalValueMessage;
            }
            if (requestParameters.outcome !== undefined) {
                queryParameters['outcome'] = requestParameters.outcome;
            }
            if (requestParameters.parentId !== undefined) {
                queryParameters['parent_id'] = requestParameters.parentId;
            }
            if (requestParameters.price !== undefined) {
                queryParameters['price'] = requestParameters.price;
            }
            if (requestParameters.productUrl !== undefined) {
                queryParameters['product_url'] = requestParameters.productUrl;
            }
            if (requestParameters._public !== undefined) {
                queryParameters['public'] = requestParameters._public;
            }
            if (requestParameters.reasonForAnalysis !== undefined) {
                queryParameters['reason_for_analysis'] = requestParameters.reasonForAnalysis;
            }
            if (requestParameters.secondMostCommonValue !== undefined) {
                queryParameters['second_most_common_value'] = requestParameters.secondMostCommonValue;
            }
            if (requestParameters.skewness !== undefined) {
                queryParameters['skewness'] = requestParameters.skewness;
            }
            if (requestParameters.standardDeviation !== undefined) {
                queryParameters['standard_deviation'] = requestParameters.standardDeviation;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.thirdMostCommonValue !== undefined) {
                queryParameters['third_most_common_value'] = requestParameters.thirdMostCommonValue;
            }
            if (requestParameters.upc12 !== undefined) {
                queryParameters['upc_12'] = requestParameters.upc12;
            }
            if (requestParameters.upc14 !== undefined) {
                queryParameters['upc_14'] = requestParameters.upc14;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userErrorMessage !== undefined) {
                queryParameters['user_error_message'] = requestParameters.userErrorMessage;
            }
            if (requestParameters.valence !== undefined) {
                queryParameters['valence'] = requestParameters.valence;
            }
            if (requestParameters.variableCategoryId !== undefined) {
                queryParameters['variable_category_id'] = requestParameters.variableCategoryId;
            }
            if (requestParameters.variance !== undefined) {
                queryParameters['variance'] = requestParameters.variance;
            }
            if (requestParameters.wikipediaTitle !== undefined) {
                queryParameters['wikipedia_title'] = requestParameters.wikipediaTitle;
            }
            if (requestParameters.wikipediaUrl !== undefined) {
                queryParameters['wikipedia_url'] = requestParameters.wikipediaUrl;
            }
            if (requestParameters.wpPostId !== undefined) {
                queryParameters['wp_post_id'] = requestParameters.wpPostId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variables`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * List Variables
     */
    listVariables(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listVariablesRaw(requestParameters);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * List Votes
     */
    listVotesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.causeVariableId !== undefined) {
                queryParameters['cause_variable_id'] = requestParameters.causeVariableId;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt.toISOString();
            }
            if (requestParameters.deletedAt !== undefined) {
                queryParameters['deleted_at'] = requestParameters.deletedAt.toISOString();
            }
            if (requestParameters.effectVariableId !== undefined) {
                queryParameters['effect_variable_id'] = requestParameters.effectVariableId;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.updatedAt !== undefined) {
                queryParameters['updated_at'] = requestParameters.updatedAt.toISOString();
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            if (requestParameters.value !== undefined) {
                queryParameters['value'] = requestParameters.value;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/votes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * List Votes
     */
    listVotes(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.listVotesRaw(requestParameters);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Store a Aggregate Correlation
     */
    storeAggregateCorrelationRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/aggregate_correlations`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Store a Aggregate Correlation
     */
    storeAggregateCorrelation() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeAggregateCorrelationRaw();
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Store a Application
     */
    storeApplicationRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/applications`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Store a Application
     */
    storeApplication() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeApplicationRaw();
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Store a Collaborator
     */
    storeCollaboratorRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/collaborators`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Store a Collaborator
     */
    storeCollaborator() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeCollaboratorRaw();
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a Common Tag
     */
    storeCommonTagRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/common_tags`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a Common Tag
     */
    storeCommonTag() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeCommonTagRaw();
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Store a Connection
     */
    storeConnectionRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connections`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Store a Connection
     */
    storeConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeConnectionRaw();
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Store a Connector
     */
    storeConnectorRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connectors`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Store a Connector
     */
    storeConnector() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeConnectorRaw();
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Store a Connector Import
     */
    storeConnectorImportRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_imports`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Store a Connector Import
     */
    storeConnectorImport() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeConnectorImportRaw();
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Store a Connector Request
     */
    storeConnectorRequestRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_requests`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Store a Connector Request
     */
    storeConnectorRequest() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeConnectorRequestRaw();
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Store a Correlation
     */
    storeCorrelationRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/correlations`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Store a Correlation
     */
    storeCorrelation() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeCorrelationRaw();
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Store a Device Token
     */
    storeDeviceTokenRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/device_tokens`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Store a Device Token
     */
    storeDeviceToken() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeDeviceTokenRaw();
        });
    }
    /**
     * Measurement
     * Store a Measurement
     */
    storeMeasurementRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurements`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Measurement
     * Store a Measurement
     */
    storeMeasurement() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeMeasurementRaw();
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Store a Measurement Export
     */
    storeMeasurementExportRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_exports`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Store a Measurement Export
     */
    storeMeasurementExport() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeMeasurementExportRaw();
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Store a Measurement Import
     */
    storeMeasurementImportRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_imports`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Store a Measurement Import
     */
    storeMeasurementImport() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeMeasurementImportRaw();
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Store a Notification
     */
    storeNotificationRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/notifications`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Store a Notification
     */
    storeNotification() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeNotificationRaw();
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Store a OAuth Access Token
     */
    storeOAuthAccessTokenRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_access_tokens`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Store a OAuth Access Token
     */
    storeOAuthAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeOAuthAccessTokenRaw();
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Store a OAuth Client
     */
    storeOAuthClientRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_clients`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Store a OAuth Client
     */
    storeOAuthClient() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeOAuthClientRaw();
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Store a Post
     */
    storePostRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/wp_posts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Store a Post
     */
    storePost() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storePostRaw();
        });
    }
    /**
     * A sent email
     * Store a Sent Email
     */
    storeSentEmailRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/sent_emails`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A sent email
     * Store a Sent Email
     */
    storeSentEmail() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeSentEmailRaw();
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Store a Study
     */
    storeStudyRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/studies`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Store a Study
     */
    storeStudy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeStudyRaw();
        });
    }
    /**
     * Favorite
     * Store a Tracking Reminder
     */
    storeTrackingReminderRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminders`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Favorite
     * Store a Tracking Reminder
     */
    storeTrackingReminder() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeTrackingReminderRaw();
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Store a Tracking Reminder Notification
     */
    storeTrackingReminderNotificationRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminder_notifications`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Store a Tracking Reminder Notification
     */
    storeTrackingReminderNotification() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeTrackingReminderNotificationRaw();
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Store a User
     */
    storeUserRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/users`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Store a User
     */
    storeUser() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeUserRaw();
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a User Tag
     */
    storeUserTagRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_tags`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a User Tag
     */
    storeUserTag() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeUserTagRaw();
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Store a User Variable
     */
    storeUserVariableRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_variables`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Store a User Variable
     */
    storeUserVariable() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeUserVariableRaw();
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Store a Variable
     */
    storeVariableRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variables`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Store a Variable
     */
    storeVariable() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeVariableRaw();
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Store a Variable Category
     */
    storeVariableCategoryRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_categories`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Store a Variable Category
     */
    storeVariableCategory() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeVariableCategoryRaw();
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Store a Variable User Source
     */
    storeVariableUserSourceRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_user_sources`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Store a Variable User Source
     */
    storeVariableUserSource() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeVariableUserSourceRaw();
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Store a Vote
     */
    storeVoteRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/votes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Store a Vote
     */
    storeVote() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storeVoteRaw();
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Update a Aggregate Correlation
     */
    updateAggregateCorrelationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateAggregateCorrelation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/aggregate_correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Update a Aggregate Correlation
     */
    updateAggregateCorrelation(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateAggregateCorrelationRaw(requestParameters);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Update a Application
     */
    updateApplicationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateApplication.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Update a Application
     */
    updateApplication(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateApplicationRaw(requestParameters);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Update a Collaborator
     */
    updateCollaboratorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateCollaborator.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/collaborators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Update a Collaborator
     */
    updateCollaborator(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateCollaboratorRaw(requestParameters);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a Common Tag
     */
    updateCommonTagRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateCommonTag.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/common_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a Common Tag
     */
    updateCommonTag(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateCommonTagRaw(requestParameters);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Update a Connection
     */
    updateConnectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateConnection.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Connections to 3rd party data sources that we can import from.
     * Update a Connection
     */
    updateConnection(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateConnectionRaw(requestParameters);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Update a Connector
     */
    updateConnectorRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateConnector.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connectors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Update a Connector
     */
    updateConnector(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateConnectorRaw(requestParameters);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Update a Connector Import
     */
    updateConnectorImportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateConnectorImport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A record of attempts to import from a given data source.
     * Update a Connector Import
     */
    updateConnectorImport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateConnectorImportRaw(requestParameters);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Update a Connector Request
     */
    updateConnectorRequestRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateConnectorRequest.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/connector_requests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Update a Connector Request
     */
    updateConnectorRequest(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateConnectorRequestRaw(requestParameters);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Update a Correlation
     */
    updateCorrelationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateCorrelation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/correlations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Update a Correlation
     */
    updateCorrelation(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateCorrelationRaw(requestParameters);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Update a Device Token
     */
    updateDeviceTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateDeviceToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/device_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Update a Device Token
     */
    updateDeviceToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateDeviceTokenRaw(requestParameters);
        });
    }
    /**
     * Measurement
     * Update a Measurement
     */
    updateMeasurementRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateMeasurement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Measurement
     * Update a Measurement
     */
    updateMeasurement(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateMeasurementRaw(requestParameters);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Update a Measurement Export
     */
    updateMeasurementExportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateMeasurementExport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_exports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A request from a user to export their data as a spreadsheet.
     * Update a Measurement Export
     */
    updateMeasurementExport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateMeasurementExportRaw(requestParameters);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Update a Measurement Import
     */
    updateMeasurementImportRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateMeasurementImport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/measurement_imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Update a Measurement Import
     */
    updateMeasurementImport(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateMeasurementImportRaw(requestParameters);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Update a Notification
     */
    updateNotificationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateNotification.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Tracking reminder notifications, messages, and study results.
     * Update a Notification
     */
    updateNotification(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateNotificationRaw(requestParameters);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Update a OAuth Access Token
     */
    updateOAuthAccessTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateOAuthAccessToken.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_access_tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Update a OAuth Access Token
     */
    updateOAuthAccessToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateOAuthAccessTokenRaw(requestParameters);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Update a OAuth Client
     */
    updateOAuthClientRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateOAuthClient.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/oauth_clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Update a OAuth Client
     */
    updateOAuthClient(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateOAuthClientRaw(requestParameters);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Update a Post
     */
    updatePostRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updatePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/wp_posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Published studies at the Journal of Citizen Science.
     * Update a Post
     */
    updatePost(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updatePostRaw(requestParameters);
        });
    }
    /**
     * A sent email
     * Update a Sent Email
     */
    updateSentEmailRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateSentEmail.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/sent_emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A sent email
     * Update a Sent Email
     */
    updateSentEmail(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateSentEmailRaw(requestParameters);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Update a Study
     */
    updateStudyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateStudy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Study Analysis Settings Saved by Individuals
     * Update a Study
     */
    updateStudy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateStudyRaw(requestParameters);
        });
    }
    /**
     * Favorite
     * Update a Tracking Reminder
     */
    updateTrackingReminderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateTrackingReminder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Favorite
     * Update a Tracking Reminder
     */
    updateTrackingReminder(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateTrackingReminderRaw(requestParameters);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Update a Tracking Reminder Notification
     */
    updateTrackingReminderNotificationRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateTrackingReminderNotification.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/tracking_reminder_notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Update a Tracking Reminder Notification
     */
    updateTrackingReminderNotification(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateTrackingReminderNotificationRaw(requestParameters);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Update a User
     */
    updateUserRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUser.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Overview of discoveries, research from \'s data
     * Update a User
     */
    updateUser(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserRaw(requestParameters);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a User Tag
     */
    updateUserTagRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUserTag.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a User Tag
     */
    updateUserTag(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserTagRaw(requestParameters);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Update a User Variable
     */
    updateUserVariableRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUserVariable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/user_variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Update a User Variable
     */
    updateUserVariable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserVariableRaw(requestParameters);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Update a Variable
     */
    updateVariableRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateVariable.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Update a Variable
     */
    updateVariable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateVariableRaw(requestParameters);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Update a Variable Category
     */
    updateVariableCategoryRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateVariableCategory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Update a Variable Category
     */
    updateVariableCategory(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateVariableCategoryRaw(requestParameters);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Update a Variable User Source
     */
    updateVariableUserSourceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateVariableUserSource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/variable_user_sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * A list of data sources for a given variable for a given user.
     * Update a Variable User Source
     */
    updateVariableUserSource(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateVariableUserSourceRaw(requestParameters);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Update a Vote
     */
    updateVoteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateVote.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v6/votes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Update a Vote
     */
    updateVote(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateVoteRaw(requestParameters);
        });
    }
}
exports.DefaultApi = DefaultApi;
