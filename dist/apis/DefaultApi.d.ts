/**
 * QuantiModo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
export interface DeleteAggregateCorrelationRequest {
    id: number;
}
export interface DeleteApplicationRequest {
    id: number;
}
export interface DeleteCollaboratorRequest {
    id: number;
}
export interface DeleteCommonTagRequest {
    id: number;
}
export interface DeleteConnectionRequest {
    id: number;
}
export interface DeleteConnectorRequest {
    id: number;
}
export interface DeleteConnectorImportRequest {
    id: number;
}
export interface DeleteConnectorRequestRequest {
    id: number;
}
export interface DeleteCorrelationRequest {
    id: number;
}
export interface DeleteDeviceTokenRequest {
    id: number;
}
export interface DeleteMeasurementRequest {
    id: number;
}
export interface DeleteMeasurementExportRequest {
    id: number;
}
export interface DeleteMeasurementImportRequest {
    id: number;
}
export interface DeleteNotificationRequest {
    id: string;
}
export interface DeleteOAuthAccessTokenRequest {
    id: number;
}
export interface DeleteOAuthClientRequest {
    id: number;
}
export interface DeletePostRequest {
    id: number;
}
export interface DeleteSentEmailRequest {
    id: number;
}
export interface DeleteStudyRequest {
    id: number;
}
export interface DeleteTrackingReminderRequest {
    id: number;
}
export interface DeleteTrackingReminderNotificationRequest {
    id: number;
}
export interface DeleteUserRequest {
    id: number;
}
export interface DeleteUserTagRequest {
    id: number;
}
export interface DeleteUserVariableRequest {
    id: number;
}
export interface DeleteVariableRequest {
    id: number;
}
export interface DeleteVariableCategoryRequest {
    id: number;
}
export interface DeleteVariableUserSourceRequest {
    id: number;
}
export interface DeleteVoteRequest {
    id: number;
}
export interface GetAggregateCorrelationRequest {
    id: number;
}
export interface GetApplicationRequest {
    id: number;
}
export interface GetCollaboratorRequest {
    id: number;
}
export interface GetCommonTagRequest {
    id: number;
}
export interface GetConnectionRequest {
    id: number;
}
export interface GetConnectorRequest {
    id: number;
}
export interface GetConnectorImportRequest {
    id: number;
}
export interface GetConnectorRequestRequest {
    id: number;
}
export interface GetCorrelationRequest {
    id: number;
}
export interface GetDeviceTokenRequest {
    id: number;
}
export interface GetMeasurementRequest {
    id: number;
}
export interface GetMeasurementExportRequest {
    id: number;
}
export interface GetMeasurementImportRequest {
    id: number;
}
export interface GetNotificationRequest {
    id: string;
}
export interface GetOAuthAccessTokenRequest {
    id: number;
}
export interface GetOAuthClientRequest {
    id: number;
}
export interface GetPostRequest {
    id: number;
}
export interface GetSentEmailRequest {
    id: number;
}
export interface GetStudyRequest {
    id: number;
}
export interface GetTrackingReminderRequest {
    id: number;
}
export interface GetTrackingReminderNotificationRequest {
    id: number;
}
export interface GetUserRequest {
    id: number;
}
export interface GetUserTagRequest {
    id: number;
}
export interface GetUserVariableRequest {
    id: number;
}
export interface GetVariableRequest {
    id: number;
}
export interface GetVariableCategoryRequest {
    id: number;
}
export interface GetVariableUserSourceRequest {
    id: number;
}
export interface GetVoteRequest {
    id: number;
}
export interface ListAggregateCorrelationsRequest {
    limit?: number;
    offset?: number;
    aggregateQmScore?: number;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisStartedAt?: Date;
    averageDailyHighCause?: number;
    averageDailyLowCause?: number;
    averageEffect?: number;
    averageEffectFollowingHighCause?: number;
    averageEffectFollowingLowCause?: number;
    averageVote?: number;
    causeBaselineAveragePerDay?: number;
    causeBaselineAveragePerDurationOfAction?: number;
    causeChanges?: number;
    causeTreatmentAveragePerDay?: number;
    causeTreatmentAveragePerDurationOfAction?: number;
    causeUnitId?: number;
    causeVariableCategoryId?: number;
    causeVariableId?: number;
    clientId?: string;
    confidenceInterval?: number;
    createdAt?: Date;
    criticalTValue?: number;
    dataSourceName?: string;
    deletedAt?: Date;
    durationOfAction?: number;
    effectBaselineAverage?: number;
    effectBaselineRelativeStandardDeviation?: number;
    effectBaselineStandardDeviation?: number;
    effectChanges?: number;
    effectFollowUpAverage?: number;
    effectFollowUpPercentChangeFromBaseline?: number;
    effectVariableCategoryId?: number;
    effectVariableId?: number;
    forwardPearsonCorrelationCoefficient?: number;
    groupedCauseValueClosestToValuePredictingHighOutcome?: number;
    groupedCauseValueClosestToValuePredictingLowOutcome?: number;
    id?: number;
    interestingVariableCategoryPair?: boolean;
    internalErrorMessage?: string;
    newestDataAt?: Date;
    numberOfCorrelations?: number;
    numberOfPairs?: number;
    numberOfUsers?: number;
    onsetDelay?: number;
    optimalPearsonProduct?: number;
    pValue?: number;
    populationTraitPearsonCorrelationCoefficient?: number;
    predictivePearsonCorrelationCoefficient?: number;
    predictsHighEffectChange?: number;
    predictsLowEffectChange?: number;
    publishedAt?: Date;
    reasonForAnalysis?: string;
    reversePearsonCorrelationCoefficient?: number;
    statisticalSignificance?: number;
    status?: string;
    tValue?: number;
    updatedAt?: Date;
    userErrorMessage?: string;
    valuePredictingHighOutcome?: number;
    valuePredictingLowOutcome?: number;
    wpPostId?: number;
    zScore?: number;
}
export interface ListApplicationsRequest {
    limit?: number;
    offset?: number;
    additionalSettings?: string;
    address?: string;
    appDescription?: string;
    appDesign?: string;
    appDisplayName?: string;
    appStatus?: string;
    appType?: string;
    billingEnabled?: number;
    buildEnabled?: boolean;
    city?: string;
    clientId?: string;
    companyName?: string;
    country?: string;
    createdAt?: Date;
    deletedAt?: Date;
    enabled?: number;
    exceedingCallCharge?: number;
    exceedingCallCount?: number;
    homepageUrl?: string;
    iconUrl?: string;
    id?: number;
    lastFour?: string;
    longDescription?: string;
    numberOfCollaboratorsWhereApp?: number;
    organizationId?: number;
    outcomeVariableId?: number;
    physician?: number;
    planId?: number;
    predictorVariableId?: number;
    splashScreen?: string;
    state?: string;
    status?: string;
    stripeActive?: number;
    stripeId?: string;
    stripePlan?: string;
    stripeSubscription?: string;
    study?: number;
    subscriptionEndsAt?: Date;
    textLogo?: string;
    trialEndsAt?: Date;
    updatedAt?: Date;
    userId?: number;
    wpPostId?: number;
    zip?: string;
}
export interface ListCollaboratorsRequest {
    limit?: number;
    offset?: number;
    appId?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    type?: string;
    updatedAt?: Date;
    userId?: number;
}
export interface ListCommonTagsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    conversionFactor?: number;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    numberOfDataPoints?: number;
    standardError?: number;
    tagVariableId?: number;
    tagVariableUnitId?: number;
    taggedVariableId?: number;
    taggedVariableUnitId?: number;
    updatedAt?: Date;
}
export interface ListConnectionsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    connectError?: string;
    connectStatus?: string;
    connectorId?: number;
    createdAt?: Date;
    credentials?: string;
    deletedAt?: Date;
    id?: number;
    importEndedAt?: Date;
    importStartedAt?: Date;
    importedDataEndAt?: Date;
    importedDataFromAt?: Date;
    internalErrorMessage?: string;
    lastSuccessfulUpdatedAt?: Date;
    latestMeasurementAt?: Date;
    numberOfConnectorImports?: number;
    numberOfConnectorRequests?: number;
    reasonForImport?: string;
    totalMeasurementsInLastUpdate?: number;
    updateError?: string;
    updateRequestedAt?: Date;
    updateStatus?: string;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
    userMessage?: string;
    wpPostId?: number;
}
export interface ListConnectorImportsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    connectionId?: number;
    connectorId?: number;
    connectorRequests?: Date;
    createdAt?: Date;
    credentials?: string;
    deletedAt?: Date;
    earliestMeasurementAt?: Date;
    id?: number;
    importEndedAt?: Date;
    importStartedAt?: Date;
    importedDataEndAt?: Date;
    importedDataFromAt?: Date;
    internalErrorMessage?: string;
    latestMeasurementAt?: Date;
    numberOfConnectorRequests?: number;
    numberOfMeasurements?: number;
    reasonForImport?: string;
    success?: boolean;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
}
export interface ListConnectorRequestsRequest {
    limit?: number;
    offset?: number;
    code?: number;
    connectionId?: number;
    connectorId?: number;
    connectorImportId?: number;
    contentType?: string;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    importedDataFromAt?: Date;
    method?: string;
    requestBody?: string;
    responseBody?: string;
    updatedAt?: Date;
    uri?: string;
    userId?: number;
}
export interface ListConnectorsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    displayName?: string;
    enabled?: boolean;
    getItUrl?: string;
    id?: number;
    image?: string;
    isParent?: string;
    longDescription?: string;
    name?: string;
    numberOfConnections?: string;
    numberOfConnectorImports?: string;
    numberOfConnectorRequests?: string;
    oauth?: boolean;
    qmClient?: string;
    shortDescription?: string;
    updatedAt?: Date;
    wpPostId?: string;
}
export interface ListCorrelationsRequest {
    limit?: number;
    offset?: number;
    aggregateCorrelationId?: number;
    aggregatedAt?: Date;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisStartedAt?: Date;
    averageDailyHighCause?: number;
    averageDailyLowCause?: number;
    averageEffect?: number;
    averageEffectFollowingHighCause?: number;
    averageEffectFollowingLowCause?: number;
    averageForwardPearsonCorrelationOverOnsetDelays?: number;
    averageReversePearsonCorrelationOverOnsetDelays?: number;
    causalityVote?: number;
    causeBaselineAveragePerDay?: number;
    causeBaselineAveragePerDurationOfAction?: number;
    causeChanges?: number;
    causeFillingValue?: number;
    causeNumberOfProcessedDailyMeasurements?: number;
    causeNumberOfRawMeasurements?: number;
    causeTreatmentAveragePerDay?: number;
    causeTreatmentAveragePerDurationOfAction?: number;
    causeUnitId?: number;
    causeUserVariableId?: number;
    causeVariableCategoryId?: number;
    causeVariableId?: number;
    clientId?: string;
    confidenceInterval?: number;
    createdAt?: Date;
    criticalTValue?: number;
    dataSourceName?: string;
    deletedAt?: Date;
    durationOfAction?: number;
    earliestMeasurementStartAt?: Date;
    effectBaselineAverage?: number;
    effectBaselineRelativeStandardDeviation?: number;
    effectBaselineStandardDeviation?: number;
    effectChanges?: number;
    effectFillingValue?: number;
    effectFollowUpAverage?: number;
    effectFollowUpPercentChangeFromBaseline?: number;
    effectNumberOfProcessedDailyMeasurements?: number;
    effectNumberOfRawMeasurements?: number;
    effectUserVariableId?: number;
    effectVariableCategoryId?: number;
    effectVariableId?: number;
    experimentEndAt?: Date;
    experimentEndTime?: Date;
    experimentStartAt?: Date;
    experimentStartTime?: Date;
    forwardPearsonCorrelationCoefficient?: number;
    forwardSpearmanCorrelationCoefficient?: number;
    groupedCauseValueClosestToValuePredictingHighOutcome?: number;
    groupedCauseValueClosestToValuePredictingLowOutcome?: number;
    id?: number;
    interestingVariableCategoryPair?: boolean;
    internalErrorMessage?: string;
    latestMeasurementStartAt?: Date;
    newestDataAt?: Date;
    numberOfDays?: number;
    numberOfPairs?: number;
    onsetDelay?: number;
    onsetDelayWithStrongestPearsonCorrelation?: number;
    optimalPearsonProduct?: number;
    pValue?: number;
    pearsonCorrelationWithNoOnsetDelay?: number;
    predictivePearsonCorrelationCoefficient?: number;
    predictsHighEffectChange?: number;
    predictsLowEffectChange?: number;
    publishedAt?: Date;
    qmScore?: number;
    reasonForAnalysis?: string;
    reversePearsonCorrelationCoefficient?: number;
    statisticalSignificance?: number;
    status?: string;
    strongestPearsonCorrelationCoefficient?: number;
    tValue?: number;
    updatedAt?: Date;
    usefulnessVote?: number;
    userErrorMessage?: string;
    userId?: number;
    valuePredictingHighOutcome?: number;
    valuePredictingLowOutcome?: number;
    wpPostId?: number;
    zScore?: number;
}
export interface ListDeviceTokensRequest {
    limit?: number;
    offset?: number;
    bshafferOauthClientsId?: string;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    deviceToken?: string;
    errorMessage?: string;
    lastCheckedAt?: Date;
    lastNotifiedAt?: Date;
    numberOfNewTrackingReminderNotifications?: number;
    numberOfNotificationsLastSent?: number;
    numberOfWaitingTrackingReminderNotifications?: number;
    platform?: string;
    receivedAt?: Date;
    serverHostname?: string;
    serverIp?: string;
    updatedAt?: Date;
    userId?: number;
}
export interface ListMeasurementExportsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    errorMessage?: string;
    id?: number;
    outputType?: string;
    status?: string;
    type?: string;
    updatedAt?: Date;
    userId?: number;
}
export interface ListMeasurementImportsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    errorMessage?: string;
    file?: string;
    id?: number;
    sourceId?: number;
    sourceName?: string;
    status?: string;
    updatedAt?: Date;
    userId?: number;
}
export interface ListMeasurementsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    connectionId?: string;
    connectorId?: number;
    connectorImportId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    duration?: number;
    error?: string;
    id?: number;
    latitude?: number;
    location?: string;
    longitude?: number;
    originalUnitId?: number;
    originalValue?: number;
    sourceId?: number;
    sourceName?: string;
    startAt?: Date;
    startTime?: number;
    unitId?: number;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    value?: number;
    variableCategoryId?: number;
    variableId?: number;
}
export interface ListNotificationsRequest {
    limit?: number;
    offset?: number;
    createdAt?: Date;
    data?: string;
    deletedAt?: string;
    id?: string;
    notifiableId?: number;
    notifiableType?: string;
    readAt?: Date;
    type?: string;
    updatedAt?: Date;
}
export interface ListOAuthAccessTokensRequest {
    limit?: number;
    offset?: number;
    accessToken?: string;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    expires?: Date;
    scope?: string;
    updatedAt?: Date;
    userId?: number;
}
export interface ListOAuthClientsRequest {
    limit?: number;
    offset?: number;
    appIdentifier?: string;
    clientId?: string;
    clientSecret?: string;
    createdAt?: Date;
    deletedAt?: Date;
    earliestMeasurementStartAt?: Date;
    grantTypes?: string;
    iconUrl?: string;
    latestMeasurementStartAt?: Date;
    numberOfAggregateCorrelations?: number;
    numberOfApplications?: number;
    numberOfButtonClicks?: number;
    numberOfCollaborators?: number;
    numberOfCommonTags?: number;
    numberOfConnections?: number;
    numberOfConnectorImports?: number;
    numberOfConnectors?: number;
    numberOfCorrelations?: number;
    numberOfOauthAccessTokens?: number;
    numberOfOauthAuthorizationCodes?: number;
    numberOfOauthRefreshTokens?: number;
    redirectUri?: string;
    updatedAt?: Date;
    userId?: number;
}
export interface ListPostsRequest {
    limit?: number;
    offset?: number;
    iD?: number;
    clientId?: string;
    commentCount?: number;
    commentStatus?: string;
    createdAt?: Date;
    deletedAt?: Date;
    guid?: string;
    menuOrder?: number;
    pingStatus?: string;
    pinged?: string;
    postAuthor?: number;
    postContent?: string;
    postContentFiltered?: string;
    postDate?: Date;
    postDateGmt?: Date;
    postExcerpt?: string;
    postMimeType?: string;
    postModified?: Date;
    postModifiedGmt?: Date;
    postName?: string;
    postParent?: number;
    postPassword?: string;
    postStatus?: string;
    postTitle?: string;
    postType?: string;
    toPing?: string;
    updatedAt?: Date;
}
export interface ListSentEmailsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    content?: string;
    createdAt?: Date;
    deletedAt?: Date;
    emailAddress?: string;
    id?: number;
    response?: string;
    slug?: string;
    subject?: string;
    type?: string;
    updatedAt?: Date;
    userId?: number;
    wpPostId?: number;
}
export interface ListStudiesRequest {
    limit?: number;
    offset?: number;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    causeVariableId?: number;
    clientId?: string;
    commentStatus?: string;
    createdAt?: Date;
    deletedAt?: Date;
    effectVariableId?: number;
    id?: number;
    internalErrorMessage?: string;
    newestDataAt?: Date;
    publishedAt?: Date;
    reasonForAnalysis?: string;
    statistics?: string;
    status?: string;
    studyPassword?: string;
    studyStatus?: string;
    type?: string;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
    userStudyText?: string;
    userTitle?: string;
    wpPostId?: number;
}
export interface ListTrackingReminderNotificationsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    notifiedAt?: Date;
    notifyAt?: Date;
    receivedAt?: Date;
    trackingReminderId?: number;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    variableId?: number;
}
export interface ListTrackingRemindersRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    defaultValue?: number;
    deletedAt?: Date;
    email?: boolean;
    id?: number;
    imageUrl?: string;
    instructions?: string;
    lastTracked?: Date;
    latestTrackingReminderNotificationNotifyAt?: Date;
    notificationBar?: boolean;
    popUp?: boolean;
    reminderEndTime?: string;
    reminderFrequency?: number;
    reminderSound?: string;
    reminderStartTime?: string;
    sms?: boolean;
    startTrackingDate?: string;
    stopTrackingDate?: string;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    variableId?: number;
}
export interface ListUserTagsRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    conversionFactor?: number;
    createdAt?: Date;
    deletedAt?: Date;
    id?: number;
    tagVariableId?: number;
    taggedVariableId?: number;
    updatedAt?: Date;
    userId?: number;
}
export interface ListUserVariablesRequest {
    limit?: number;
    offset?: number;
    alias?: string;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    averageSecondsBetweenMeasurements?: number;
    bestCauseVariableId?: number;
    bestEffectVariableId?: number;
    bestUserCorrelationId?: number;
    causeOnly?: boolean;
    clientId?: string;
    combinationOperation?: string;
    createdAt?: Date;
    defaultUnitId?: number;
    deletedAt?: Date;
    description?: string;
    durationOfAction?: number;
    earliestFillingTime?: number;
    earliestMeasurementTime?: string;
    earliestNonTaggedMeasurementStartAt?: Date;
    earliestNonTaggedMeasurementTime?: number;
    earliestSourceMeasurementStartAt?: Date;
    earliestSourceTime?: number;
    earliestTaggedMeasurementStartAt?: Date;
    earliestTaggedMeasurementTime?: number;
    experimentEndTime?: Date;
    experimentStartTime?: Date;
    fillingType?: string;
    fillingValue?: number;
    id?: number;
    informationalUrl?: string;
    internalErrorMessage?: string;
    joinWith?: number;
    kurtosis?: number;
    lastCorrelatedAt?: Date;
    lastOriginalUnitId?: number;
    lastOriginalValue?: number;
    lastProcessedDailyValue?: number;
    lastSourceId?: number;
    lastSuccessfulUpdateTime?: Date;
    lastUnitId?: number;
    lastValue?: number;
    latestFillingTime?: number;
    latestMeasurementTime?: string;
    latestNonTaggedMeasurementStartAt?: Date;
    latestNonTaggedMeasurementTime?: number;
    latestSourceMeasurementStartAt?: Date;
    latestSourceTime?: number;
    latestTaggedMeasurementStartAt?: Date;
    latestTaggedMeasurementTime?: number;
    latitude?: number;
    location?: string;
    longitude?: number;
    maximumAllowedValue?: number;
    maximumRecordedValue?: number;
    mean?: number;
    measurementsAtLastAnalysis?: number;
    median?: number;
    medianSecondsBetweenMeasurements?: number;
    minimumAllowedSecondsBetweenMeasurements?: number;
    minimumAllowedValue?: number;
    minimumRecordedValue?: number;
    mostCommonConnectorId?: number;
    mostCommonOriginalUnitId?: number;
    mostCommonSourceName?: string;
    mostCommonValue?: number;
    newestDataAt?: Date;
    numberOfChanges?: number;
    numberOfCorrelations?: number;
    numberOfMeasurementsWithTagsAtLastCorrelation?: number;
    numberOfProcessedDailyMeasurements?: number;
    numberOfRawMeasurements?: number;
    numberOfRawMeasurementsWithTagsJoinsChildren?: number;
    numberOfSoftDeletedMeasurements?: string;
    numberOfTrackingReminders?: number;
    numberOfUniqueDailyValues?: number;
    numberOfUniqueValues?: number;
    numberOfUserCorrelationsAsCause?: number;
    numberOfUserCorrelationsAsEffect?: number;
    onsetDelay?: number;
    optimalValueMessage?: string;
    outcome?: boolean;
    outcomeOfInterest?: boolean;
    parentId?: number;
    predictorOfInterest?: boolean;
    _public?: number;
    reasonForAnalysis?: string;
    secondToLastValue?: number;
    shareUserMeasurements?: boolean;
    skewness?: number;
    standardDeviation?: number;
    status?: string;
    thirdToLastValue?: number;
    updatedAt?: Date;
    userErrorMessage?: string;
    userId?: number;
    userMaximumAllowedDailyValue?: number;
    userMinimumAllowedDailyValue?: number;
    userMinimumAllowedNonZeroValue?: number;
    valence?: string;
    variableCategoryId?: number;
    variableId?: number;
    variance?: number;
    wikipediaTitle?: string;
    wpPostId?: string;
}
export interface ListUsersRequest {
    limit?: number;
    offset?: number;
    iD?: number;
    address?: string;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    avatarImage?: string;
    birthday?: string;
    cardBrand?: string;
    cardLastFour?: string;
    clientId?: string;
    combineNotifications?: boolean;
    country?: string;
    coverPhoto?: string;
    createdAt?: Date;
    currency?: string;
    deleted?: number;
    deletedAt?: Date;
    displayName?: string;
    earliestReminderTime?: string;
    firstName?: string;
    gender?: string;
    getPreviewBuilds?: boolean;
    hasAndroidApp?: boolean;
    hasChromeExtension?: boolean;
    hasIosApp?: boolean;
    internalErrorMessage?: string;
    language?: string;
    lastCorrelationAt?: Date;
    lastEmailAt?: Date;
    lastFour?: string;
    lastLoginAt?: Date;
    lastName?: string;
    lastPushAt?: Date;
    lastSmsTrackingReminderNotificationId?: number;
    latestReminderTime?: string;
    newestDataAt?: Date;
    numberOfApplications?: number;
    numberOfButtonClicks?: number;
    numberOfCollaborators?: number;
    numberOfConnections?: number;
    numberOfConnectorImports?: number;
    numberOfConnectorRequests?: number;
    numberOfCorrelations?: number;
    numberOfOauthAccessTokens?: number;
    numberOfOauthAuthorizationCodes?: number;
    numberOfOauthClients?: number;
    numberOfOauthRefreshTokens?: number;
    numberOfRawMeasurementsWithTags?: number;
    numberOfRawMeasurementsWithTagsAtLastCorrelation?: number;
    numberOfStudies?: number;
    numberOfTrackingReminders?: number;
    numberOfUserVariables?: number;
    numberOfVotes?: number;
    oldUser?: boolean;
    phoneNumber?: string;
    phoneVerificationCode?: string;
    primaryOutcomeVariableId?: number;
    providerId?: string;
    providerToken?: string;
    pushNotificationsEnabled?: boolean;
    reasonForAnalysis?: string;
    referrerUserId?: number;
    refreshToken?: string;
    regProvider?: string;
    rememberToken?: string;
    sendPredictorEmails?: boolean;
    sendReminderNotificationEmails?: boolean;
    smsNotificationsEnabled?: boolean;
    spam?: number;
    state?: string;
    status?: string;
    stripeActive?: boolean;
    stripeId?: string;
    stripePlan?: string;
    stripeSubscription?: string;
    subscriptionEndsAt?: Date;
    subscriptionProvider?: string;
    tagLine?: string;
    timeZoneOffset?: number;
    timezone?: string;
    trackLocation?: boolean;
    trialEndsAt?: Date;
    unsubscribed?: boolean;
    updatedAt?: Date;
    userActivationKey?: string;
    userEmail?: string;
    userErrorMessage?: string;
    userLogin?: string;
    userNicename?: string;
    userPass?: string;
    userRegistered?: Date;
    userStatus?: number;
    userUrl?: string;
    verified?: string;
    wpPostId?: number;
    zipCode?: string;
}
export interface ListVariableCategoriesRequest {
    limit?: number;
    offset?: number;
    averageSecondsBetweenMeasurements?: string;
    causeOnly?: boolean;
    combinationOperation?: string;
    createdAt?: Date;
    defaultUnitId?: number;
    deletedAt?: Date;
    durationOfAction?: number;
    fillingType?: string;
    fillingValue?: number;
    id?: number;
    imageUrl?: string;
    manualTracking?: string;
    maximumAllowedValue?: number;
    medianSecondsBetweenMeasurements?: string;
    minimumAllowedSecondsBetweenMeasurements?: string;
    minimumAllowedValue?: number;
    name?: string;
    numberOfOutcomeCaseStudies?: string;
    numberOfOutcomePopulationStudies?: string;
    numberOfPredictorCaseStudies?: string;
    numberOfPredictorPopulationStudies?: string;
    onsetDelay?: number;
    outcome?: boolean;
    _public?: number;
    updated?: number;
    updatedAt?: Date;
    wpPostId?: string;
}
export interface ListVariableUserSourcesRequest {
    limit?: number;
    offset?: number;
    clientId?: string;
    createdAt?: Date;
    dataSourceName?: string;
    deletedAt?: Date;
    earliestMeasurementStartAt?: Date;
    earliestMeasurementTime?: number;
    id?: number;
    latestMeasurementStartAt?: Date;
    latestMeasurementTime?: number;
    numberOfRawMeasurements?: number;
    sourceId?: number;
    timestamp?: number;
    updatedAt?: Date;
    userId?: number;
    userVariableId?: number;
    variableId?: number;
}
export interface ListVariablesRequest {
    limit?: number;
    offset?: number;
    analysisEndedAt?: Date;
    analysisRequestedAt?: Date;
    analysisSettingsModifiedAt?: Date;
    analysisStartedAt?: Date;
    averageSecondsBetweenMeasurements?: number;
    bestAggregateCorrelationId?: number;
    bestCauseVariableId?: number;
    bestEffectVariableId?: number;
    brandName?: string;
    causeOnly?: boolean;
    clientId?: string;
    combinationOperation?: string;
    commonAlias?: string;
    commonMaximumAllowedDailyValue?: number;
    commonMinimumAllowedDailyValue?: number;
    commonMinimumAllowedNonZeroValue?: number;
    createdAt?: Date;
    creatorUserId?: number;
    defaultUnitId?: number;
    defaultValue?: number;
    deletedAt?: Date;
    description?: string;
    durationOfAction?: number;
    earliestMeasurementTime?: string;
    earliestNonTaggedMeasurementStartAt?: Date;
    earliestNonTaggedMeasurementTime?: number;
    earliestTaggedMeasurementStartAt?: Date;
    earliestTaggedMeasurementTime?: number;
    fillingType?: string;
    fillingValue?: number;
    id?: number;
    imageUrl?: string;
    informationalUrl?: string;
    internalErrorMessage?: string;
    ionIcon?: string;
    kurtosis?: number;
    lastSuccessfulUpdateTime?: Date;
    latestMeasurementTime?: string;
    latestNonTaggedMeasurementStartAt?: Date;
    latestNonTaggedMeasurementTime?: number;
    latestTaggedMeasurementStartAt?: Date;
    latestTaggedMeasurementTime?: number;
    manualTracking?: boolean;
    maximumAllowedValue?: number;
    maximumRecordedValue?: number;
    mean?: number;
    median?: number;
    medianSecondsBetweenMeasurements?: number;
    minimumAllowedSecondsBetweenMeasurements?: number;
    minimumAllowedValue?: number;
    minimumRecordedValue?: number;
    mostCommonConnectorId?: number;
    mostCommonOriginalUnitId?: number;
    mostCommonSourceName?: string;
    mostCommonValue?: number;
    name?: string;
    newestDataAt?: Date;
    numberCommonTaggedBy?: number;
    numberOfAggregateCorrelationsAsCause?: number;
    numberOfAggregateCorrelationsAsEffect?: number;
    numberOfApplicationsWhereOutcomeVariable?: string;
    numberOfApplicationsWherePredictorVariable?: string;
    numberOfCommonTags?: number;
    numberOfCommonTagsWhereTagVariable?: string;
    numberOfCommonTagsWhereTaggedVariable?: string;
    numberOfOutcomeCaseStudies?: string;
    numberOfOutcomePopulationStudies?: string;
    numberOfPredictorPopulationStudies?: string;
    numberOfRawMeasurements?: number;
    numberOfRawMeasurementsWithTagsJoinsChildren?: number;
    numberOfSoftDeletedMeasurements?: string;
    numberOfTrackingReminders?: number;
    numberOfUniqueValues?: number;
    numberOfUserVariables?: number;
    onsetDelay?: number;
    optimalValueMessage?: string;
    outcome?: boolean;
    parentId?: number;
    price?: number;
    productUrl?: string;
    _public?: number;
    reasonForAnalysis?: string;
    secondMostCommonValue?: number;
    skewness?: number;
    standardDeviation?: number;
    status?: string;
    thirdMostCommonValue?: number;
    upc12?: string;
    upc14?: string;
    updatedAt?: Date;
    userErrorMessage?: string;
    valence?: string;
    variableCategoryId?: number;
    variance?: number;
    wikipediaTitle?: string;
    wikipediaUrl?: string;
    wpPostId?: string;
}
export interface ListVotesRequest {
    limit?: number;
    offset?: number;
    causeVariableId?: number;
    clientId?: string;
    createdAt?: Date;
    deletedAt?: Date;
    effectVariableId?: number;
    id?: number;
    updatedAt?: Date;
    userId?: number;
    value?: number;
}
export interface UpdateAggregateCorrelationRequest {
    id: number;
}
export interface UpdateApplicationRequest {
    id: number;
}
export interface UpdateCollaboratorRequest {
    id: number;
}
export interface UpdateCommonTagRequest {
    id: number;
}
export interface UpdateConnectionRequest {
    id: number;
}
export interface UpdateConnectorRequest {
    id: number;
}
export interface UpdateConnectorImportRequest {
    id: number;
}
export interface UpdateConnectorRequestRequest {
    id: number;
}
export interface UpdateCorrelationRequest {
    id: number;
}
export interface UpdateDeviceTokenRequest {
    id: number;
}
export interface UpdateMeasurementRequest {
    id: number;
}
export interface UpdateMeasurementExportRequest {
    id: number;
}
export interface UpdateMeasurementImportRequest {
    id: number;
}
export interface UpdateNotificationRequest {
    id: string;
}
export interface UpdateOAuthAccessTokenRequest {
    id: number;
}
export interface UpdateOAuthClientRequest {
    id: number;
}
export interface UpdatePostRequest {
    id: number;
}
export interface UpdateSentEmailRequest {
    id: number;
}
export interface UpdateStudyRequest {
    id: number;
}
export interface UpdateTrackingReminderRequest {
    id: number;
}
export interface UpdateTrackingReminderNotificationRequest {
    id: number;
}
export interface UpdateUserRequest {
    id: number;
}
export interface UpdateUserTagRequest {
    id: number;
}
export interface UpdateUserVariableRequest {
    id: number;
}
export interface UpdateVariableRequest {
    id: number;
}
export interface UpdateVariableCategoryRequest {
    id: number;
}
export interface UpdateVariableUserSourceRequest {
    id: number;
}
export interface UpdateVoteRequest {
    id: number;
}
/**
 *
 */
export declare class DefaultApi extends runtime.BaseAPI {
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Delete a Aggregate Correlation
     */
    deleteAggregateCorrelationRaw(requestParameters: DeleteAggregateCorrelationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Delete a Aggregate Correlation
     */
    deleteAggregateCorrelation(requestParameters: DeleteAggregateCorrelationRequest): Promise<void>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Delete a Application
     */
    deleteApplicationRaw(requestParameters: DeleteApplicationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Delete a Application
     */
    deleteApplication(requestParameters: DeleteApplicationRequest): Promise<void>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Delete a Collaborator
     */
    deleteCollaboratorRaw(requestParameters: DeleteCollaboratorRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Delete a Collaborator
     */
    deleteCollaborator(requestParameters: DeleteCollaboratorRequest): Promise<void>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a Common Tag
     */
    deleteCommonTagRaw(requestParameters: DeleteCommonTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a Common Tag
     */
    deleteCommonTag(requestParameters: DeleteCommonTagRequest): Promise<void>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Delete a Connection
     */
    deleteConnectionRaw(requestParameters: DeleteConnectionRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Delete a Connection
     */
    deleteConnection(requestParameters: DeleteConnectionRequest): Promise<void>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Delete a Connector
     */
    deleteConnectorRaw(requestParameters: DeleteConnectorRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Delete a Connector
     */
    deleteConnector(requestParameters: DeleteConnectorRequest): Promise<void>;
    /**
     * A record of attempts to import from a given data source.
     * Delete a Connector Import
     */
    deleteConnectorImportRaw(requestParameters: DeleteConnectorImportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A record of attempts to import from a given data source.
     * Delete a Connector Import
     */
    deleteConnectorImport(requestParameters: DeleteConnectorImportRequest): Promise<void>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Delete a Connector Request
     */
    deleteConnectorRequestRaw(requestParameters: DeleteConnectorRequestRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Delete a Connector Request
     */
    deleteConnectorRequest(requestParameters: DeleteConnectorRequestRequest): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Delete a Correlation
     */
    deleteCorrelationRaw(requestParameters: DeleteCorrelationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Delete a Correlation
     */
    deleteCorrelation(requestParameters: DeleteCorrelationRequest): Promise<void>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Delete a Device Token
     */
    deleteDeviceTokenRaw(requestParameters: DeleteDeviceTokenRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Delete a Device Token
     */
    deleteDeviceToken(requestParameters: DeleteDeviceTokenRequest): Promise<void>;
    /**
     * Measurement
     * Delete a Measurement
     */
    deleteMeasurementRaw(requestParameters: DeleteMeasurementRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Measurement
     * Delete a Measurement
     */
    deleteMeasurement(requestParameters: DeleteMeasurementRequest): Promise<void>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Delete a Measurement Export
     */
    deleteMeasurementExportRaw(requestParameters: DeleteMeasurementExportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Delete a Measurement Export
     */
    deleteMeasurementExport(requestParameters: DeleteMeasurementExportRequest): Promise<void>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Delete a Measurement Import
     */
    deleteMeasurementImportRaw(requestParameters: DeleteMeasurementImportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Delete a Measurement Import
     */
    deleteMeasurementImport(requestParameters: DeleteMeasurementImportRequest): Promise<void>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Delete a Notification
     */
    deleteNotificationRaw(requestParameters: DeleteNotificationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Delete a Notification
     */
    deleteNotification(requestParameters: DeleteNotificationRequest): Promise<void>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Delete a OAuth Access Token
     */
    deleteOAuthAccessTokenRaw(requestParameters: DeleteOAuthAccessTokenRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Delete a OAuth Access Token
     */
    deleteOAuthAccessToken(requestParameters: DeleteOAuthAccessTokenRequest): Promise<void>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Delete a OAuth Client
     */
    deleteOAuthClientRaw(requestParameters: DeleteOAuthClientRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Delete a OAuth Client
     */
    deleteOAuthClient(requestParameters: DeleteOAuthClientRequest): Promise<void>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Delete a Post
     */
    deletePostRaw(requestParameters: DeletePostRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Delete a Post
     */
    deletePost(requestParameters: DeletePostRequest): Promise<void>;
    /**
     * A sent email
     * Delete a Sent Email
     */
    deleteSentEmailRaw(requestParameters: DeleteSentEmailRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A sent email
     * Delete a Sent Email
     */
    deleteSentEmail(requestParameters: DeleteSentEmailRequest): Promise<void>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Delete a Study
     */
    deleteStudyRaw(requestParameters: DeleteStudyRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Delete a Study
     */
    deleteStudy(requestParameters: DeleteStudyRequest): Promise<void>;
    /**
     * Favorite
     * Delete a Tracking Reminder
     */
    deleteTrackingReminderRaw(requestParameters: DeleteTrackingReminderRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Favorite
     * Delete a Tracking Reminder
     */
    deleteTrackingReminder(requestParameters: DeleteTrackingReminderRequest): Promise<void>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Delete a Tracking Reminder Notification
     */
    deleteTrackingReminderNotificationRaw(requestParameters: DeleteTrackingReminderNotificationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Delete a Tracking Reminder Notification
     */
    deleteTrackingReminderNotification(requestParameters: DeleteTrackingReminderNotificationRequest): Promise<void>;
    /**
     * Overview of discoveries, research from \'s data
     * Delete a User
     */
    deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Overview of discoveries, research from \'s data
     * Delete a User
     */
    deleteUser(requestParameters: DeleteUserRequest): Promise<void>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a User Tag
     */
    deleteUserTagRaw(requestParameters: DeleteUserTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Delete a User Tag
     */
    deleteUserTag(requestParameters: DeleteUserTagRequest): Promise<void>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Delete a User Variable
     */
    deleteUserVariableRaw(requestParameters: DeleteUserVariableRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Delete a User Variable
     */
    deleteUserVariable(requestParameters: DeleteUserVariableRequest): Promise<void>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Delete a Variable
     */
    deleteVariableRaw(requestParameters: DeleteVariableRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Delete a Variable
     */
    deleteVariable(requestParameters: DeleteVariableRequest): Promise<void>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Delete a Variable Category
     */
    deleteVariableCategoryRaw(requestParameters: DeleteVariableCategoryRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Delete a Variable Category
     */
    deleteVariableCategory(requestParameters: DeleteVariableCategoryRequest): Promise<void>;
    /**
     * A list of data sources for a given variable for a given user.
     * Delete a Variable User Source
     */
    deleteVariableUserSourceRaw(requestParameters: DeleteVariableUserSourceRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A list of data sources for a given variable for a given user.
     * Delete a Variable User Source
     */
    deleteVariableUserSource(requestParameters: DeleteVariableUserSourceRequest): Promise<void>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Delete a Vote
     */
    deleteVoteRaw(requestParameters: DeleteVoteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Delete a Vote
     */
    deleteVote(requestParameters: DeleteVoteRequest): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Get a Aggregate Correlation
     */
    getAggregateCorrelationRaw(requestParameters: GetAggregateCorrelationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Get a Aggregate Correlation
     */
    getAggregateCorrelation(requestParameters: GetAggregateCorrelationRequest): Promise<void>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Get a Application
     */
    getApplicationRaw(requestParameters: GetApplicationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Get a Application
     */
    getApplication(requestParameters: GetApplicationRequest): Promise<void>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Get a Collaborator
     */
    getCollaboratorRaw(requestParameters: GetCollaboratorRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Get a Collaborator
     */
    getCollaborator(requestParameters: GetCollaboratorRequest): Promise<void>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a Common Tag
     */
    getCommonTagRaw(requestParameters: GetCommonTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a Common Tag
     */
    getCommonTag(requestParameters: GetCommonTagRequest): Promise<void>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Get a Connection
     */
    getConnectionRaw(requestParameters: GetConnectionRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Get a Connection
     */
    getConnection(requestParameters: GetConnectionRequest): Promise<void>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Get a Connector
     */
    getConnectorRaw(requestParameters: GetConnectorRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Get a Connector
     */
    getConnector(requestParameters: GetConnectorRequest): Promise<void>;
    /**
     * A record of attempts to import from a given data source.
     * Get a Connector Import
     */
    getConnectorImportRaw(requestParameters: GetConnectorImportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A record of attempts to import from a given data source.
     * Get a Connector Import
     */
    getConnectorImport(requestParameters: GetConnectorImportRequest): Promise<void>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Get a Connector Request
     */
    getConnectorRequestRaw(requestParameters: GetConnectorRequestRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Get a Connector Request
     */
    getConnectorRequest(requestParameters: GetConnectorRequestRequest): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Get a Correlation
     */
    getCorrelationRaw(requestParameters: GetCorrelationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Get a Correlation
     */
    getCorrelation(requestParameters: GetCorrelationRequest): Promise<void>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Get a Device Token
     */
    getDeviceTokenRaw(requestParameters: GetDeviceTokenRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Get a Device Token
     */
    getDeviceToken(requestParameters: GetDeviceTokenRequest): Promise<void>;
    /**
     * Measurement
     * Get a Measurement
     */
    getMeasurementRaw(requestParameters: GetMeasurementRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Measurement
     * Get a Measurement
     */
    getMeasurement(requestParameters: GetMeasurementRequest): Promise<void>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Get a Measurement Export
     */
    getMeasurementExportRaw(requestParameters: GetMeasurementExportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Get a Measurement Export
     */
    getMeasurementExport(requestParameters: GetMeasurementExportRequest): Promise<void>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Get a Measurement Import
     */
    getMeasurementImportRaw(requestParameters: GetMeasurementImportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Get a Measurement Import
     */
    getMeasurementImport(requestParameters: GetMeasurementImportRequest): Promise<void>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Get a Notification
     */
    getNotificationRaw(requestParameters: GetNotificationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Get a Notification
     */
    getNotification(requestParameters: GetNotificationRequest): Promise<void>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Get a OAuth Access Token
     */
    getOAuthAccessTokenRaw(requestParameters: GetOAuthAccessTokenRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Get a OAuth Access Token
     */
    getOAuthAccessToken(requestParameters: GetOAuthAccessTokenRequest): Promise<void>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Get a OAuth Client
     */
    getOAuthClientRaw(requestParameters: GetOAuthClientRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Get a OAuth Client
     */
    getOAuthClient(requestParameters: GetOAuthClientRequest): Promise<void>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Get a Post
     */
    getPostRaw(requestParameters: GetPostRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Get a Post
     */
    getPost(requestParameters: GetPostRequest): Promise<void>;
    /**
     * A sent email
     * Get a Sent Email
     */
    getSentEmailRaw(requestParameters: GetSentEmailRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A sent email
     * Get a Sent Email
     */
    getSentEmail(requestParameters: GetSentEmailRequest): Promise<void>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Get a Study
     */
    getStudyRaw(requestParameters: GetStudyRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Get a Study
     */
    getStudy(requestParameters: GetStudyRequest): Promise<void>;
    /**
     * Favorite
     * Get a Tracking Reminder
     */
    getTrackingReminderRaw(requestParameters: GetTrackingReminderRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Favorite
     * Get a Tracking Reminder
     */
    getTrackingReminder(requestParameters: GetTrackingReminderRequest): Promise<void>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Get a Tracking Reminder Notification
     */
    getTrackingReminderNotificationRaw(requestParameters: GetTrackingReminderNotificationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Get a Tracking Reminder Notification
     */
    getTrackingReminderNotification(requestParameters: GetTrackingReminderNotificationRequest): Promise<void>;
    /**
     * Overview of discoveries, research from \'s data
     * Get a User
     */
    getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Overview of discoveries, research from \'s data
     * Get a User
     */
    getUser(requestParameters: GetUserRequest): Promise<void>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a User Tag
     */
    getUserTagRaw(requestParameters: GetUserTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Get a User Tag
     */
    getUserTag(requestParameters: GetUserTagRequest): Promise<void>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Get a User Variable
     */
    getUserVariableRaw(requestParameters: GetUserVariableRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Get a User Variable
     */
    getUserVariable(requestParameters: GetUserVariableRequest): Promise<void>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Get a Variable
     */
    getVariableRaw(requestParameters: GetVariableRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Get a Variable
     */
    getVariable(requestParameters: GetVariableRequest): Promise<void>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Get a Variable Category
     */
    getVariableCategoryRaw(requestParameters: GetVariableCategoryRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Get a Variable Category
     */
    getVariableCategory(requestParameters: GetVariableCategoryRequest): Promise<void>;
    /**
     * A list of data sources for a given variable for a given user.
     * Get a Variable User Source
     */
    getVariableUserSourceRaw(requestParameters: GetVariableUserSourceRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A list of data sources for a given variable for a given user.
     * Get a Variable User Source
     */
    getVariableUserSource(requestParameters: GetVariableUserSourceRequest): Promise<void>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Get a Vote
     */
    getVoteRaw(requestParameters: GetVoteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Get a Vote
     */
    getVote(requestParameters: GetVoteRequest): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * List Aggregate Correlations
     */
    listAggregateCorrelationsRaw(requestParameters: ListAggregateCorrelationsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * List Aggregate Correlations
     */
    listAggregateCorrelations(requestParameters: ListAggregateCorrelationsRequest): Promise<void>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * List Applications
     */
    listApplicationsRaw(requestParameters: ListApplicationsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * List Applications
     */
    listApplications(requestParameters: ListApplicationsRequest): Promise<void>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * List Collaborators
     */
    listCollaboratorsRaw(requestParameters: ListCollaboratorsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * List Collaborators
     */
    listCollaborators(requestParameters: ListCollaboratorsRequest): Promise<void>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List Common Tags
     */
    listCommonTagsRaw(requestParameters: ListCommonTagsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List Common Tags
     */
    listCommonTags(requestParameters: ListCommonTagsRequest): Promise<void>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * List Connections
     */
    listConnectionsRaw(requestParameters: ListConnectionsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * List Connections
     */
    listConnections(requestParameters: ListConnectionsRequest): Promise<void>;
    /**
     * A record of attempts to import from a given data source.
     * List Connector Imports
     */
    listConnectorImportsRaw(requestParameters: ListConnectorImportsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A record of attempts to import from a given data source.
     * List Connector Imports
     */
    listConnectorImports(requestParameters: ListConnectorImportsRequest): Promise<void>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * List Connector Requests
     */
    listConnectorRequestsRaw(requestParameters: ListConnectorRequestsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * List Connector Requests
     */
    listConnectorRequests(requestParameters: ListConnectorRequestsRequest): Promise<void>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List Connectors
     */
    listConnectorsRaw(requestParameters: ListConnectorsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List Connectors
     */
    listConnectors(requestParameters: ListConnectorsRequest): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * List Correlations
     */
    listCorrelationsRaw(requestParameters: ListCorrelationsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * List Correlations
     */
    listCorrelations(requestParameters: ListCorrelationsRequest): Promise<void>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * List Device Tokens
     */
    listDeviceTokensRaw(requestParameters: ListDeviceTokensRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * List Device Tokens
     */
    listDeviceTokens(requestParameters: ListDeviceTokensRequest): Promise<void>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * List Measurement Exports
     */
    listMeasurementExportsRaw(requestParameters: ListMeasurementExportsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * List Measurement Exports
     */
    listMeasurementExports(requestParameters: ListMeasurementExportsRequest): Promise<void>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * List Measurement Imports
     */
    listMeasurementImportsRaw(requestParameters: ListMeasurementImportsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * List Measurement Imports
     */
    listMeasurementImports(requestParameters: ListMeasurementImportsRequest): Promise<void>;
    /**
     * Measurement
     * List Measurements
     */
    listMeasurementsRaw(requestParameters: ListMeasurementsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Measurement
     * List Measurements
     */
    listMeasurements(requestParameters: ListMeasurementsRequest): Promise<void>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * List Notifications
     */
    listNotificationsRaw(requestParameters: ListNotificationsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * List Notifications
     */
    listNotifications(requestParameters: ListNotificationsRequest): Promise<void>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * List OAuth Access Tokens
     */
    listOAuthAccessTokensRaw(requestParameters: ListOAuthAccessTokensRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * List OAuth Access Tokens
     */
    listOAuthAccessTokens(requestParameters: ListOAuthAccessTokensRequest): Promise<void>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * List OAuth Clients
     */
    listOAuthClientsRaw(requestParameters: ListOAuthClientsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * List OAuth Clients
     */
    listOAuthClients(requestParameters: ListOAuthClientsRequest): Promise<void>;
    /**
     * Published studies at the Journal of Citizen Science.
     * List Posts
     */
    listPostsRaw(requestParameters: ListPostsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Published studies at the Journal of Citizen Science.
     * List Posts
     */
    listPosts(requestParameters: ListPostsRequest): Promise<void>;
    /**
     * A sent email
     * List Sent Emails
     */
    listSentEmailsRaw(requestParameters: ListSentEmailsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A sent email
     * List Sent Emails
     */
    listSentEmails(requestParameters: ListSentEmailsRequest): Promise<void>;
    /**
     * Study Analysis Settings Saved by Individuals
     * List Studies
     */
    listStudiesRaw(requestParameters: ListStudiesRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Study Analysis Settings Saved by Individuals
     * List Studies
     */
    listStudies(requestParameters: ListStudiesRequest): Promise<void>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * List Tracking Reminder Notifications
     */
    listTrackingReminderNotificationsRaw(requestParameters: ListTrackingReminderNotificationsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * List Tracking Reminder Notifications
     */
    listTrackingReminderNotifications(requestParameters: ListTrackingReminderNotificationsRequest): Promise<void>;
    /**
     * Favorite
     * List Tracking Reminders
     */
    listTrackingRemindersRaw(requestParameters: ListTrackingRemindersRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Favorite
     * List Tracking Reminders
     */
    listTrackingReminders(requestParameters: ListTrackingRemindersRequest): Promise<void>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List User Tags
     */
    listUserTagsRaw(requestParameters: ListUserTagsRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * List User Tags
     */
    listUserTags(requestParameters: ListUserTagsRequest): Promise<void>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * List User Variables
     */
    listUserVariablesRaw(requestParameters: ListUserVariablesRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * List User Variables
     */
    listUserVariables(requestParameters: ListUserVariablesRequest): Promise<void>;
    /**
     * Overview of discoveries, research from \'s data
     * List Users
     */
    listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Overview of discoveries, research from \'s data
     * List Users
     */
    listUsers(requestParameters: ListUsersRequest): Promise<void>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * List Variable Categories
     */
    listVariableCategoriesRaw(requestParameters: ListVariableCategoriesRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * List Variable Categories
     */
    listVariableCategories(requestParameters: ListVariableCategoriesRequest): Promise<void>;
    /**
     * A list of data sources for a given variable for a given user.
     * List Variable User Sources
     */
    listVariableUserSourcesRaw(requestParameters: ListVariableUserSourcesRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A list of data sources for a given variable for a given user.
     * List Variable User Sources
     */
    listVariableUserSources(requestParameters: ListVariableUserSourcesRequest): Promise<void>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * List Variables
     */
    listVariablesRaw(requestParameters: ListVariablesRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * List Variables
     */
    listVariables(requestParameters: ListVariablesRequest): Promise<void>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * List Votes
     */
    listVotesRaw(requestParameters: ListVotesRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * List Votes
     */
    listVotes(requestParameters: ListVotesRequest): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Store a Aggregate Correlation
     */
    storeAggregateCorrelationRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Store a Aggregate Correlation
     */
    storeAggregateCorrelation(): Promise<void>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Store a Application
     */
    storeApplicationRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Store a Application
     */
    storeApplication(): Promise<void>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Store a Collaborator
     */
    storeCollaboratorRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Store a Collaborator
     */
    storeCollaborator(): Promise<void>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a Common Tag
     */
    storeCommonTagRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a Common Tag
     */
    storeCommonTag(): Promise<void>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Store a Connection
     */
    storeConnectionRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Store a Connection
     */
    storeConnection(): Promise<void>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Store a Connector
     */
    storeConnectorRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Store a Connector
     */
    storeConnector(): Promise<void>;
    /**
     * A record of attempts to import from a given data source.
     * Store a Connector Import
     */
    storeConnectorImportRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * A record of attempts to import from a given data source.
     * Store a Connector Import
     */
    storeConnectorImport(): Promise<void>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Store a Connector Request
     */
    storeConnectorRequestRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Store a Connector Request
     */
    storeConnectorRequest(): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Store a Correlation
     */
    storeCorrelationRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Store a Correlation
     */
    storeCorrelation(): Promise<void>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Store a Device Token
     */
    storeDeviceTokenRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Store a Device Token
     */
    storeDeviceToken(): Promise<void>;
    /**
     * Measurement
     * Store a Measurement
     */
    storeMeasurementRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Measurement
     * Store a Measurement
     */
    storeMeasurement(): Promise<void>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Store a Measurement Export
     */
    storeMeasurementExportRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Store a Measurement Export
     */
    storeMeasurementExport(): Promise<void>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Store a Measurement Import
     */
    storeMeasurementImportRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Store a Measurement Import
     */
    storeMeasurementImport(): Promise<void>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Store a Notification
     */
    storeNotificationRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Store a Notification
     */
    storeNotification(): Promise<void>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Store a OAuth Access Token
     */
    storeOAuthAccessTokenRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Store a OAuth Access Token
     */
    storeOAuthAccessToken(): Promise<void>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Store a OAuth Client
     */
    storeOAuthClientRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Store a OAuth Client
     */
    storeOAuthClient(): Promise<void>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Store a Post
     */
    storePostRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Store a Post
     */
    storePost(): Promise<void>;
    /**
     * A sent email
     * Store a Sent Email
     */
    storeSentEmailRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * A sent email
     * Store a Sent Email
     */
    storeSentEmail(): Promise<void>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Store a Study
     */
    storeStudyRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Store a Study
     */
    storeStudy(): Promise<void>;
    /**
     * Favorite
     * Store a Tracking Reminder
     */
    storeTrackingReminderRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Favorite
     * Store a Tracking Reminder
     */
    storeTrackingReminder(): Promise<void>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Store a Tracking Reminder Notification
     */
    storeTrackingReminderNotificationRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Store a Tracking Reminder Notification
     */
    storeTrackingReminderNotification(): Promise<void>;
    /**
     * Overview of discoveries, research from \'s data
     * Store a User
     */
    storeUserRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Overview of discoveries, research from \'s data
     * Store a User
     */
    storeUser(): Promise<void>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a User Tag
     */
    storeUserTagRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Store a User Tag
     */
    storeUserTag(): Promise<void>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Store a User Variable
     */
    storeUserVariableRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Store a User Variable
     */
    storeUserVariable(): Promise<void>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Store a Variable
     */
    storeVariableRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Store a Variable
     */
    storeVariable(): Promise<void>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Store a Variable Category
     */
    storeVariableCategoryRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Store a Variable Category
     */
    storeVariableCategory(): Promise<void>;
    /**
     * A list of data sources for a given variable for a given user.
     * Store a Variable User Source
     */
    storeVariableUserSourceRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * A list of data sources for a given variable for a given user.
     * Store a Variable User Source
     */
    storeVariableUserSource(): Promise<void>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Store a Vote
     */
    storeVoteRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Store a Vote
     */
    storeVote(): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Update a Aggregate Correlation
     */
    updateAggregateCorrelationRaw(requestParameters: UpdateAggregateCorrelationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * Update a Aggregate Correlation
     */
    updateAggregateCorrelation(requestParameters: UpdateAggregateCorrelationRequest): Promise<void>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Update a Application
     */
    updateApplicationRaw(requestParameters: UpdateApplicationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Get the settings for your application configurable at https://builder.quantimo.do
     * Update a Application
     */
    updateApplication(requestParameters: UpdateApplicationRequest): Promise<void>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Update a Collaborator
     */
    updateCollaboratorRaw(requestParameters: UpdateCollaboratorRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do.
     * Update a Collaborator
     */
    updateCollaborator(requestParameters: UpdateCollaboratorRequest): Promise<void>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a Common Tag
     */
    updateCommonTagRaw(requestParameters: UpdateCommonTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a Common Tag
     */
    updateCommonTag(requestParameters: UpdateCommonTagRequest): Promise<void>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Update a Connection
     */
    updateConnectionRaw(requestParameters: UpdateConnectionRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Connections to 3rd party data sources that we can import from.
     * Update a Connection
     */
    updateConnection(requestParameters: UpdateConnectionRequest): Promise<void>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Update a Connector
     */
    updateConnectorRaw(requestParameters: UpdateConnectorRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * Update a Connector
     */
    updateConnector(requestParameters: UpdateConnectorRequest): Promise<void>;
    /**
     * A record of attempts to import from a given data source.
     * Update a Connector Import
     */
    updateConnectorImportRaw(requestParameters: UpdateConnectorImportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A record of attempts to import from a given data source.
     * Update a Connector Import
     */
    updateConnectorImport(requestParameters: UpdateConnectorImportRequest): Promise<void>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Update a Connector Request
     */
    updateConnectorRequestRaw(requestParameters: UpdateConnectorRequestRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An API request made to an HTTP endpoint during import from a data source.
     * Update a Connector Request
     */
    updateConnectorRequest(requestParameters: UpdateConnectorRequestRequest): Promise<void>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Update a Correlation
     */
    updateCorrelationRaw(requestParameters: UpdateCorrelationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * Update a Correlation
     */
    updateCorrelation(requestParameters: UpdateCorrelationRequest): Promise<void>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Update a Device Token
     */
    updateDeviceTokenRaw(requestParameters: UpdateDeviceTokenRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User token needed to send Android, iOS, or web push notifications.
     * Update a Device Token
     */
    updateDeviceToken(requestParameters: UpdateDeviceTokenRequest): Promise<void>;
    /**
     * Measurement
     * Update a Measurement
     */
    updateMeasurementRaw(requestParameters: UpdateMeasurementRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Measurement
     * Update a Measurement
     */
    updateMeasurement(requestParameters: UpdateMeasurementRequest): Promise<void>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Update a Measurement Export
     */
    updateMeasurementExportRaw(requestParameters: UpdateMeasurementExportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A request from a user to export their data as a spreadsheet.
     * Update a Measurement Export
     */
    updateMeasurementExport(requestParameters: UpdateMeasurementExportRequest): Promise<void>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Update a Measurement Import
     */
    updateMeasurementImportRaw(requestParameters: UpdateMeasurementImportRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * An uploaded spreadsheet or data file to be imported.
     * Update a Measurement Import
     */
    updateMeasurementImport(requestParameters: UpdateMeasurementImportRequest): Promise<void>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Update a Notification
     */
    updateNotificationRaw(requestParameters: UpdateNotificationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Tracking reminder notifications, messages, and study results.
     * Update a Notification
     */
    updateNotification(requestParameters: UpdateNotificationRequest): Promise<void>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Update a OAuth Access Token
     */
    updateOAuthAccessTokenRaw(requestParameters: UpdateOAuthAccessTokenRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Access tokens are the thing that applications use to make API requests on behalf of a user.
     * Update a OAuth Access Token
     */
    updateOAuthAccessToken(requestParameters: UpdateOAuthAccessTokenRequest): Promise<void>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Update a OAuth Client
     */
    updateOAuthClientRaw(requestParameters: UpdateOAuthClientRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client.
     * Update a OAuth Client
     */
    updateOAuthClient(requestParameters: UpdateOAuthClientRequest): Promise<void>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Update a Post
     */
    updatePostRaw(requestParameters: UpdatePostRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Published studies at the Journal of Citizen Science.
     * Update a Post
     */
    updatePost(requestParameters: UpdatePostRequest): Promise<void>;
    /**
     * A sent email
     * Update a Sent Email
     */
    updateSentEmailRaw(requestParameters: UpdateSentEmailRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A sent email
     * Update a Sent Email
     */
    updateSentEmail(requestParameters: UpdateSentEmailRequest): Promise<void>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Update a Study
     */
    updateStudyRaw(requestParameters: UpdateStudyRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Study Analysis Settings Saved by Individuals
     * Update a Study
     */
    updateStudy(requestParameters: UpdateStudyRequest): Promise<void>;
    /**
     * Favorite
     * Update a Tracking Reminder
     */
    updateTrackingReminderRaw(requestParameters: UpdateTrackingReminderRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Favorite
     * Update a Tracking Reminder
     */
    updateTrackingReminder(requestParameters: UpdateTrackingReminderRequest): Promise<void>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Update a Tracking Reminder Notification
     */
    updateTrackingReminderNotificationRaw(requestParameters: UpdateTrackingReminderNotificationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Specific reminder notification instances that still need to be tracked.
     * Update a Tracking Reminder Notification
     */
    updateTrackingReminderNotification(requestParameters: UpdateTrackingReminderNotificationRequest): Promise<void>;
    /**
     * Overview of discoveries, research from \'s data
     * Update a User
     */
    updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Overview of discoveries, research from \'s data
     * Update a User
     */
    updateUser(requestParameters: UpdateUserRequest): Promise<void>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a User Tag
     */
    updateUserTagRaw(requestParameters: UpdateUserTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Update a User Tag
     */
    updateUserTag(requestParameters: UpdateUserTagRequest): Promise<void>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Update a User Variable
     */
    updateUserVariableRaw(requestParameters: UpdateUserVariableRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * Update a User Variable
     */
    updateUserVariable(requestParameters: UpdateUserVariableRequest): Promise<void>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Update a Variable
     */
    updateVariableRaw(requestParameters: UpdateVariableRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data.
     * Update a Variable
     */
    updateVariable(requestParameters: UpdateVariableRequest): Promise<void>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Update a Variable Category
     */
    updateVariableCategoryRaw(requestParameters: UpdateVariableCategoryRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * Update a Variable Category
     */
    updateVariableCategory(requestParameters: UpdateVariableCategoryRequest): Promise<void>;
    /**
     * A list of data sources for a given variable for a given user.
     * Update a Variable User Source
     */
    updateVariableUserSourceRaw(requestParameters: UpdateVariableUserSourceRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * A list of data sources for a given variable for a given user.
     * Update a Variable User Source
     */
    updateVariableUserSource(requestParameters: UpdateVariableUserSourceRequest): Promise<void>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Update a Vote
     */
    updateVoteRaw(requestParameters: UpdateVoteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there\'s a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation.
     * Update a Vote
     */
    updateVote(requestParameters: UpdateVoteRequest): Promise<void>;
}
