/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CommonResponse, GetTrackingReminderNotificationsResponse, PostTrackingRemindersResponse, TrackingReminder, TrackingReminderDelete, TrackingReminderNotificationPost } from '../models';
export interface DeleteTrackingReminderRequest {
    body: TrackingReminderDelete;
    userId?: number;
}
export interface GetTrackingReminderNotificationsRequest {
    sort?: string;
    userId?: number;
    createdAt?: string;
    updatedAt?: string;
    limit?: number;
    offset?: number;
    variableCategoryName?: GetTrackingReminderNotificationsVariableCategoryNameEnum;
    reminderTime?: string;
    clientId?: string;
    onlyPast?: boolean;
    includeDeleted?: boolean;
    platform?: GetTrackingReminderNotificationsPlatformEnum;
}
export interface GetTrackingRemindersRequest {
    userId?: number;
    variableCategoryName?: GetTrackingRemindersVariableCategoryNameEnum;
    createdAt?: string;
    updatedAt?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    clientId?: string;
    appVersion?: string;
    platform?: GetTrackingRemindersPlatformEnum;
}
export interface PostTrackingReminderNotificationsRequest {
    body: Array<TrackingReminderNotificationPost>;
    userId?: number;
    clientId?: string;
    platform?: PostTrackingReminderNotificationsPlatformEnum;
}
export interface PostTrackingRemindersRequest {
    body: Array<TrackingReminder>;
}
/**
 *
 */
export declare class RemindersApi extends runtime.BaseAPI {
    /**
     * Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
     * Delete Tracking Reminder
     */
    deleteTrackingReminderRaw(requestParameters: DeleteTrackingReminderRequest): Promise<runtime.ApiResponse<CommonResponse>>;
    /**
     * Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
     * Delete Tracking Reminder
     */
    deleteTrackingReminder(requestParameters: DeleteTrackingReminderRequest): Promise<CommonResponse>;
    /**
     * Specific tracking reminder notification instances that still need to be tracked.
     * Get specific tracking reminder notifications
     */
    getTrackingReminderNotificationsRaw(requestParameters: GetTrackingReminderNotificationsRequest): Promise<runtime.ApiResponse<GetTrackingReminderNotificationsResponse>>;
    /**
     * Specific tracking reminder notification instances that still need to be tracked.
     * Get specific tracking reminder notifications
     */
    getTrackingReminderNotifications(requestParameters: GetTrackingReminderNotificationsRequest): Promise<GetTrackingReminderNotificationsResponse>;
    /**
     * Users can be reminded to track certain variables at a specified frequency with a default value.
     * Get repeating tracking reminder settings
     */
    getTrackingRemindersRaw(requestParameters: GetTrackingRemindersRequest): Promise<runtime.ApiResponse<Array<TrackingReminder>>>;
    /**
     * Users can be reminded to track certain variables at a specified frequency with a default value.
     * Get repeating tracking reminder settings
     */
    getTrackingReminders(requestParameters: GetTrackingRemindersRequest): Promise<Array<TrackingReminder>>;
    /**
     * Snooze, skip, or track a tracking reminder notification
     * Snooze, skip, or track a tracking reminder notification
     */
    postTrackingReminderNotificationsRaw(requestParameters: PostTrackingReminderNotificationsRequest): Promise<runtime.ApiResponse<CommonResponse>>;
    /**
     * Snooze, skip, or track a tracking reminder notification
     * Snooze, skip, or track a tracking reminder notification
     */
    postTrackingReminderNotifications(requestParameters: PostTrackingReminderNotificationsRequest): Promise<CommonResponse>;
    /**
     * This is to enable users to create reminders to track a variable with a default value at a specified frequency
     * Store a Tracking Reminder
     */
    postTrackingRemindersRaw(requestParameters: PostTrackingRemindersRequest): Promise<runtime.ApiResponse<PostTrackingRemindersResponse>>;
    /**
     * This is to enable users to create reminders to track a variable with a default value at a specified frequency
     * Store a Tracking Reminder
     */
    postTrackingReminders(requestParameters: PostTrackingRemindersRequest): Promise<PostTrackingRemindersResponse>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetTrackingReminderNotificationsVariableCategoryNameEnum {
    Activities = "Activities",
    Books = "Books",
    CausesOfIllness = "Causes of Illness",
    CognitivePerformance = "Cognitive Performance",
    Conditions = "Conditions",
    Emotions = "Emotions",
    Environment = "Environment",
    Foods = "Foods",
    Location = "Location",
    Miscellaneous = "Miscellaneous",
    MoviesAndTV = "Movies and TV",
    Music = "Music",
    Nutrients = "Nutrients",
    Payments = "Payments",
    PhysicalActivity = "Physical Activity",
    Physique = "Physique",
    Sleep = "Sleep",
    SocialInteractions = "Social Interactions",
    Software = "Software",
    Symptoms = "Symptoms",
    Treatments = "Treatments",
    VitalSigns = "Vital Signs",
    Goals = "Goals"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetTrackingReminderNotificationsPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetTrackingRemindersVariableCategoryNameEnum {
    Activities = "Activities",
    Books = "Books",
    CausesOfIllness = "Causes of Illness",
    CognitivePerformance = "Cognitive Performance",
    Conditions = "Conditions",
    Emotions = "Emotions",
    Environment = "Environment",
    Foods = "Foods",
    Location = "Location",
    Miscellaneous = "Miscellaneous",
    MoviesAndTV = "Movies and TV",
    Music = "Music",
    Nutrients = "Nutrients",
    Payments = "Payments",
    PhysicalActivity = "Physical Activity",
    Physique = "Physique",
    Sleep = "Sleep",
    SocialInteractions = "Social Interactions",
    Software = "Software",
    Symptoms = "Symptoms",
    Treatments = "Treatments",
    VitalSigns = "Vital Signs",
    Goals = "Goals"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetTrackingRemindersPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
/**
    * @export
    * @enum {string}
    */
export declare enum PostTrackingReminderNotificationsPlatformEnum {
    Chrome = "chrome",
    Android = "android",
    Ios = "ios",
    Web = "web"
}
