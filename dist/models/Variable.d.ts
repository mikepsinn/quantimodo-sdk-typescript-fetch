/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Card, DataSource, TrackingReminderNotificationAction, Unit, VariableCategory, VariableCharts } from './';
/**
 *
 * @export
 * @interface Variable
 */
export interface Variable {
    /**
     *
     * @type {Array<TrackingReminderNotificationAction>}
     * @memberof Variable
     */
    actionArray?: Array<TrackingReminderNotificationAction>;
    /**
     * User-Defined Variable Setting:  Alternative display name
     * @type {string}
     * @memberof Variable
     */
    alias?: string;
    /**
     *
     * @type {Array<Unit>}
     * @memberof Variable
     */
    availableUnits?: Array<Unit>;
    /**
     * Link to study comparing variable with strongest relationship for user or population
     * @type {string}
     * @memberof Variable
     */
    bestStudyLink?: string;
    /**
     *
     * @type {Card}
     * @memberof Variable
     */
    bestStudyCard?: Card;
    /**
     * Link to study comparing variable with strongest relationship for user
     * @type {string}
     * @memberof Variable
     */
    bestUserStudyLink?: string;
    /**
     *
     * @type {Card}
     * @memberof Variable
     */
    bestUserStudyCard?: Card;
    /**
     * Link to study comparing variable with strongest relationship for population
     * @type {string}
     * @memberof Variable
     */
    bestPopulationStudyLink?: string;
    /**
     *
     * @type {Card}
     * @memberof Variable
     */
    bestPopulationStudyCard?: Card;
    /**
     * Description of relationship with variable with strongest relationship for user or population
     * @type {string}
     * @memberof Variable
     */
    optimalValueMessage?: string;
    /**
     * Description of relationship with variable with strongest relationship for population
     * @type {string}
     * @memberof Variable
     */
    commonOptimalValueMessage?: string;
    /**
     * Description of relationship with variable with strongest relationship for user
     * @type {string}
     * @memberof Variable
     */
    userOptimalValueMessage?: string;
    /**
     *
     * @type {Card}
     * @memberof Variable
     */
    card?: Card;
    /**
     * User-Defined Variable Setting: True indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
     * @type {boolean}
     * @memberof Variable
     */
    causeOnly?: boolean;
    /**
     *
     * @type {VariableCharts}
     * @memberof Variable
     */
    charts?: VariableCharts;
    /**
     * Ex: https://local.quantimo.do/ionic/Modo/www/#/app/charts/Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png
     * @type {string}
     * @memberof Variable
     */
    chartsLinkDynamic?: string;
    /**
     * Ex: mailto:?subject=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21&body=See%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20history%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%0A%0AHave%20a%20great%20day!
     * @type {string}
     * @memberof Variable
     */
    chartsLinkEmail?: string;
    /**
     * Ex: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png
     * @type {string}
     * @memberof Variable
     */
    chartsLinkFacebook?: string;
    /**
     * Ex: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png
     * @type {string}
     * @memberof Variable
     */
    chartsLinkGoogle?: string;
    /**
     * Ex: https://local.quantimo.do/api/v2/charts?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png
     * @type {string}
     * @memberof Variable
     */
    chartsLinkStatic?: string;
    /**
     * Ex: https://twitter.com/home?status=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%20%40quantimodo
     * @type {string}
     * @memberof Variable
     */
    chartsLinkTwitter?: string;
    /**
     * Commonly defined for all users. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    childCommonTagVariables?: Array<Variable>;
    /**
     * User-Defined Variable Setting: An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    childUserTagVariables?: Array<Variable>;
    /**
     * Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
     * @type {string}
     * @memberof Variable
     */
    clientId?: string;
    /**
     * User-Defined Variable Setting: How to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
     * @type {string}
     * @memberof Variable
     */
    combinationOperation?: VariableCombinationOperationEnum;
    /**
     * Ex: Anxiety / Nervousness
     * @type {string}
     * @memberof Variable
     */
    commonAlias?: string;
    /**
     *
     * @type {Array<Variable>}
     * @memberof Variable
     */
    commonTaggedVariables?: Array<Variable>;
    /**
     *
     * @type {Array<Variable>}
     * @memberof Variable
     */
    commonTagVariables?: Array<Variable>;
    /**
     * When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format
     * @type {string}
     * @memberof Variable
     */
    createdAt?: string;
    /**
     * Comma-separated list of source names to limit variables to those sources
     * @type {string}
     * @memberof Variable
     */
    dataSourceNames?: string;
    /**
     * These are sources of measurements for this variable
     * @type {Array<DataSource>}
     * @memberof Variable
     */
    dataSources?: Array<DataSource>;
    /**
     * User-Defined Variable Setting: Ex: Summary to be used in studies.
     * @type {string}
     * @memberof Variable
     */
    description?: string;
    /**
     * Ex: Trader Joe's Bedtime Tea
     * @type {string}
     * @memberof Variable
     */
    displayName?: string;
    /**
     * The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay. Unit: Seconds
     * @type {number}
     * @memberof Variable
     */
    durationOfAction?: number;
    /**
     * User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours
     * @type {number}
     * @memberof Variable
     */
    durationOfActionInHours?: number;
    /**
     * Earliest filling time
     * @type {number}
     * @memberof Variable
     */
    earliestFillingTime?: number;
    /**
     * Earliest measurement time
     * @type {number}
     * @memberof Variable
     */
    earliestMeasurementTime?: number;
    /**
     * Earliest source time
     * @type {number}
     * @memberof Variable
     */
    earliestSourceTime?: number;
    /**
     * Error message from last analysis
     * @type {string}
     * @memberof Variable
     */
    errorMessage?: string;
    /**
     * User-Defined Variable Setting: Latest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss.
     * @type {string}
     * @memberof Variable
     */
    experimentEndTime?: string;
    /**
     * User-Defined Variable Setting: Earliest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss.
     * @type {string}
     * @memberof Variable
     */
    experimentStartTime?: string;
    /**
     * User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
     * @type {string}
     * @memberof Variable
     */
    fillingType?: VariableFillingTypeEnum;
    /**
     * User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.  Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    fillingValue?: number;
    /**
     * Ex: ion-sad-outline
     * @type {string}
     * @memberof Variable
     */
    iconIcon?: string;
    /**
     * Ex: 95614
     * @type {number}
     * @memberof Variable
     */
    id: number;
    /**
     * What do you expect?
     * @type {string}
     * @memberof Variable
     */
    imageUrl?: string;
    /**
     * Ex: https://google.com
     * @type {string}
     * @memberof Variable
     */
    informationalUrl?: string;
    /**
     * Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    ingredientOfCommonTagVariables?: Array<Variable>;
    /**
     * Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    ingredientCommonTagVariables?: Array<Variable>;
    /**
     * User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    ingredientOfUserTagVariables?: Array<Variable>;
    /**
     * User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    ingredientUserTagVariables?: Array<Variable>;
    /**
     * Type of input field to show for recording measurements
     * @type {string}
     * @memberof Variable
     */
    inputType?: string;
    /**
     * What do you expect?
     * @type {string}
     * @memberof Variable
     */
    ionIcon?: string;
    /**
     * Commonly defined for all users.  Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    joinedCommonTagVariables?: Array<Variable>;
    /**
     * User-Defined Variable Setting: Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    joinedUserTagVariables?: Array<Variable>;
    /**
     * Duplicate variables. If the variable is joined with some other variable then it is not shown to user in the list of variables
     * @type {number}
     * @memberof Variable
     */
    joinWith?: number;
    /**
     * Kurtosis
     * @type {number}
     * @memberof Variable
     */
    kurtosis?: number;
    /**
     * Calculated Statistic: Ex: 500. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    lastProcessedDailyValue?: number;
    /**
     * When this variable or its settings were last updated UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof Variable
     */
    lastSuccessfulUpdateTime?: string;
    /**
     * Calculated Statistic: Last measurement value in the common unit or user unit if different. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    lastValue?: number;
    /**
     * Latest filling time
     * @type {number}
     * @memberof Variable
     */
    latestFillingTime?: number;
    /**
     * Latest measurement time. Format: Unix-time epoch seconds.
     * @type {number}
     * @memberof Variable
     */
    latestMeasurementTime?: number;
    /**
     * Latest source time. Format: Unix-time epoch seconds.
     * @type {number}
     * @memberof Variable
     */
    latestSourceTime?: number;
    /**
     * Ex: 1501383600. Format: Unix-time epoch seconds.
     * @type {number}
     * @memberof Variable
     */
    latestUserMeasurementTime?: number;
    /**
     * Latitude. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    latitude?: number;
    /**
     * Location
     * @type {string}
     * @memberof Variable
     */
    location?: string;
    /**
     * Longitude
     * @type {number}
     * @memberof Variable
     */
    longitude?: number;
    /**
     * True if the variable is an emotion or symptom rating that is not typically automatically collected by a device or app.
     * @type {boolean}
     * @memberof Variable
     */
    manualTracking?: boolean;
    /**
     * User-Defined Variable Setting: The maximum allowed value a daily aggregated measurement. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    maximumAllowedDailyValue?: number;
    /**
     * User-Defined Variable Setting: The maximum allowed value a single measurement. While you can record a value above this maximum, it will be excluded from the correlation analysis.  Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    maximumAllowedValue?: number;
    /**
     * Calculated Statistic: Maximum recorded daily value of this variable. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    maximumRecordedDailyValue?: number;
    /**
     * Calculated Statistic: Ex: 1. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    maximumRecordedValue?: number;
    /**
     * Mean. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    mean?: number;
    /**
     * Number of measurements at last analysis
     * @type {number}
     * @memberof Variable
     */
    measurementsAtLastAnalysis?: number;
    /**
     * Median
     * @type {number}
     * @memberof Variable
     */
    median?: number;
    /**
     * User-Defined Variable Setting: The minimum allowed value a single measurement. While you can record a value below this minimum, it will be excluded from the correlation analysis. Unit: User-specified or common
     * @type {number}
     * @memberof Variable
     */
    minimumAllowedValue?: number;
    /**
     * User-Defined Variable Setting: The minimum allowed value a daily aggregated measurement.  For instance, you might set to 100 for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    minimumAllowedDailyValue?: number;
    /**
     * User-Defined Variable Setting: The minimum allowed non-zero value a single measurement.  For instance, you might set to 100 mL for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    minimumNonZeroValue?: number;
    /**
     * Minimum recorded value of this variable. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    minimumRecordedValue?: number;
    /**
     * Ex: 51
     * @type {number}
     * @memberof Variable
     */
    mostCommonConnectorId?: number;
    /**
     * Ex: 23
     * @type {number}
     * @memberof Variable
     */
    mostCommonOriginalUnitId?: number;
    /**
     * Most common Unit ID
     * @type {number}
     * @memberof Variable
     */
    mostCommonUnitId?: number;
    /**
     * Calculated Statistic: Most common value. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    mostCommonValue?: number;
    /**
     * Ex: Trader Joes Bedtime Tea / Sleepytime Tea (any Brand)
     * @type {string}
     * @memberof Variable
     */
    name: string;
    /**
     * Ex: 1
     * @type {number}
     * @memberof Variable
     */
    numberOfAggregateCorrelationsAsCause?: number;
    /**
     * Ex: 310
     * @type {number}
     * @memberof Variable
     */
    numberOfAggregateCorrelationsAsEffect?: number;
    /**
     * Number of changes
     * @type {number}
     * @memberof Variable
     */
    numberOfChanges?: number;
    /**
     * Number of correlations for this variable
     * @type {number}
     * @memberof Variable
     */
    numberOfCorrelations?: number;
    /**
     * numberOfAggregateCorrelationsAsCause plus numberOfUserCorrelationsAsCause
     * @type {number}
     * @memberof Variable
     */
    numberOfCorrelationsAsCause?: number;
    /**
     * numberOfAggregateCorrelationsAsEffect plus numberOfUserCorrelationsAsEffect
     * @type {number}
     * @memberof Variable
     */
    numberOfCorrelationsAsEffect?: number;
    /**
     * Number of processed measurements
     * @type {number}
     * @memberof Variable
     */
    numberOfProcessedDailyMeasurements?: number;
    /**
     * Ex: 295
     * @type {number}
     * @memberof Variable
     */
    numberOfRawMeasurements?: number;
    /**
     * Ex: 1
     * @type {number}
     * @memberof Variable
     */
    numberOfTrackingReminders?: number;
    /**
     * Number of unique daily values
     * @type {number}
     * @memberof Variable
     */
    numberOfUniqueDailyValues?: number;
    /**
     * Ex: 2
     * @type {number}
     * @memberof Variable
     */
    numberOfUniqueValues?: number;
    /**
     * Ex: 115
     * @type {number}
     * @memberof Variable
     */
    numberOfUserCorrelationsAsCause?: number;
    /**
     * Ex: 29014
     * @type {number}
     * @memberof Variable
     */
    numberOfUserCorrelationsAsEffect?: number;
    /**
     * Ex: 2
     * @type {number}
     * @memberof Variable
     */
    numberOfUserVariables?: number;
    /**
     * The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @type {number}
     * @memberof Variable
     */
    onsetDelay?: number;
    /**
     * User-Defined Variable Setting: The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @type {number}
     * @memberof Variable
     */
    onsetDelayInHours?: number;
    /**
     * User-Defined Variable Setting: True for variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
     * @type {boolean}
     * @memberof Variable
     */
    outcome?: boolean;
    /**
     * Do you want to receive updates on newly discovered factors influencing this variable?
     * @type {boolean}
     * @memberof Variable
     */
    outcomeOfInterest?: boolean;
    /**
     * Commonly defined for all users.  An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    parentCommonTagVariables?: Array<Variable>;
    /**
     * User-defined. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
     * @type {Array<Variable>}
     * @memberof Variable
     */
    parentUserTagVariables?: Array<Variable>;
    /**
     * Ex: img/variable_categories/treatments.png
     * @type {string}
     * @memberof Variable
     */
    pngPath?: string;
    /**
     * Ex: https://web.quantimo.do/img/variable_categories/treatments.png
     * @type {string}
     * @memberof Variable
     */
    pngUrl?: string;
    /**
     * Ex: 0
     * @type {number}
     * @memberof Variable
     */
    predictorOfInterest?: number;
    /**
     * Ex: 95.4
     * @type {number}
     * @memberof Variable
     */
    price?: number;
    /**
     * Link to associated product for purchase
     * @type {string}
     * @memberof Variable
     */
    productUrl?: string;
    /**
     * Should this variable show up in automcomplete searches for users who do not already have measurements for it?
     * @type {boolean}
     * @memberof Variable
     */
    _public?: boolean;
    /**
     * Ex: How is your overall mood?
     * @type {string}
     * @memberof Variable
     */
    question?: string;
    /**
     * Ex: How is your overall mood on a scale of 1 to 5??
     * @type {string}
     * @memberof Variable
     */
    longQuestion?: string;
    /**
     * Ex: 131
     * @type {number}
     * @memberof Variable
     */
    rawMeasurementsAtLastAnalysis?: number;
    /**
     * Calculated Statistic: Ex: 1. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    secondMostCommonValue?: number;
    /**
     * Calculated Statistic: Ex: 250. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    secondToLastValue?: number;
    /**
     * Would you like to make your measurements publicly visible?
     * @type {boolean}
     * @memberof Variable
     */
    shareUserMeasurements?: boolean;
    /**
     * Skewness
     * @type {number}
     * @memberof Variable
     */
    skewness?: number;
    /**
     * Standard deviation Ex: 0.46483219855434
     * @type {number}
     * @memberof Variable
     */
    standardDeviation?: number;
    /**
     * status
     * @type {string}
     * @memberof Variable
     */
    status?: string;
    /**
     * Based on sort filter and can be shown beneath variable name on search list
     * @type {string}
     * @memberof Variable
     */
    subtitle?: string;
    /**
     * Ex: https://web.quantimo.do/img/variable_categories/treatments.svg
     * @type {string}
     * @memberof Variable
     */
    svgUrl?: string;
    /**
     * Calculated Statistic: Ex: 6. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    thirdMostCommonValue?: number;
    /**
     * Calculated Statistic: Ex: 250. Unit: User-specified or common.
     * @type {number}
     * @memberof Variable
     */
    thirdToLastValue?: number;
    /**
     * HTML instructions for tracking
     * @type {string}
     * @memberof Variable
     */
    trackingInstructions?: string;
    /**
     *
     * @type {Card}
     * @memberof Variable
     */
    trackingInstructionsCard?: Card;
    /**
     *
     * @type {Unit}
     * @memberof Variable
     */
    unit?: Unit;
    /**
     * Ex: count
     * @type {string}
     * @memberof Variable
     */
    unitAbbreviatedName?: string;
    /**
     * Ex: 6
     * @type {number}
     * @memberof Variable
     */
    unitCategoryId?: number;
    /**
     * Ex: Miscellany
     * @type {string}
     * @memberof Variable
     */
    unitCategoryName?: string;
    /**
     * ID of unit to use for this variable
     * @type {number}
     * @memberof Variable
     */
    unitId?: number;
    /**
     * User-Defined Variable Setting: Count
     * @type {string}
     * @memberof Variable
     */
    unitName?: string;
    /**
     * Universal product code or similar
     * @type {string}
     * @memberof Variable
     */
    upc?: string;
    /**
     * updated
     * @type {number}
     * @memberof Variable
     */
    updated?: number;
    /**
     * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
     * @type {string}
     * @memberof Variable
     */
    updatedAt?: string;
    /**
     * Ex: 2017-07-30 14:58:26
     * @type {string}
     * @memberof Variable
     */
    updatedTime?: string;
    /**
     * User ID
     * @type {number}
     * @memberof Variable
     */
    userId: number;
    /**
     *
     * @type {Array<Variable>}
     * @memberof Variable
     */
    userTaggedVariables?: Array<Variable>;
    /**
     *
     * @type {Array<Variable>}
     * @memberof Variable
     */
    userTagVariables?: Array<Variable>;
    /**
     * Ex: count
     * @type {string}
     * @memberof Variable
     */
    userVariableUnitAbbreviatedName?: string;
    /**
     * Ex: 6
     * @type {number}
     * @memberof Variable
     */
    userVariableUnitCategoryId?: number;
    /**
     * Ex: Miscellany
     * @type {string}
     * @memberof Variable
     */
    userVariableUnitCategoryName?: string;
    /**
     * Ex: 23
     * @type {number}
     * @memberof Variable
     */
    userVariableUnitId?: number;
    /**
     * Ex: Count
     * @type {string}
     * @memberof Variable
     */
    userVariableUnitName?: string;
    /**
     *
     * @type {VariableCategory}
     * @memberof Variable
     */
    variableCategory?: VariableCategory;
    /**
     * Array of Variables that are joined with this Variable
     * @type {Array<Variable>}
     * @memberof Variable
     */
    joinedVariables?: Array<Variable>;
    /**
     * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
     * @type {string}
     * @memberof Variable
     */
    valence?: string;
    /**
     * Ex: 6
     * @type {number}
     * @memberof Variable
     */
    variableCategoryId?: number;
    /**
     * User-Defined Variable Setting: Variable category like Emotions, Sleep, Physical Activities, Treatments, Symptoms, etc.
     * @type {string}
     * @memberof Variable
     */
    variableCategoryName?: VariableVariableCategoryNameEnum;
    /**
     * Ex: 96380
     * @type {number}
     * @memberof Variable
     */
    variableId: number;
    /**
     * Ex: Sleep Duration
     * @type {string}
     * @memberof Variable
     */
    variableName?: string;
    /**
     * Statistic: Ex: 115947037.40816
     * @type {number}
     * @memberof Variable
     */
    variance?: number;
    /**
     * User-Defined Variable Setting: You can help to improve the studies by pasting the title of the most appropriate Wikipedia article for this variable
     * @type {string}
     * @memberof Variable
     */
    wikipediaTitle?: string;
}
export declare function VariableFromJSON(json: any): Variable;
export declare function VariableFromJSONTyped(json: any, ignoreDiscriminator: boolean): Variable;
export declare function VariableToJSON(value?: Variable | null): any;
/**
* @export
* @enum {string}
*/
export declare enum VariableCombinationOperationEnum {
    MEAN = "MEAN",
    SUM = "SUM"
}
/**
* @export
* @enum {string}
*/
export declare enum VariableFillingTypeEnum {
    None = "none",
    ZeroFilling = "zero-filling",
    ValueFilling = "value-filling"
}
/**
* @export
* @enum {string}
*/
export declare enum VariableVariableCategoryNameEnum {
    Activity = "Activity",
    Books = "Books",
    CausesOfIllness = "Causes of Illness",
    CognitivePerformance = "Cognitive Performance",
    Conditions = "Conditions",
    Emotions = "Emotions",
    Environment = "Environment",
    Foods = "Foods",
    Goals = "Goals",
    Locations = "Locations",
    Miscellaneous = "Miscellaneous",
    MoviesAndTV = "Movies and TV",
    Music = "Music",
    Nutrients = "Nutrients",
    Payments = "Payments",
    PhysicalActivities = "Physical Activities",
    Physique = "Physique",
    Sleep = "Sleep",
    SocialInteractions = "Social Interactions",
    Software = "Software",
    Symptoms = "Symptoms",
    Treatments = "Treatments",
    VitalSigns = "Vital Signs"
}
