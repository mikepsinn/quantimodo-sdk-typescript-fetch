"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("../runtime");
const _1 = require("./");
function DataSourceFromJSON(json) {
    return DataSourceFromJSONTyped(json, false);
}
exports.DataSourceFromJSON = DataSourceFromJSON;
function DataSourceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'affiliate': json['affiliate'],
        'backgroundColor': !runtime_1.exists(json, 'backgroundColor') ? undefined : json['backgroundColor'],
        'buttons': !runtime_1.exists(json, 'buttons') ? undefined : (json['buttons'].map(_1.ButtonFromJSON)),
        'card': !runtime_1.exists(json, 'card') ? undefined : _1.CardFromJSON(json['card']),
        'clientId': !runtime_1.exists(json, 'clientId') ? undefined : json['clientId'],
        'connected': !runtime_1.exists(json, 'connected') ? undefined : json['connected'],
        'connectError': !runtime_1.exists(json, 'connectError') ? undefined : json['connectError'],
        'connectInstructions': !runtime_1.exists(json, 'connectInstructions') ? undefined : _1.ConnectInstructionsFromJSON(json['connectInstructions']),
        'connectorId': !runtime_1.exists(json, 'connectorId') ? undefined : json['connectorId'],
        'connectStatus': !runtime_1.exists(json, 'connectStatus') ? undefined : json['connectStatus'],
        'count': !runtime_1.exists(json, 'count') ? undefined : json['count'],
        'createdAt': !runtime_1.exists(json, 'createdAt') ? undefined : json['createdAt'],
        'connectorClientId': json['connectorClientId'],
        'defaultVariableCategoryName': json['defaultVariableCategoryName'],
        'displayName': json['displayName'],
        'enabled': json['enabled'],
        'getItUrl': json['getItUrl'],
        'id': json['id'],
        'image': json['image'],
        'imageHtml': json['imageHtml'],
        'lastSuccessfulUpdatedAt': !runtime_1.exists(json, 'lastSuccessfulUpdatedAt') ? undefined : json['lastSuccessfulUpdatedAt'],
        'lastUpdate': !runtime_1.exists(json, 'lastUpdate') ? undefined : json['lastUpdate'],
        'linkedDisplayNameHtml': json['linkedDisplayNameHtml'],
        'longDescription': json['longDescription'],
        'message': !runtime_1.exists(json, 'message') ? undefined : json['message'],
        'mobileConnectMethod': !runtime_1.exists(json, 'mobileConnectMethod') ? undefined : json['mobileConnectMethod'],
        'name': json['name'],
        'platforms': !runtime_1.exists(json, 'platforms') ? undefined : json['platforms'],
        'premium': !runtime_1.exists(json, 'premium') ? undefined : json['premium'],
        'scopes': !runtime_1.exists(json, 'scopes') ? undefined : json['scopes'],
        'shortDescription': json['shortDescription'],
        'spreadsheetUploadLink': !runtime_1.exists(json, 'spreadsheetUploadLink') ? undefined : json['spreadsheetUploadLink'],
        'totalMeasurementsInLastUpdate': !runtime_1.exists(json, 'totalMeasurementsInLastUpdate') ? undefined : json['totalMeasurementsInLastUpdate'],
        'updatedAt': !runtime_1.exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'updateRequestedAt': !runtime_1.exists(json, 'updateRequestedAt') ? undefined : json['updateRequestedAt'],
        'updateStatus': !runtime_1.exists(json, 'updateStatus') ? undefined : json['updateStatus'],
        'userId': !runtime_1.exists(json, 'userId') ? undefined : json['userId'],
    };
}
exports.DataSourceFromJSONTyped = DataSourceFromJSONTyped;
function DataSourceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'affiliate': value.affiliate,
        'backgroundColor': value.backgroundColor,
        'buttons': value.buttons === undefined ? undefined : (value.buttons.map(_1.ButtonToJSON)),
        'card': _1.CardToJSON(value.card),
        'clientId': value.clientId,
        'connected': value.connected,
        'connectError': value.connectError,
        'connectInstructions': _1.ConnectInstructionsToJSON(value.connectInstructions),
        'connectorId': value.connectorId,
        'connectStatus': value.connectStatus,
        'count': value.count,
        'createdAt': value.createdAt,
        'connectorClientId': value.connectorClientId,
        'defaultVariableCategoryName': value.defaultVariableCategoryName,
        'displayName': value.displayName,
        'enabled': value.enabled,
        'getItUrl': value.getItUrl,
        'id': value.id,
        'image': value.image,
        'imageHtml': value.imageHtml,
        'lastSuccessfulUpdatedAt': value.lastSuccessfulUpdatedAt,
        'lastUpdate': value.lastUpdate,
        'linkedDisplayNameHtml': value.linkedDisplayNameHtml,
        'longDescription': value.longDescription,
        'message': value.message,
        'mobileConnectMethod': value.mobileConnectMethod,
        'name': value.name,
        'platforms': value.platforms,
        'premium': value.premium,
        'scopes': value.scopes,
        'shortDescription': value.shortDescription,
        'spreadsheetUploadLink': value.spreadsheetUploadLink,
        'totalMeasurementsInLastUpdate': value.totalMeasurementsInLastUpdate,
        'updatedAt': value.updatedAt,
        'updateRequestedAt': value.updateRequestedAt,
        'updateStatus': value.updateStatus,
        'userId': value.userId,
    };
}
exports.DataSourceToJSON = DataSourceToJSON;
