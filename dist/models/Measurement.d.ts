/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Card } from './';
/**
 *
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     *
     * @type {Card}
     * @memberof Measurement
     */
    card?: Card;
    /**
     * Ex: quantimodo
     * @type {string}
     * @memberof Measurement
     */
    clientId?: string;
    /**
     * Ex: 13
     * @type {number}
     * @memberof Measurement
     */
    connectorId?: number;
    /**
     * Ex: 2017-07-30 21:08:36
     * @type {string}
     * @memberof Measurement
     */
    createdAt?: string;
    /**
     * Examples: 3/5, $10, or 1 count
     * @type {string}
     * @memberof Measurement
     */
    displayValueAndUnitString?: string;
    /**
     * Ex: ion-sad-outline
     * @type {string}
     * @memberof Measurement
     */
    iconIcon?: string;
    /**
     * Ex: 1051466127
     * @type {number}
     * @memberof Measurement
     */
    id?: number;
    /**
     * Ex: value
     * @type {string}
     * @memberof Measurement
     */
    inputType?: string;
    /**
     * Ex: ion-ios-medkit-outline
     * @type {string}
     * @memberof Measurement
     */
    ionIcon?: string;
    /**
     * Ex: 1
     * @type {boolean}
     * @memberof Measurement
     */
    manualTracking?: boolean;
    /**
     * Ex: 5. Unit: User-specified or common.
     * @type {number}
     * @memberof Measurement
     */
    maximumAllowedValue?: number;
    /**
     * Ex: 1. Unit: User-specified or common.
     * @type {number}
     * @memberof Measurement
     */
    minimumAllowedValue?: number;
    /**
     * Note of measurement
     * @type {string}
     * @memberof Measurement
     */
    note?: string;
    /**
     * Additional meta data for the measurement
     * @type {object}
     * @memberof Measurement
     */
    noteObject?: object;
    /**
     * Embeddable HTML with message hyperlinked with associated url
     * @type {object}
     * @memberof Measurement
     */
    noteHtml?: object;
    /**
     * Ex: 23
     * @type {number}
     * @memberof Measurement
     */
    originalUnitId?: number;
    /**
     * Original value submitted. Unit: Originally submitted.
     * @type {number}
     * @memberof Measurement
     */
    originalValue?: number;
    /**
     * Ex: img/variable_categories/treatments.png
     * @type {string}
     * @memberof Measurement
     */
    pngPath?: string;
    /**
     * Ex: https://web.quantimo.do/img/variable_categories/treatments.png
     * @type {string}
     * @memberof Measurement
     */
    pngUrl?: string;
    /**
     * Link to associated product for purchase
     * @type {string}
     * @memberof Measurement
     */
    productUrl?: string;
    /**
     * Application or device used to record the measurement values
     * @type {string}
     * @memberof Measurement
     */
    sourceName: string;
    /**
     * Ex: 2014-08-27
     * @type {string}
     * @memberof Measurement
     */
    startDate?: string;
    /**
     * Seconds between the start of the event measured and 1970 (Unix timestamp)
     * @type {number}
     * @memberof Measurement
     */
    startTimeEpoch?: number;
    /**
     * Start Time for the measurement event in UTC ISO 8601 YYYY-MM-DDThh:mm:ss
     * @type {string}
     * @memberof Measurement
     */
    startTimeString: string;
    /**
     * Ex: https://web.quantimo.do/img/variable_categories/treatments.svg
     * @type {string}
     * @memberof Measurement
     */
    svgUrl?: string;
    /**
     * Abbreviated name for the unit of measurement
     * @type {string}
     * @memberof Measurement
     */
    unitAbbreviatedName: string;
    /**
     * Ex: 6
     * @type {number}
     * @memberof Measurement
     */
    unitCategoryId?: number;
    /**
     * Ex: Miscellany
     * @type {string}
     * @memberof Measurement
     */
    unitCategoryName?: string;
    /**
     * Ex: 23
     * @type {number}
     * @memberof Measurement
     */
    unitId?: number;
    /**
     * Ex: Count
     * @type {string}
     * @memberof Measurement
     */
    unitName?: string;
    /**
     * Ex: 2017-07-30 21:08:36
     * @type {string}
     * @memberof Measurement
     */
    updatedAt?: string;
    /**
     * Link to associated Facebook like or Github commit, for instance
     * @type {string}
     * @memberof Measurement
     */
    url?: string;
    /**
     * Ex: count
     * @type {string}
     * @memberof Measurement
     */
    userVariableUnitAbbreviatedName?: string;
    /**
     * Ex: 6
     * @type {number}
     * @memberof Measurement
     */
    userVariableUnitCategoryId?: number;
    /**
     * Ex: Miscellany
     * @type {string}
     * @memberof Measurement
     */
    userVariableUnitCategoryName?: string;
    /**
     * Ex: 23
     * @type {number}
     * @memberof Measurement
     */
    userVariableUnitId?: number;
    /**
     * Ex: Count
     * @type {string}
     * @memberof Measurement
     */
    userVariableUnitName?: string;
    /**
     * Ex: 13
     * @type {number}
     * @memberof Measurement
     */
    userVariableVariableCategoryId?: number;
    /**
     * Ex: Treatments
     * @type {string}
     * @memberof Measurement
     */
    userVariableVariableCategoryName?: string;
    /**
     * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
     * @type {string}
     * @memberof Measurement
     */
    valence?: string;
    /**
     * Converted measurement value in requested unit
     * @type {number}
     * @memberof Measurement
     */
    value: number;
    /**
     * Ex: 13
     * @type {number}
     * @memberof Measurement
     */
    variableCategoryId?: number;
    /**
     * Ex: https://static.quantimo.do/img/variable_categories/pill-96.png
     * @type {string}
     * @memberof Measurement
     */
    variableCategoryImageUrl?: string;
    /**
     * Ex: Emotions, Treatments, Symptoms...
     * @type {string}
     * @memberof Measurement
     */
    variableCategoryName?: MeasurementVariableCategoryNameEnum;
    /**
     * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
     * @type {string}
     * @memberof Measurement
     */
    variableDescription?: string;
    /**
     * Ex: 5956846
     * @type {number}
     * @memberof Measurement
     */
    variableId?: number;
    /**
     * Name of the variable for which we are creating the measurement records
     * @type {string}
     * @memberof Measurement
     */
    variableName: string;
    /**
     * Ex: Trader Joe's Bedtime Tea
     * @type {string}
     * @memberof Measurement
     */
    displayName?: string;
}
export declare function MeasurementFromJSON(json: any): Measurement;
export declare function MeasurementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Measurement;
export declare function MeasurementToJSON(value?: Measurement | null): any;
/**
* @export
* @enum {string}
*/
export declare enum MeasurementVariableCategoryNameEnum {
    Activity = "Activity",
    Books = "Books",
    CausesOfIllness = "Causes of Illness",
    CognitivePerformance = "Cognitive Performance",
    Conditions = "Conditions",
    Emotions = "Emotions",
    Environment = "Environment",
    Foods = "Foods",
    Goals = "Goals",
    Locations = "Locations",
    Miscellaneous = "Miscellaneous",
    MoviesAndTV = "Movies and TV",
    Music = "Music",
    Nutrients = "Nutrients",
    Payments = "Payments",
    PhysicalActivities = "Physical Activities",
    Physique = "Physique",
    Sleep = "Sleep",
    SocialInteractions = "Social Interactions",
    Software = "Software",
    Symptoms = "Symptoms",
    Treatments = "Treatments",
    VitalSigns = "Vital Signs"
}
