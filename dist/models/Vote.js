"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk\'s](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * The version of the OpenAPI document: 5.8.112511
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("../runtime");
function VoteFromJSON(json) {
    return VoteFromJSONTyped(json, false);
}
exports.VoteFromJSON = VoteFromJSON;
function VoteFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'causeVariableId': json['causeVariableId'],
        'clientId': json['clientId'],
        'createdAt': !runtime_1.exists(json, 'createdAt') ? undefined : json['createdAt'],
        'effectVariableId': json['effectVariableId'],
        'id': !runtime_1.exists(json, 'id') ? undefined : json['id'],
        'updatedAt': !runtime_1.exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'userId': json['userId'],
        'value': json['value'],
        'type': !runtime_1.exists(json, 'type') ? undefined : json['type'],
    };
}
exports.VoteFromJSONTyped = VoteFromJSONTyped;
function VoteToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'causeVariableId': value.causeVariableId,
        'clientId': value.clientId,
        'createdAt': value.createdAt,
        'effectVariableId': value.effectVariableId,
        'id': value.id,
        'updatedAt': value.updatedAt,
        'userId': value.userId,
        'value': value.value,
        'type': value.type,
    };
}
exports.VoteToJSON = VoteToJSON;
/**
* @export
* @enum {string}
*/
var VoteValueEnum;
(function (VoteValueEnum) {
    VoteValueEnum["Up"] = "up";
    VoteValueEnum["Down"] = "down";
    VoteValueEnum["None"] = "none";
})(VoteValueEnum = exports.VoteValueEnum || (exports.VoteValueEnum = {}));
/**
* @export
* @enum {string}
*/
var VoteTypeEnum;
(function (VoteTypeEnum) {
    VoteTypeEnum["Causality"] = "causality";
    VoteTypeEnum["Usefulness"] = "usefulness";
})(VoteTypeEnum = exports.VoteTypeEnum || (exports.VoteTypeEnum = {}));
